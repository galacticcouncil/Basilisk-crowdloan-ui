{"version":3,"sources":["containers/store/Actions.tsx","containers/store/Store.tsx","utils.tsx","ksmPrecision.tsx","config.tsx","containers/ApolloProvider.tsx","hooks/usePolkadot.tsx","assets/Logo-dark-2-clean.png","assets/basilisk-wallpaper-2.png","hooks/useCalculateIncentives.tsx","containers/CrowdloanContributeForm.tsx","containers/AccountSelector.tsx","containers/Graph.tsx","pages/Dashboard.tsx","hooks/useQueries.tsx","hooks/useAccountData.tsx","hooks/useChronicleData.tsx","hooks/useIncentivesData.tsx","hooks/useInitialData.tsx","hooks/useSiblingData.tsx","hooks/useDashboardData.tsx","hooks/useOwnData.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["ActionType","LoadingState","toKsmPrecision","humanAmount","BigNumber","multipliedBy","exponentiatedBy","toFixed","fromKsmPrecision","preciseAmount","dividedBy","ksmToUsd","amount","config","usdToHdx","hdxToUsd","precisionMultiplierBN","pow","ksmPrecisionMultiplierBN","processorUrl","nodeUrl","ownParachainId","ownCrowdloanBlockHeight","dappName","chronicleRefetchTimeout","auctionEndingPeriodLength","crowdloanCap","opportunityCost","ksmPrecision","displayPrecision","chart","historicalDataSpan","blocksPerDay","auctionClosingStart","incentives","hdx","leadPercentageRateCliffRange","toNumber","scale","max","min","none","bsx","allocated","client","ApolloClient","uri","cache","InMemoryCache","defaultOptions","watchQuery","fetchPolicy","query","ConfiguredApolloProvider","children","ApolloProvider","loadable","data","loading","Initial","Loading","loaded","Loaded","initialState","initial","initializedAtBlockHeight","undefined","chronicle","lastProcessedBlock","mostRecentAuctionStart","mostRecentAuctionClosingStart","leadPercentageRate","totalContributionWeight","siblingParachain","id","account","totalContributed","contributions","historicalIncentives","own","historicalFundsPledged","parachain","fundsPledged","hasWonAnAuction","sibling","reducer","state","action","type","LoadInitialData","SetInitialData","payload","ownHistoricalFundsPledged","ownParachain","LoadAccountData","SetAccountData","LoadChronicleData","SetChronicleData","LoadIncentiveData","SetIncentiveData","LoadHistoricalSiblingFundsPledgedData","SetHistoricalSiblingFundsPledgedData","LoadLatestSiblingFundsPledgedData","SetLatestSiblingFundsPledgedData","LoadLatestOwnFundsPledgedData","SetLatestOwnFundsPledgedData","constate","useReducer","dispatch","StoreProvider","useStoreContext","useDispatch","useState","useIsInitialDataLoaded","useInitializedAtBlockHeight","useChronicle","useChronicleLastProcessedBlock","useIncentives","useAccount","useOwnHasWonAnAuction","useOwn","useSibling","mockAccount","address","params","URL","document","location","searchParams","log","debug","get","accounts","setAccounts","useLocalStorage","activeAccount","setActiveAccount","encodeAddress","decodeAddress","activeAccountBalance","setActiveAccountBalance","showAccountSelector","setShowAccountSelector","setLoading","api","setApi","lastContributionStatus","setLastContributionStatus","useEffect","setTimeout","a","web3Enable","allInjected","web3Accounts","allAccounts","map","wsProvider","WsProvider","ApiPromise","create","provider","fetchBalance","system","balance","free","toString","contribute","web3FromAddress","signer","tx","crowdloan","signAndSend","status","events","isInBlock","isFinalized","filter","event","ExtrinsicFailed","is","length","e","console","error","PolkadotProvider","usePolkaDotContext","calculateBsxMultiplier","blockHeight","calculateContributionsWeight","reduce","weight","contribution","bsxMultiplier","plus","calculateMinimumBsxReceived","accountContributionsWeight","minimumBsxReceived","calculateCurrentBsxReceived","totalContributionWeightBN","isZero","currentBsxReceived","calculateCurrentHdxReceived","hdxReceivedInKsm","historicalIncentive","find","hdxBonus","parseInt","contributionHdxReceivedInKsm","useGlobalIncentives","leadPercentageRateBN","cliffStart","cliffEnd","lt","gt","linearScale","hdxBonusScale","calculateHdxBonus","CrowdloanContributeForm","connectAccount","setAmount","defaultRewards","minimalBsxReceived","currentHdxReceived","rewardsReceived","setRewardsReceived","ownFundsPledged","useOwnFundsPledged","ownHasWonAnAuction","currentContributionWeight","totalCurrentContributionWeight","noop","className","name","decimalsLimit","value","disabled","allowNegativeValue","placeholder","intlConfig","locale","onValueChange","minus","onClick","AccountSelector","onAccountSelect","ref","useRef","useClickAway","_","meta","Chart","register","annotationPlugin","millifyOptions","precision","decimalSeparator","defaults","animation","colors","Graph","siblingHistoricalFundsPledged","siblingFundsPledged","snek","setSnek","useKeyPress","keyCode","createDataset","historicalData","x","y","ownDataset","labels","lineChartData","datasets","label","borderColor","yAxisID","labelOptions","backgroundColor","position","enabled","color","font","family","size","xAdjust","cornerRadius","lineChartOptions","simpleLinearScale","useMemo","pointRadius","responsive","maintainAspectRatio","scales","display","plugins","tooltip","legend","autocolors","annotation","annotations","ownRaised","borderWidth","borderDash","scaleID","content","millify","parseFloat","src","width","height","options","style","parachainId","useDashboardData","currentAccountCurrentBsxReceived","contributionWeightOfAllContributors","String","useCalculateCurrentAccountCurrentBsxReceived","currentAccountCurrentHdxReceived","useCalculateCurrentAccountHdxReceived","Dashboard","href","target","bsxEye","bsxWallpaper","chronicleByUniqueInput","historicalFundsPledgedByParachainIdSinceBlockHeightDataQuery","gql","fundsPledgedByParachainIdDataQuery","initialDataQuery","parachainFundsPledgedByParachainId","historicalIncentivesByBlockHeightsDataQuery","accountByAccountIdDataQuery","chronicleDataQuery","incentivesDataQuery","useFundsPledgedByParachainIdDataQuery","useLazyQuery","variables","contributionsFromQuery","accountByAccountIdData","accountByUniqueInput","useAccountData","accountId","blockHeights","getAccountByAccountIdData","getHistoricalIncentivesByBlockHeightsData","historicalIncentivesByBlockHeightsData","called","useChronicleData","getChronicleData","chronicleData","intervalId","setInterval","clearInterval","_chronicle","useIncentivesData","isInitialDataLoaded","getIncentivesData","incentivesData","incentiveByUniqueInput","useInitialData","isInitialDataLoading","getInitialData","initialData","historicalParachainFundsPledgeds","parachainByUniqueInput","useSiblingData","siblingParachainId","previousSiblingParachainId","setPreviousSiblingParachainId","useHistoricalFundsPledgedByParachainIdDataQuery","getSiblingHistoricalFundsPledged","getLatestFundsPledged","latestFundsPledged","useOwnData","DashboardDataProvider","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","logLevel","setLevel","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.546434b1.chunk.js","sourcesContent":["import { Account, Chronicle, HistoricalIncentive, HistoricalParachainFundsPledged, Incentives, ParachainDetails } from \"./../../hooks/useQueries\"\n\nexport enum ActionType {\n\n    LoadInitialData = 'LOAD_INITIAL_DATA',\n    SetInitialData = 'SET_INITIAL_DATA_SUCCESS',\n\n    LoadChronicleData = 'LOAD_CHRONICLE_DATA',\n    SetChronicleData = 'SET_CHRONICLE_DATA',\n\n    LoadAccountData = 'LOAD_ACCOUNT_DATA',\n    SetAccountData = 'SET_ACCOUNT_DATA',\n\n    LoadIncentiveData = 'LOAD_INCENTIVE_DATA',\n    SetIncentiveData = 'SET_INCENTIVE_DATA',\n\n    LoadHistoricalSiblingFundsPledgedData = 'LOAD_HISTORICAL_SIBLING_FUNDS_PLEDGED_DATA',\n    SetHistoricalSiblingFundsPledgedData = 'SET_HISTORICAL_SIBLING_FUNDS_PLEDGED_DATA',\n\n    LoadLatestOwnFundsPledgedData = 'LOAD_LATEST_OWN_FUNDS_PLEDGED_DATA',\n    SetLatestOwnFundsPledgedData = 'SET_LATEST_OWN_FUNDS_PLEDGED_DATA',\n\n    LoadLatestSiblingFundsPledgedData = 'LOAD_LATEST_SIBLING_FUNDS_PLEDGED_DATA',\n    SetLatestSiblingFundsPledgedData = 'SET_LATEST_SIBLING_FUNDS_PLEDGED_DATA'\n}\n\nexport type LoadInitialData = {\n    type: ActionType.LoadInitialData\n}\n\nexport type SetInitialData = {\n    type: ActionType.SetInitialData\n    payload: {\n        chronicle: Chronicle,\n        ownHistoricalFundsPledged: HistoricalParachainFundsPledged[],\n        ownParachain: ParachainDetails,\n        incentives: Incentives\n    }\n}\n\nexport type LoadChronicleData = {\n    type: ActionType.LoadChronicleData,\n}\n\nexport type SetChronicleData = {\n    type: ActionType.SetChronicleData,\n    payload: Chronicle\n}\n\nexport type LoadAccountData = {\n    type: ActionType.LoadAccountData\n}\n\nexport type SetAccountData = {\n    type: ActionType.SetAccountData,\n    payload: Account & {\n        historicalIncentives: HistoricalIncentive[]\n    }\n}\n\nexport type LoadIncentiveData = {\n    type: ActionType.LoadIncentiveData\n}\n\nexport type SetIncentiveData = {\n    type: ActionType.SetIncentiveData,\n    payload: Incentives\n}\n\nexport type LoadHistoricalSiblingData = {\n    type: ActionType.LoadHistoricalSiblingFundsPledgedData\n}\n\nexport type SetHistoricalSiblingData = {\n    type: ActionType.SetHistoricalSiblingFundsPledgedData,\n    payload: HistoricalParachainFundsPledged[]\n}\n\nexport type LoadLatestSiblingFundsPledgedData = {\n    type: ActionType.LoadLatestSiblingFundsPledgedData\n}\n\nexport type SetLatestSiblingFundsPledgedData = {\n    type: ActionType.SetLatestSiblingFundsPledgedData,\n    payload: ParachainDetails\n}\n\nexport type LoadLatestOwnFundsPledgedData = {\n    type: ActionType.LoadLatestOwnFundsPledgedData\n}\n\nexport type SetLatestOwnFundsPledgedData = {\n    type: ActionType.SetLatestOwnFundsPledgedData,\n    payload: ParachainDetails\n}\n\nexport type Action = \n    | LoadInitialData\n    | SetInitialData\n    | LoadChronicleData\n    | SetChronicleData\n    | LoadAccountData\n    | SetAccountData\n    | LoadIncentiveData\n    | SetIncentiveData\n    | LoadHistoricalSiblingData\n    | SetHistoricalSiblingData\n    | LoadLatestSiblingFundsPledgedData\n    | SetLatestSiblingFundsPledgedData\n    | LoadLatestOwnFundsPledgedData\n    | SetLatestOwnFundsPledgedData","import constate from 'constate';\nimport { initial } from 'lodash';\nimport { useReducer } from 'react';\nimport { Account, Chronicle, HistoricalIncentive, HistoricalParachainFundsPledged, Incentives, ParachainDetails } from 'src/hooks/useQueries';\nimport { Action, ActionType } from './Actions';\n\n\nexport enum LoadingState { \n    Initial, \n    Loading,\n    Loaded \n};\n\ntype Loadable<T> = {\n    loading: LoadingState,\n    data: T\n}\n\ntype Initial = {\n    initializedAtBlockHeight: string | undefined\n}\n\ntype State = {\n    initial: Loadable<Initial>\n    chronicle: Loadable<Chronicle>,\n    incentives: Loadable<Incentives>,\n    // TODO: create a separate time instead of an intersection\n    account: Loadable<Account & {\n        historicalIncentives: HistoricalIncentive[]\n    }>\n    own: {\n        historicalFundsPledged: Loadable<HistoricalParachainFundsPledged[]>,\n        parachain: Loadable<ParachainDetails>\n    },\n    sibling: {\n        historicalFundsPledged: Loadable<HistoricalParachainFundsPledged[]>,\n        parachain: Loadable<ParachainDetails>\n    }\n};\n\nconst loadable = <T extends unknown>(data: T): Loadable<T> => ({\n    loading: LoadingState.Initial,\n    data\n});\n\nconst loading = <T extends unknown>(data: T): Loadable<T> => ({\n    loading: LoadingState.Loading,\n    data\n});\n\nconst loaded = <T extends unknown>(data: T): Loadable<T> => ({\n    loading: LoadingState.Loaded,\n    data\n});\n\nconst initialState: State = {\n    initial: loadable({\n        initializedAtBlockHeight: undefined\n    }),\n    chronicle: loadable({\n        lastProcessedBlock: \"0\",\n        mostRecentAuctionStart: undefined,\n        mostRecentAuctionClosingStart: undefined\n    }),\n    incentives: loadable({\n        leadPercentageRate: '0',\n        totalContributionWeight: '0',\n        siblingParachain: {\n            id: undefined\n        }\n    }),\n    account: loadable({\n        totalContributed: '0',\n        contributions: [],\n        historicalIncentives: []\n    }),\n    own: {\n        historicalFundsPledged: loadable([]),\n        parachain: loadable({\n            fundsPledged: '0',\n            hasWonAnAuction: false\n        })\n    },\n    sibling: {\n        historicalFundsPledged: loadable([]),\n        parachain: loadable({\n            fundsPledged: '0',\n            hasWonAnAuction: false\n        })\n    },\n};\n\nconst reducer = (state: State, action: Action) => {\n    switch (action.type) {\n        case ActionType.LoadInitialData:\n            return {\n                ...state,\n                initial: loading(state.initial.data)\n            }\n\n        case ActionType.SetInitialData: {\n            return {\n                ...state,\n                initial: loaded({\n                    initializedAtBlockHeight: action.payload.chronicle.lastProcessedBlock\n                }),\n                chronicle: loaded(action.payload.chronicle),\n                incentives: loaded(action.payload.incentives),\n                own: {\n                    historicalFundsPledged: loaded(action.payload.ownHistoricalFundsPledged),\n                    parachain: loaded(action.payload.ownParachain)\n                }\n            }\n        }\n\n        case ActionType.LoadAccountData:\n            return {\n                ...state,\n                account: loading(state.account.data)\n            }\n\n        case ActionType.SetAccountData:\n            return {\n                ...state,\n                account: loaded(action.payload)\n            }\n\n        case ActionType.LoadChronicleData:\n            return {\n                ...state,\n                chronicle: loading(state.chronicle.data)\n            }\n\n        case ActionType.SetChronicleData:\n            return {\n                ...state,\n                chronicle: loaded(action.payload)\n            }\n\n        case ActionType.LoadIncentiveData:\n            return {\n                ...state,\n                incentives: loading(state.incentives.data)\n            }\n\n        case ActionType.SetIncentiveData: \n            return {\n                ...state,\n                incentives: loaded(action.payload)\n            }\n\n        case ActionType.LoadHistoricalSiblingFundsPledgedData:\n            return {\n                ...state,\n                sibling: {\n                    ...state.sibling,\n                    historicalFundsPledged: loading(state.sibling.historicalFundsPledged.data)\n                }\n            }\n\n        case ActionType.SetHistoricalSiblingFundsPledgedData:\n            return {\n                ...state,\n                sibling: {\n                    ...state.sibling,\n                    historicalFundsPledged: loaded(\n                        action.payload\n                    )\n                }\n            }\n\n        case ActionType.LoadLatestSiblingFundsPledgedData:\n            return {\n                ...state,\n                sibling: {\n                    ...state.sibling,\n                    parachain: loading(state.sibling.parachain.data)\n                }\n            }\n\n        case ActionType.SetLatestSiblingFundsPledgedData:\n            return {\n                ...state,\n                sibling: {\n                    ...state.sibling,\n                    parachain: loaded(action.payload)\n                }\n            }\n\n        case ActionType.LoadLatestOwnFundsPledgedData:\n            return {\n                ...state,\n                own: {\n                    ...state.own,\n                    parachain: loading(state.own.parachain.data)\n                }\n            }\n\n        case ActionType.SetLatestOwnFundsPledgedData:\n            return {\n                ...state,\n                own: {\n                    ...state.own,\n                    parachain: loaded(action.payload)\n                }\n            }\n        \n        default:\n            return state\n    }\n};\nexport const useStore = () => {\n    const [state, dispatch] = useReducer(reducer, initialState);\n    return { state, dispatch };\n}\n\nexport const [StoreProvider, useStoreContext] = constate(useStore);\nexport const useDispatch = () => {\n    const { dispatch } = useStoreContext();\n    return dispatch;\n}\n\nexport const useState = () => {\n    const { state } = useStoreContext();\n    return state;\n}\n\nexport const useIsInitialDataLoading = () => {\n    const state = useState();\n    return state.initial.loading === LoadingState.Loading;\n}\n\nexport const useIsInitialDataLoaded = () => {\n    const state = useState();\n    return state.initial.loading === LoadingState.Loaded;\n}\n\nexport const useInitializedAtBlockHeight = () => {\n    const state = useState();\n    return state.initial.data.initializedAtBlockHeight;\n}\n\nexport const useChronicle = () => {\n    const state = useState();\n    return state.chronicle\n}\n\nexport const useChronicleLastProcessedBlock = () => {\n    const chronicle = useChronicle();\n    return chronicle.data.lastProcessedBlock;\n}\n\nexport const useIncentives = () => {\n    const state = useState();\n    return state.incentives;\n}\n\nexport const useIncentivesTotalContributionWeight = () => {\n    const incentives = useIncentives();\n    return incentives.data.totalContributionWeight;\n}\n\nexport const useIncentivesLeadPercentageRate = () => {\n    const incentives = useIncentives();\n    return incentives.data.leadPercentageRate;\n}\n\nexport const useAccount = () => {\n    const state = useState();\n    return state.account;\n}\n\nexport const useHistoricalIncentives = () => {\n    const state = useState();\n    return state.account.data.historicalIncentives;\n}\n\nexport const useOwnFundsPledged = () => {\n    const state = useState();\n    return state.own.parachain.data?.fundsPledged || '222000000000000';\n}\n\nexport const useOwnHasWonAnAuction = () => {\n    const state = useState();\n    return state.own.parachain.data?.hasWonAnAuction || false;\n}\n\nexport const useSiblingParachainId = () => {\n    const incentives = useIncentives();\n    return incentives.data.siblingParachain.id;\n}\n\nexport const useOwn = () => {\n    const state = useState();\n    return state.own;\n}\n\nexport const useSibling = () => {\n    const state = useState();\n    return state.sibling;\n}\n","import BigNumber from 'bignumber.js';\nimport ksmPrecision from './ksmPrecision';\nimport config from './config';\n\nexport const toKsmPrecision = (humanAmount: any) => {\n    const preciseAmount = new BigNumber(humanAmount)\n            .multipliedBy(\n                new BigNumber(10)\n                    .exponentiatedBy(12)\n            )\n            .toFixed(ksmPrecision)\n\n    return preciseAmount;\n}\n\nexport const fromKsmPrecision = (preciseAmount: any) => {\n    const humanAmount = new BigNumber(preciseAmount)\n            .dividedBy(\n                new BigNumber(10)\n                    .exponentiatedBy(12)\n            )\n            .toFixed(ksmPrecision)\n\n    return humanAmount;\n}\n\nexport const ksmToUsd = (amount: any) => {\n    return new BigNumber(amount)\n        .multipliedBy(config.ksmToUsd)\n        .toFixed(ksmPrecision)\n}\n\nexport const usdToHdx = (amount: any) => {\n    return new BigNumber(amount)\n        .dividedBy(config.hdxToUsd)\n        .toFixed(ksmPrecision)\n}","// outside of a config to avoid dependency cycling\nexport default 12;","import BigNumber from \"bignumber.js\";\nimport { toKsmPrecision } from './utils';\nimport ksmPrecision from \"./ksmPrecision\";\n\nexport const precisionMultiplierBN = new BigNumber('10').pow('6');\nexport const ksmPrecisionMultiplierBN = new BigNumber('10').pow('12');\n\n\nconst config = {\n\n    // processorUrl: 'http://localhost:4000/graphql',\n    processorUrl: 'https://api-crowdloan-basilisk.hydradx.io/graphql',\n    nodeUrl: 'wss://ksm-arch-01.hydration.cloud',\n\n    // Kilt\n    // ownParachainId: '2086',\n    ownParachainId: '2090',\n    // 31.8 - 3 days\n    ownCrowdloanBlockHeight: '8979298',\n    dappName: 'Basilisk Crowdloan',\n    chronicleRefetchTimeout: 6000, // ms\n    auctionEndingPeriodLength: 72000,\n    crowdloanCap: new BigNumber(toKsmPrecision((new BigNumber('222222')))),\n    opportunityCost: new BigNumber('0.1375'),\n    ksmToUsd: '400',\n    hdxToUsd: '0.08059',\n\n    ksmPrecision,\n    displayPrecision: 6,\n    chart: {\n        historicalDataSpan: 600,\n        blocksPerDay: 14400,\n        auctionClosingStart: 9035066\n    },\n\n    incentives: {\n        hdx: {\n            leadPercentageRateCliffRange: [\n                new BigNumber('15')\n                    .multipliedBy(precisionMultiplierBN)\n                    .toNumber(),\n                new BigNumber('20')\n                    .multipliedBy(precisionMultiplierBN)\n                    .toNumber(),\n            ],\n            scale: {\n                max: 30,\n                min: 5,\n                none: 0,\n            }\n        },\n        bsx: {\n            allocated: new BigNumber(toKsmPrecision(new BigNumber('15000000000'))),\n            scale: {\n                max: 1,\n                min: 0,\n                none: 0\n            }\n        }\n    }\n};\n\nexport default config;\n","import {\n    ApolloClient,\n    InMemoryCache,\n    ApolloProvider,\n} from '@apollo/client'\n\nimport config from '../config'\n\nconst client = new ApolloClient({\n    uri: config.processorUrl,\n    cache: new InMemoryCache(),\n    defaultOptions: {\n        watchQuery: {\n            fetchPolicy: 'network-only'\n        },\n        query: {\n            fetchPolicy: 'network-only'\n        }\n    }\n})\n\ntype props = {}\nconst ConfiguredApolloProvider = ({children}: React.PropsWithChildren<props>) => (\n    <ApolloProvider client={client}>\n        {children}\n    </ApolloProvider>\n);\nexport default ConfiguredApolloProvider;","import { ApiPromise, WsProvider } from '@polkadot/api';\nimport {\n    web3Accounts,\n    web3Enable,\n    web3FromAddress,\n  } from '@polkadot/extension-dapp';\nimport { useEffect, useState } from 'react';\nimport { useLocalStorage } from 'react-use';\nimport config from '../config';\nimport constate from 'constate';\nimport log from 'loglevel';\nimport { Signer } from '@polkadot/api/types';\nimport BigNumber from 'bignumber.js';\nimport {encodeAddress,decodeAddress } from '@polkadot/util-crypto';\nimport { useChronicle } from 'src/containers/store/Store';\n\nconst mockAccount = {\n    address: (() => {\n        let params = (new URL(document.location as unknown as string)).searchParams;\n        log.debug('account', params.get('account'));\n        return params.get(\"account\");\n    })() || \"\",\n}\n\nexport const usePolkadot = () => {\n    const [accounts, setAccounts] = useState<any[]>([]);\n    // current active account persisted at the local storage between reloads\n    // allow injecting of a mock account address\n    let [activeAccount, setActiveAccount] = useLocalStorage<string>(\"bsx-crowdloan-account\", mockAccount.address);\n    activeAccount = activeAccount ? encodeAddress(decodeAddress(activeAccount), 2) : \"\";\n\n    const [activeAccountBalance, setActiveAccountBalance] = useState(\"0\");\n    const [showAccountSelector, setShowAccountSelector] = useState(false);\n    const [loading, setLoading] = useState(false);\n    const [api, setApi] = useState<ApiPromise | undefined>(undefined)\n    const [lastContributionStatus, setLastContributionStatus] = useState<boolean | undefined>(undefined);\n\n    const chronicle = useChronicle()\n\n    /**\n     * Configure polkadot.js at the start\n     */\n    useEffect(() => {\n        setTimeout(async () => {\n            log.debug('usePolkadot', 'loading initial');\n            setLoading(true);\n            const allInjected = await web3Enable(config.dappName);\n            const allAccounts = (await web3Accounts())\n                .map(account => ({\n                    ...account,\n                    address: encodeAddress(decodeAddress(account.address), 2)\n                }))\n\n            const wsProvider = new WsProvider(config.nodeUrl);\n            const api = await ApiPromise.create({\n                provider: wsProvider\n            });\n\n            log.debug('usePolkadot', 'loaded', allInjected, api, allAccounts);\n            setAccounts(allAccounts);\n            setApi(api);\n            setLoading(false);\n        }, 300);\n    }, [])\n\n    const fetchBalance = async () => {\n        if (!api || !activeAccount) return;\n        const { data: balance } = await api.query.system.account(activeAccount);\n        log.debug('usePolkadot', 'balance', balance.free.toString());\n        setActiveAccountBalance(balance.free.toString())\n    }\n\n    useEffect(() => {\n        if (!activeAccount) return;\n        if (!api) return\n        fetchBalance();\n    }, [\n        activeAccount,\n        api,\n        chronicle.data.lastProcessedBlock\n    ]);\n\n    const contribute = async (amount: string) => {\n        if (!api) return;\n        if (!activeAccount) return;\n        \n        setLoading(true);\n\n        const { signer } = await web3FromAddress(activeAccount);\n\n        (async () => {\n            try {\n                api.tx.crowdloan.contribute(\n                    config.ownParachainId,\n                    new BigNumber(amount).toFixed(0),\n                    null\n                )\n                .signAndSend(\n                    activeAccount,\n                    { signer },\n                    ({ status, events }) => {\n                        if (status.isInBlock || status.isFinalized) {\n                            events\n                                .filter(({ event }) => api.events.system.ExtrinsicFailed.is(event))\n                                .length\n                                ? setLastContributionStatus(false)\n                                : setLastContributionStatus(true);\n                        }\n                    }\n                )\n                fetchBalance();\n            } catch (e) {\n                console.error(e);\n                setLastContributionStatus(false);\n            }\n\n            setLoading(false);\n        })();\n    }\n\n    return {\n        accounts,\n        setActiveAccount,\n        activeAccount,\n        activeAccountBalance,\n        lastContributionStatus,\n        showAccountSelector,\n        setShowAccountSelector,\n        contribute\n    }\n}\n\nexport const [PolkadotProvider, usePolkaDotContext] = constate(usePolkadot);","export default __webpack_public_path__ + \"static/media/Logo-dark-2-clean.cbd38319.png\";","export default __webpack_public_path__ + \"static/media/basilisk-wallpaper-2.cc01249c.png\";","import BigNumber from \"bignumber.js\";\nimport { LoadingState, useAccount, useChronicle, useChronicleLastProcessedBlock, useIncentives, useOwnHasWonAnAuction, useOwn } from \"src/containers/store/Store\"\nimport linearScale from 'simple-linear-scale';\nimport config, { precisionMultiplierBN } from \"src/config\";\nimport { Contribution, HistoricalIncentive } from \"./useQueries\";\nimport { fromKsmPrecision } from \"src/utils\";\nimport { find } from \"lodash\";\n\nexport const calculateHdxBonus = (\n    leadPercentageRate: string,\n) => {    \n    const leadPercentageRateBN = new BigNumber(leadPercentageRate);\n    const cliffStart = config.incentives.hdx.leadPercentageRateCliffRange[0];\n    const cliffEnd = config.incentives.hdx.leadPercentageRateCliffRange[1]\n    \n    // following if statements are necessary due to linearScale clamping being broken\n    // if the lead diff is smaller than the cliff start, return maximum bonus\n    if (leadPercentageRateBN.lt(cliffStart)) return config.incentives.hdx.scale.max; \n    // if the lead diff is larger than the cliff end, return minimum bonus\n    if (leadPercentageRateBN.gt(cliffEnd)) return config.incentives.hdx.scale.min;\n\n    const hdxBonusScale = linearScale(\n        [\n            cliffStart,\n            cliffEnd\n        ], \n        [\n            config.incentives.hdx.scale.max,\n            config.incentives.hdx.scale.min\n        ]\n    )\n    \n    return hdxBonusScale(leadPercentageRate);\n}\n\nexport const calculateBsxMultiplier = (\n    blockHeight: string, \n    mostRecentAuctionClosingStart: string | undefined,\n) => {\n    return config.incentives.bsx.scale.max;\n    // there is no recent auction, return the full bsx multiplier\n    // if (!mostRecentAuctionClosingStart) return config.incentives.bsx.scale.max;\n\n    // const mostRecentAuctionClosingEnd = new BigNumber(mostRecentAuctionClosingStart)\n    //     .plus(config.auctionEndingPeriodLength)\n    //     .toNumber();\n\n    // const blockHeightBN = new BigNumber(blockHeight);\n\n    // const bsxMultiplierScale = linearScale(\n    //     // TODO: when we are about to win an auction, replace the following ranges\n    //     // with real auction ranges instead and skip any other logic\n    //     [\n    //         parseInt(mostRecentAuctionClosingStart),\n    //         mostRecentAuctionClosingEnd\n    //     ],\n    //     [\n    //         config.incentives.bsx.scale.max,\n    //         config.incentives.bsx.scale.min\n    //     ]\n    // )\n\n    // // if the current blockHeight is out of bounds for the most recent auction, return the full bsx multiplier\n    // // this also means the contribution was not for the winning auction since it was\n    // // accepted after the auction ended\n    // if (blockHeightBN.lt(mostRecentAuctionClosingStart) || blockHeightBN.gt(mostRecentAuctionClosingEnd)) {\n    //     return config.incentives.bsx.scale.max;\n    // }\n\n    // return bsxMultiplierScale(blockHeight)\n}\n\nexport const calculateContributionsWeight = (\n    contributions: Contribution[], \n    mostRecentAuctionClosingStart: string | undefined,\n) => {\n    const accountContributionsWeight = contributions\n        .reduce((weight, contribution) => {\n            const bsxMultiplier = calculateBsxMultiplier(\n                contribution.blockHeight,\n                mostRecentAuctionClosingStart\n            );\n\n            weight = weight.plus(\n                new BigNumber(contribution.balance)\n                    .multipliedBy(bsxMultiplier)\n            );\n\n            return weight;\n        }, new BigNumber(0));\n\n    return accountContributionsWeight\n}\n\nexport const calculateMinimumBsxReceived = (\n    contributions: Contribution[] = [], \n    mostRecentAuctionClosingStart: string | undefined,\n): BigNumber => {\n    const accountContributionsWeight = calculateContributionsWeight(\n        contributions,\n        mostRecentAuctionClosingStart,\n    );\n    const minimumBsxReceived = config.incentives.bsx.allocated\n        .dividedBy(\n            config.crowdloanCap\n                .multipliedBy(\n                    config.incentives.bsx.scale.max\n                )\n        )\n        .multipliedBy(accountContributionsWeight);\n\n    return minimumBsxReceived;\n}\n\nexport const calculateCurrentBsxReceived = (\n    contributions: Contribution[] = [], \n    mostRecentAuctionClosingStart: string | undefined,\n    totalContributionWeight: string,\n) => {\n    const accountContributionsWeight = calculateContributionsWeight(\n        contributions, \n        mostRecentAuctionClosingStart,\n    );\n    const totalContributionWeightBN = new BigNumber(totalContributionWeight)    \n\n    if (totalContributionWeightBN.isZero()) return new BigNumber(0);\n\n    const currentBsxReceived = config.incentives.bsx.allocated\n        .dividedBy(totalContributionWeightBN)\n        .multipliedBy(accountContributionsWeight);\n\n    return currentBsxReceived;\n}\n\nconst getHdxBonus = (blockHeight: Number) => {\n    if (blockHeight > 9233727) {\n        return 5;\n    }else{\n        return 30\n    }\n}\n\nexport const calculateCurrentHdxReceived = (\n    contributions: Contribution[], \n    historicalIncentives: HistoricalIncentive[],\n) => {\n    const hdxReceivedInKsm = contributions.reduce((hdxReceivedInKsm, contribution) => {\n        const historicalIncentive = find(historicalIncentives, { \n            blockHeight: `${contribution.blockHeight}`\n        });\n        const leadPercentageRate = historicalIncentive?.leadPercentageRate || '0';\n\n        // this will account for the contribution with the max hdxBonus\n        // if the leadPercentage rate defaults to '0'\n        // TODO: handle missing historical incentive differently?\n        // NOTE: could use a medium hdxBonus in case the historical data is missing\n        // this would be the most gracious way to handle the missing data.\n        // It would confuse the users the least.\n        // const hdxBonus = calculateHdxBonus(leadPercentageRate);\n        const hdxBonus = getHdxBonus(parseInt(contribution.blockHeight));\n\n        const contributionHdxReceivedInKsm = new BigNumber(contribution.balance)\n            .multipliedBy(\n                new BigNumber(config.opportunityCost)\n            )\n            .multipliedBy(\n                new BigNumber(hdxBonus)\n            )\n            // divide by 100 since hdx bonus is '30' not '0.3'\n            .dividedBy(\n                new BigNumber(100)\n            )\n\n        hdxReceivedInKsm = hdxReceivedInKsm\n                .plus(contributionHdxReceivedInKsm);\n        \n        return hdxReceivedInKsm;\n    }, new BigNumber('0'));\n\n    return hdxReceivedInKsm;\n}\n\nexport const useCalculateCurrentAccountHdxReceived = () => {\n    const { data: { contributions, historicalIncentives } } = useAccount();\n    return calculateCurrentHdxReceived(\n        contributions, \n        historicalIncentives\n    );\n}\n\nexport const useCalculateCurrentAccountMinimumBsxReceived = () => {\n    const { data: { contributions } } = useAccount();\n    const { data: { mostRecentAuctionClosingStart } } = useChronicle();\n\n    return calculateMinimumBsxReceived(\n        contributions, \n        mostRecentAuctionClosingStart\n    );\n}\n\nexport const useCalculateCurrentAccountCurrentBsxReceived = () => {\n    const { data: { contributions } } = useAccount();\n    const { data: { mostRecentAuctionClosingStart } } = useChronicle();\n    const { parachain: { data: { fundsPledged: contributionWeightOfAllContributors } } } = useOwn();\n\n    return calculateCurrentBsxReceived(\n        contributions, \n        mostRecentAuctionClosingStart,\n        String(contributionWeightOfAllContributors)\n    );\n}\n\n\n/**\n * TODO: This function could be optimalized to recalculate only \n * when the incentives really change. \n */\nexport const useGlobalIncentives = () => {\n    const incentives = useIncentives();\n    const lastProcessedBlock = useChronicleLastProcessedBlock();\n    const { data: { mostRecentAuctionClosingStart } } = useChronicle();\n\n    if (incentives.loading !== LoadingState.Loaded) return {\n        bsxMultiplier: undefined,\n        hdxBonus: undefined\n    }\n\n    const hdxBonus = new BigNumber(\n        calculateHdxBonus(incentives.data.leadPercentageRate)\n    );\n\n    const bsxMultiplier = new BigNumber(\n        calculateBsxMultiplier(\n            lastProcessedBlock, \n            mostRecentAuctionClosingStart\n        )\n    );\n\n    return {\n        bsxMultiplier,\n        hdxBonus\n    }\n}\n","import { usePolkaDotContext } from '../hooks/usePolkadot';\nimport log from 'loglevel';\nimport { useEffect, useState } from 'react';\n// import { useChronicle, useContributions, useHistoricalIncentives, useOwn } from './oldStore/Store';\n// import { calculateBsxRewards, calculateCurrentHdxReward, useIncentives } from '../hooks/useIncentives';\n// import config from '../oldConfig';\nimport { fromKsmPrecision, ksmToUsd, toKsmPrecision, usdToHdx } from './../utils';\nimport CurrencyInput from 'react-currency-input-field';\nimport './CrowdloanContributeForm.scss'\nimport BigNumber from 'bignumber.js';\nimport { useChronicle, useHistoricalIncentives, useIncentives, useOwnFundsPledged, useOwnHasWonAnAuction } from './store/Store';\nimport { Contribution, HistoricalIncentive } from 'src/hooks/useQueries';\nimport config, { ksmPrecisionMultiplierBN, precisionMultiplierBN } from 'src/config';\nimport { calculateBsxMultiplier, calculateCurrentBsxReceived, calculateCurrentHdxReceived, calculateMinimumBsxReceived } from 'src/hooks/useCalculateIncentives';\nimport ksmPrecision from 'src/ksmPrecision';\n\ntype Props = {\n    totalContributionWeight: string,\n    connectAccount: any\n}\n\nexport const CrowdloanContributeForm = ({connectAccount}: Props) => {\n    const { activeAccountBalance, lastContributionStatus, contribute, activeAccount } = usePolkaDotContext();\n    const [amount, setAmount] = useState<number | undefined>(undefined)\n    const defaultRewards = {\n        minimalBsxReceived: \"0\",\n        currentBsxReceived: \"0\",\n        // TODO: convert KSM amount to HDX\n        currentHdxReceived: \"0\",\n    };\n    const [rewardsReceived, setRewardsReceived] = useState(defaultRewards);\n\n    const { data: { lastProcessedBlock, mostRecentAuctionClosingStart } } = useChronicle()\n    const { data: { totalContributionWeight, leadPercentageRate } } = useIncentives();\n    const ownFundsPledged = useOwnFundsPledged()\n    const ownHasWonAnAuction = useOwnHasWonAnAuction();\n\n    useEffect(() => {\n        const contributions: Contribution[] = [\n            {\n                blockHeight: lastProcessedBlock,\n                balance: new BigNumber(amount || 0).multipliedBy(ksmPrecisionMultiplierBN).toFixed(0),\n                crowdloan: {\n                    id: config.ownParachainId\n                }\n            }\n        ];\n\n        if (!amount) return setRewardsReceived(defaultRewards);\n\n        const minimumBsxReceived = calculateMinimumBsxReceived(\n            contributions, \n            mostRecentAuctionClosingStart\n        );\n\n        const currentContributionWeight = new BigNumber(contributions[0].balance)\n            .multipliedBy(\n                calculateBsxMultiplier(\n                    lastProcessedBlock,\n                    mostRecentAuctionClosingStart,\n                )\n            )\n            .multipliedBy(precisionMultiplierBN);\n\n        const totalCurrentContributionWeight = new BigNumber(totalContributionWeight)\n            .plus(currentContributionWeight)\n            .toFixed(0);\n\n        const currentBsxReceived = calculateCurrentBsxReceived(\n            contributions,\n            mostRecentAuctionClosingStart,\n            totalCurrentContributionWeight\n        );\n\n        const historicalIncentives: HistoricalIncentive[] = [{\n            blockHeight: lastProcessedBlock,\n            leadPercentageRate\n        }];\n\n        const currentHdxReceived = usdToHdx(ksmToUsd(calculateCurrentHdxReceived(\n            contributions, \n            historicalIncentives\n        )));\n\n        setRewardsReceived({\n            minimalBsxReceived: new BigNumber(fromKsmPrecision(minimumBsxReceived)).toFixed(config.displayPrecision),\n            currentBsxReceived: new BigNumber(fromKsmPrecision(currentBsxReceived)).toFixed(config.displayPrecision),\n            // TODO: convert KSM amount to HDX\n            currentHdxReceived: new BigNumber(fromKsmPrecision(currentHdxReceived)).toFixed(config.displayPrecision),\n        })\n    }, [\n        lastProcessedBlock,\n        leadPercentageRate,\n        mostRecentAuctionClosingStart,\n        totalContributionWeight,\n        amount\n    ])\n\n\n    const handleContributeClick = () => {\n        log.debug('CrowdloanContributeForm', 'handleContributeClick', amount);\n        // call contribute here\n        contribute(toKsmPrecision(amount));\n    }\n\n    useEffect(() => {\n        if (lastContributionStatus) setAmount(0)\n    }, [\n        lastContributionStatus\n    ]);\n\n    const handleContributeChange = (value: any) => {\n        log.debug('CrowdloanContributeForm', 'handleContributeChange', value, activeAccountBalance);\n        if (value == undefined) return setAmount(undefined);\n        if (config.crowdloanCap.minus(ownFundsPledged).lt(toKsmPrecision(value))) return;\n        setAmount(value)\n    }\n\n    const noop = () => {}\n\n    return <div className=\"bsx-contribute-form\">\n\n        <div className=\"bsx-form-wrapper\">\n            <label>ksm contribution</label>\n            <CurrencyInput\n                name=\"amount\"\n                decimalsLimit={12}\n                value={amount}\n                disabled={ownHasWonAnAuction}\n                allowNegativeValue={false}\n                placeholder={ownHasWonAnAuction ? \"Sacrifice not required\" : \"Sacrifice goes here\"}\n                intlConfig={{ locale: 'en-US' }}\n                onValueChange={handleContributeChange}\n            />\n\n            {/* rewards */}\n            <label>minimal bsx received</label>\n            <CurrencyInput\n                name=\"minimal bsx received\"\n                disabled={true}\n                value={rewardsReceived.minimalBsxReceived}\n                onValueChange={noop}\n            />\n\n            <label>current bsx received</label>\n            <CurrencyInput\n                name=\"current bsx received\"\n                disabled={true}\n                value={rewardsReceived.currentBsxReceived}\n                onValueChange={noop}\n            />\n\n            <label>current hdx received</label>\n            <CurrencyInput\n                name=\"current hdx received\"\n                disabled={true}\n                value={rewardsReceived.currentHdxReceived}\n                onValueChange={noop}\n            />\n\n            {ownHasWonAnAuction \n                ? (\n                    <button\n                        disabled={true}\n                    >\n                        Slot Ssss...ssecured\n                    </button>\n                )\n                : (\n                    activeAccount\n                        ? (\n                            <button\n                                disabled={(!amount || amount == 0)}\n                                onClick={handleContributeClick}\n                            >Contribute</button>\n                        )\n                        : (\n                            <button\n                                onClick={connectAccount}\n                            >\n                                Connect Account\n                            </button>\n                        )\n                )\n            }\n\n        </div>\n\n        <div className=\"contribution-status\">\n            {lastContributionStatus\n                ? \"Thanksss for your sacrifice\"\n                : (\n                    (lastContributionStatus == false)\n                        ? \"There was a problem with your contribution, please try again.\"\n                        : \"\"\n\n                )\n            }\n        </div>\n    </div>\n}\n","import { useRef } from 'react';\nimport { useClickAway } from 'react-use';\nimport { usePolkaDotContext } from '../hooks/usePolkadot';\nimport './AccountSelector.scss';\n\nexport type Props = {\n    onAccountSelect: any,\n};\n\nexport const AccountSelector = ({onAccountSelect}: Props) => {\n    const { accounts, setActiveAccount } = usePolkaDotContext();\n    \n    const handleAccountOnClick = (address: string) => {\n        setActiveAccount(address);\n        onAccountSelect()\n    }\n\n    const ref = useRef(null);\n    useClickAway(ref, () => {\n        onAccountSelect();\n    })\n\n    const noAccount = undefined;\n\n    return <div className=\"bsx-account-selector\">\n        <div className=\"bsx-account-selector-backdrop\">\n            <div className=\"bsx-account-selector-modal\" ref={ref}>\n                <div className=\"title\">Select an account</div>\n                {\n                    accounts && accounts.length \n                        ? accounts.map(account => (\n                                <div\n                                    className=\"account\"\n                                    key={account.address}\n                                    onClick={_ => handleAccountOnClick(account.address)}\n                                >\n                                    <p className=\"name\">{account.meta.name}</p>\n                                    <p className=\"address\">{account.address}</p>\n                                </div>\n                            ))\n                        : <div className=\"bsx-loading-accounts\">Loading accounts</div>\n                }\n                \n                {/* <div\n                    className=\"account no-account\"\n                    // please don't hurt me\n                    onClick={_ => handleAccountOnClick(noAccount as unknown as string)}\n                >\n                        <p className=\"name\"> Reset account selection </p>\n                </div> */}\n\n                <div>\n                </div>\n            </div>\n        </div>\n    </div>\n}","\nimport {useMemo, useState} from \"react\";\nimport { Line } from \"react-chartjs-2\";\nimport { fromKsmPrecision } from \"src/utils\";\nimport { useChronicle, useOwn, useSibling } from \"./store/Store\";\nimport { Chart } from 'chart.js';\nimport annotationPlugin from 'chartjs-plugin-annotation';\nimport millify from 'millify';\nimport { defaults } from 'react-chartjs-2';\nimport config from \"../config\";\nimport simpleLinearScale from \"simple-linear-scale\";\nimport {useKeyPress} from \"react-use\";\n\n\nChart.register(annotationPlugin);\n\nconst millifyOptions = {\n    // precision: config.displayPrecision,\n    precision: 6,\n    decimalSeparator: '.'\n}\n\ndefaults.animation = false;\n\nconst colors = {\n    yellow: '#ffe733',\n    red: '#ff5033',\n    orange: '#ff8133',\n    green: '#90ff33',\n    white: '#ebebeb',\n    black: '#171b22',\n    faintGray: 'rgba(181, 149, 114, .1)',\n    transparent: 'transparent',\n}\n\nexport const Graph = () => {\n    const sibling = useSibling();\n    const { siblingHistoricalFundsPledged, siblingFundsPledged } = (() => {\n        const { historicalFundsPledged, parachain: { data: { fundsPledged } } } = sibling;\n        return {\n            siblingHistoricalFundsPledged: historicalFundsPledged.data,\n            siblingFundsPledged: fundsPledged\n        }\n    })();\n\n    const own = useOwn();\n    const { ownHistoricalFundsPledged, ownFundsPledged } = (() => {\n        const { historicalFundsPledged, parachain: { data: { fundsPledged } } } = own;\n        return {\n            ownHistoricalFundsPledged: historicalFundsPledged.data,\n            ownFundsPledged: fundsPledged\n        }\n    })();\n\n    const { data: { lastProcessedBlock, mostRecentAuctionClosingStart, mostRecentAuctionStart } } = useChronicle();\n\n    const isLineChartDataLoading = false;\n\n    const [snek, setSnek] = useState<boolean | undefined>(undefined);\n    const up = (event: any) => event.keyCode === 38;\n    const [snakeTime] = useKeyPress(up)\n    if (snakeTime && !snek) {\n        setSnek(true);\n    }\n\n    const createDataset = (historicalData: any[]) => historicalData\n        ?.map(({blockHeight, fundsPledged}) => ({x: parseInt(blockHeight), y: fromKsmPrecision(fundsPledged)}));\n\n    const ownDataset = createDataset(ownHistoricalFundsPledged);\n    const siblingsDataset = createDataset(siblingHistoricalFundsPledged);\n\n    const labels = siblingsDataset.map(({x}: any) => parseInt(x));\n\n    const lineChartData = {\n        labels,\n        datasets: [\n                // {\n                //     labels,\n                //     label: 'Sibling', // todo replace with real sibling name from mapping or at least paraId\n                //     borderColor: colors.yellow,\n                //     yAxisID: 'crowdloanCap',\n                //     data: siblingsDataset,\n                // },\n                {\n                    label: 'Basilisk',\n                    borderColor: colors.green,\n                    yAxisID: 'crowdloanCap',\n                    data: ownDataset,\n                }\n        ]\n    }\n\n    const labelOptions = {\n        backgroundColor: colors.green,\n        position: 'end',\n        enabled: true,\n        color: colors.black,\n        font: {\n            family: 'Pexico',\n            size: 12\n        },\n        xAdjust: 10,\n        cornerRadius: 0,\n    }\n\n    // x axis seems to be scaled using the count of labels, instead of blockHeights\n    // TODO: figure out how to scale blockheight directly in the graph\n    const xAnnotationScale = simpleLinearScale(\n        [\n            labels[0],\n            labels[labels.length - 1],\n        ],\n        [\n            0,\n            labels.length\n        ]\n    );\n\n    const lineChartOptions = useMemo(() => {\n        return {\n            pointRadius: 0,\n            responsive: true,\n            maintainAspectRatio: false,\n            scales: {\n                x: {\n                  display: false,\n                },\n                crowdloanCap: {\n                    type: 'linear',\n                    position: 'left',\n                    display: false,\n                    max: 270000,\n                    min: 0\n                },\n            },\n            plugins: {\n                tooltip: {\n                    enabled: false,\n                },\n                legend: {\n                    display: false\n                },\n                autocolors: false,\n                annotation: {\n                    annotations: {\n                        // siblingRaised: siblingFundsPledged ? {\n                        //     type: 'line',\n                        //     borderWidth: 1,\n                        //     borderDash: [3, 3],\n                        //     scaleID: 'crowdloanCap',\n                        //     // TODO: .toFixed(0) first\n                        //     value: fromKsmPrecision(siblingFundsPledged),\n                        //     borderColor: colors.yellow,\n                        //     label: {\n                        //         ...labelOptions,\n                        //         xAdjust: -8,\n                        //         backgroundColor: colors.yellow,\n                        //         content: millify(parseFloat(fromKsmPrecision(siblingFundsPledged)), millifyOptions),\n                        //     }\n                        // } : null,\n\n                        ownRaised: ownFundsPledged ? {\n                            type: 'line',\n                            value: fromKsmPrecision(ownFundsPledged),\n                            borderColor: colors.green,\n                            borderWidth: 1,\n                            borderDash: [3, 3],\n                            scaleID: 'crowdloanCap',\n                            label: {\n                                ...labelOptions,\n                                xAdjust: -116,\n                                content: millify(parseFloat(fromKsmPrecision(ownFundsPledged)), millifyOptions),\n                            }\n                        } : null,\n\n                        // closingStart: mostRecentAuctionClosingStart ? {\n                        //     type: 'line',\n                        //     scaleID: 'x',\n                        //     value: xAnnotationScale(mostRecentAuctionClosingStart),\n                        //     borderColor: colors.red,\n                        //     borderWidth: 3,\n                        //     borderDash: [3, 3],\n                        //     label: {\n                        //         ...labelOptions,\n                        //         position: 'start',\n                        //         backgroundColor: colors.red,\n                        //         content: 'auction closing',\n                        //         xAdjust: 0,\n                        //         yAdjust: 20,\n\n                        //     }\n                        // } : null,\n\n                        // closingEnd: mostRecentAuctionClosingStart ? {\n                        //     type: 'line',\n                        //     scaleID: 'x',\n                        //     value: xAnnotationScale(parseInt(mostRecentAuctionClosingStart) + 72000),\n                        //     borderColor: colors.white,\n                        //     borderWidth: 3,\n                        //     borderDash: [3, 3],\n                        //     label: {\n                        //         ...labelOptions,\n                        //         position: 'start',\n                        //         backgroundColor: colors.white,                                \n                        //         content: 'auction end',\n                        //         xAdjust: 0,\n                        //         yAdjust: 20,\n                                \n                        //     }\n                        // } : null,\n\n                        // auctionStart: mostRecentAuctionStart ? {\n                        //     type: 'line',\n                        //     value: xAnnotationScale(mostRecentAuctionStart),\n                        //     borderColor: colors.orange,\n                        //     borderWidth: 3,\n                        //     borderDash: [3, 3],\n                        //     scaleID: 'x',\n                        //     label: {\n                        //         ...labelOptions,\n                        //         position: 'start',\n                        //         backgroundColor: colors.orange,\n                        //         content: 'auction starting',\n                        //         xAdjust: -10,\n                        //         yAdjust: 20,\n\n                        //     }\n                        // } : null\n                    },\n                },\n            }\n        }\n    }, [\n        ownFundsPledged,\n        siblingFundsPledged,\n        lastProcessedBlock,\n        mostRecentAuctionClosingStart,\n        labels\n    ])\n\n    const renderGraph = () => {\n        if (snek) {\n            return <iframe src=\"snek/game.html\" id=\"gameIframe\" className=\"gameIframe\" width=\"100%\" height=\"100%\"></iframe>;\n        } else {\n            return (\n                <>\n                    <div className=\"bsx-graph-loader\">\n                        Crowdloan cap has been reached, <br/> brace for impact.\n                    </div>\n                    \n                    <Line\n                        id=\"1\"\n                        type=\"line\"\n                        data={lineChartData}\n                        options={lineChartOptions}\n                    />\n                </>\n            );\n        }\n    };\n\n    return <>\n        <div className=\"col-9 bsx-graph\">\n            <div className=\"bsx-graph-wrapper\">\n                {renderGraph()}\n                \n\n            </div>\n            <div className=\"bsx-graph-timeline\">\n                <div className=\"row\">\n                    <div className=\"col-3\">\n                        28.8\n                    </div>\n                    <div className=\"col-6 bsx-legend\">\n                        <span className=\"basilisk\">Basilisk</span> \n                        {/* / <span className=\"sibling\">Target</span> */}\n                        <span> KSM raised</span>\n                    </div>\n                    <div className=\"col-3\">\n                        22.9\n                    </div>\n                </div>\n                <div className=\"bsx-progress-bar-container\">\n                    <div className=\"bsx-progress-bar\" style={{\n                        // width: `${progressBarScale(chronicle.data.curBlockNum)}%`\n                        width: '0%'\n                    }}></div>\n                </div>\n            </div>\n        </div>\n    </>\n}\n","import './Dashboard.scss'\nimport bsxEye from './../assets/Logo-dark-2-clean.png';\nimport bsxWallpaper from './../assets/basilisk-wallpaper-2.png';\nimport { CrowdloanContributeForm } from 'src/containers/CrowdloanContributeForm';\nimport { defaults } from 'react-chartjs-2';\nimport { useState } from 'react';\n\nimport { Chart } from 'chart.js';\nimport annotationPlugin from 'chartjs-plugin-annotation';\nimport { AccountSelector } from 'src/containers/AccountSelector';\nimport { usePolkaDotContext } from 'src/hooks/usePolkadot';\nimport { useInitialData } from 'src/hooks/useInitialData';\nimport { useAccount, useChronicleLastProcessedBlock, useIncentives, useOwnHasWonAnAuction, useSibling } from 'src/containers/store/Store';\nimport { fromKsmPrecision, ksmToUsd, usdToHdx } from 'src/utils';\nimport millify from 'millify';\nimport { useAccountData } from 'src/hooks/useAccountData';\nimport { useChronicleData } from 'src/hooks/useChronicleData';\nimport { useIncentivesData } from 'src/hooks/useIncentivesData';\nimport { useCalculateCurrentAccountCurrentBsxReceived, useCalculateCurrentAccountMinimumBsxReceived, useCalculateCurrentAccountHdxReceived, useGlobalIncentives } from 'src/hooks/useCalculateIncentives';\nimport BigNumber from 'bignumber.js';\nimport config from 'src/config';\nimport { useSiblingData } from 'src/hooks/useSiblingData';\n\nimport { Graph } from './../containers/Graph';\n\nChart.register(annotationPlugin);\n\nconst millifyOptions = {\n    // precision: config.displayPrecision,\n    precision: 6,\n    decimalSeparator: '.'\n}\n\nconst useDashboardData = () => {\n    const lastProcessedBlock = useChronicleLastProcessedBlock();\n\n\n    // incentives\n    const { bsxMultiplier, hdxBonus } = useGlobalIncentives();\n    const currentAccountCurrentBsxReceived = useCalculateCurrentAccountCurrentBsxReceived();\n    const currentAccountCurrentHdxReceived = useCalculateCurrentAccountHdxReceived()\n    const ownHasWonAnAuction = useOwnHasWonAnAuction();\n\n    // TODO: move polkadot-js data to the store\n    const {\n        showAccountSelector,\n        setShowAccountSelector,\n        activeAccount,\n        activeAccountBalance\n    } = usePolkaDotContext();\n\n    const { data: { totalContributed } } = useAccount()\n\n\n\n    return {\n        // chronicle\n        lastProcessedBlock,\n\n        // polkadot-js / account\n        showAccountSelector,\n        setShowAccountSelector,\n        activeAccount,\n        activeAccountBalance,\n\n        // account data\n        totalContributed,\n\n        // incentives\n        bsxMultiplier,\n        hdxBonus,\n        currentAccountCurrentBsxReceived,\n        currentAccountCurrentHdxReceived,\n        ownHasWonAnAuction\n    }\n}\n\nexport const Dashboard = () => {\n\n    const {\n        // chronicle\n        lastProcessedBlock,\n\n        // polkadot-js / account\n        showAccountSelector,\n        setShowAccountSelector,\n        activeAccount,\n        activeAccountBalance,\n\n        // account data\n        totalContributed,\n\n        // incentives\n        bsxMultiplier,\n        hdxBonus,\n        currentAccountCurrentBsxReceived,\n        currentAccountCurrentHdxReceived,\n        ownHasWonAnAuction\n    } = useDashboardData();\n\n    return <div className='bsx-dashboard'>\n\n        <div className=\"bsx-navbar\">\n            <div className=\"container-xl\">\n                <div className=\"row\">\n                    <div className=\"col-3\">\n                        <div className=\"bsx-logo\">\n                            basilisk\n                        </div>\n                    </div>\n                    <div className=\"col-9 bsx-menu-col\">\n\n                        <div className=\"bsx-menu\">\n                            <div className=\"bsx-menu-item\">\n                                <a href=\"https://bsx.fi/\" target=\"_blank\">\n                                    home\n                                </a>\n                            </div>\n                            <div className=\"bsx-menu-item\">\n                                <a href=\"https://discord.gg/S8YZj5aXR6\" target=\"_blank\">\n                                    discord\n                                </a>\n                            </div>\n                            <div className=\"bsx-eye\">\n                                <img src={bsxEye}/>\n                            </div>\n                            <div className=\"bsx-menu-item\">\n                                <a href=\"https://github.com/galacticcouncil/Basilisk-node\" target=\"_blank\">\n                                    github\n                                </a>\n                            </div>\n                            <div className=\"bsx-menu-item\">\n                                <a href=\"https://docs.bsx.fi/\" target=\"_blank\">\n                                    docs\n                                </a>\n                            </div>\n                            <div className=\"bsx-menu-item\">\n                                <a href=\"https://basiliskfi.substack.com/\" target=\"_blank\">\n                                    blog\n                                </a>\n                            </div>\n                        </div>\n\n                    </div>\n                </div>\n            </div>\n        </div>\n\n        {/* <div className=\"bsx-disclaimer\">\n            Basilisk is taking a temporary leave of absence, it shall return for the next batch of parachain slot auctions.\n            If you've made an offering to the snekk during the auctions for slot #1 - #5, your KSM will be returned automatically by the protocol at block 8467200 (2021-07-23 10:35).\n            <br/><br/> Until then, make sure to follow our <a href=\"https://basiliskfi.substack.com/\" target=\"_blank\">blog</a> for the latest updates regarding Basilisk.\n            Stay vigilant.\n        </div> */}\n\n        <div className=\"bsx-account\">\n            <div className=\"container-xl\">\n                <div className=\"row bsx-account-selector-display\">\n\n                    <div className=\"col-9 bsx-address\">\n                        <div>\n                            <span className=\"bsx-chronicle\">\n                                {/* {`#${lastProcessedBlock}`} */}\n                                {activeAccount ? '' : 'No account connected'}\n                            </span>\n                            {activeAccount}\n                        </div>\n                    </div>\n                    <div\n                        className=\"col-3 bsx-select-account\"\n                        onClick={_ => setShowAccountSelector(true)}\n                    >\n                        { activeAccount ? \"change your account\" : \"connect account\" }\n                    </div>\n                </div>\n                <div className=\"row bsx-stats\">\n                    <div className=\"col-12\">\n                        <div className=\"row\">\n                            <div className=\"col-4 bsx-stat\">\n                                <span className=\"bsx-stat-title\">\n                                    total ksm contributed\n                                </span>\n                                <span className=\"bsx-stat-value\">\n                                    {millify(parseFloat(fromKsmPrecision(totalContributed)), millifyOptions)}\n                                </span>\n                            </div>\n                            <div className=\"col-4 bsx-stat\">\n                                <span className=\"bsx-stat-title\">\n                                    bsx reward\n                                </span>\n                                <span className=\"bsx-stat-value\">\n                                    {currentAccountCurrentBsxReceived\n                                        ? millify(parseFloat(fromKsmPrecision(currentAccountCurrentBsxReceived)), millifyOptions)\n                                        : '-'\n                                    }\n                                </span>\n                            </div>\n                            <div className=\"col-4 bsx-stat bsx-stat-border-right-none\">\n                                <span className=\"bsx-stat-title\">\n                                    hdx reward\n                                </span>\n                                <span className=\"bsx-stat-value\">\n                                    {millify(parseFloat(usdToHdx(ksmToUsd(fromKsmPrecision(currentAccountCurrentHdxReceived)))), millifyOptions)}\n                                </span>\n                            </div>   \n                        </div>\n                    </div>\n                </div>\n            </div>\n        </div>\n\n        <div className=\"container-xl\">\n            <div className=\"row\">\n                <Graph/>\n                <div className=\"col-3 bsx-contribute\">\n                    <div className=\"bsx-incentives\">\n\n                    <>\n                        <div className=\"bsx-incentive\">\n                            <div className=\"row\">\n                                <div className=\"col-6 name\">\n                                    <span>\n                                        hdx bonus\n                                    </span>\n                                </div>\n                                <div className=\"col-6 value\">\n                                    <span>\n                                    {ownHasWonAnAuction \n                                        ? '-'\n                                        : hdxBonus ? hdxBonus.toFixed(2) : '-'}\n                                    </span>\n                                </div>\n                            </div>\n                        </div>\n\n                        <div className=\"bsx-incentive\">\n                            <div className=\"row\">\n                                <div className=\"col-8 name\">\n                                    <span>\n                                        bsx multiplier\n                                    </span>\n                                </div>\n                                <div className=\"col-4 value\">\n                                    <span>\n                                        {ownHasWonAnAuction\n                                            ? '-'\n                                            : bsxMultiplier ? bsxMultiplier.toFixed(2) : '-'\n                                        }\n                                    </span>\n                                </div>\n                            </div>\n                        </div>\n                    </>\n\n                        {/* {false\n                            ? (<>\n                                <div className=\"bsx-incentives-loader\">\n                                    Caluculating incentives...\n                                </div>\n                            </>)\n                            : (<>\n                                <div className=\"bsx-incentive\">\n                                    <div className=\"row\">\n                                        <div className=\"col-6 name\">\n                                            <span>\n                                                hdx bonus\n                                            </span>\n                                        </div>\n                                        <div className=\"col-6 value\">\n                                            <span>\n                                            {hdxBonus ? `~${hdxBonus.toFixed(2)}` : '-'}\n                                            </span>\n                                        </div>\n                                    </div>\n                                </div>\n\n                                <div className=\"bsx-incentive\">\n                                    <div className=\"row\">\n                                        <div className=\"col-8 name\">\n                                            <span>\n                                                bsx multiplier\n                                            </span>\n                                        </div>\n                                        <div className=\"col-4 value\">\n                                            <span>\n                                                {bsxMultiplier ? `~${bsxMultiplier.toFixed(2) }` : '-'}\n                                            </span>\n                                        </div>\n                                    </div>\n                                </div>\n                            </>)\n                        } */}\n\n                    </div>\n\n                    <div>\n                        <CrowdloanContributeForm\n                            connectAccount={() => setShowAccountSelector(true)}\n                            totalContributionWeight={\"0\"}\n                        />\n                    </div>\n                </div>\n            </div>\n        </div>\n\n        <div className=\"bsx-wallpaper\">\n            <img src={bsxWallpaper}/>\n        </div>\n\n        {showAccountSelector ? <AccountSelector\n            onAccountSelect={() => setShowAccountSelector(false)}\n        /> : <></>}\n    </div>\n}\n","import { gql, useLazyQuery } from \"@apollo/client\";\nimport config from './../config';\n\nconst chronicleId = 'chronicle';\nconst chronicleByUniqueInput = `\n    chronicleByUniqueInput(where: {id: \"${chronicleId}\"}) {\n        lastProcessedBlock\n        mostRecentAuctionClosingStart\n        mostRecentAuctionStart\n    }\n`\n\nconst historicalFundsPledgedByParachainIdSinceBlockHeight = (parachainId: string, blockHeight: string) => `\n    historicalParachainFundsPledgeds(where: {parachain: {id_eq: \"${parachainId}\"}, blockHeight_gte: \"${blockHeight}\"}, limit: 1000) {\n        fundsPledged\n        blockHeight\n    }\n`\n\n// duplicate but parametrized via the query instead\nconst _historicalFundsPledgedByParachainIdSinceBlockHeight = `\n    historicalParachainFundsPledgeds(where: {parachain: {id_eq: $parachainId}, blockHeight_gte: $blockHeight}, limit: 1000) {\n        fundsPledged\n        blockHeight\n    }\n`\n\nconst fundsPledgedByParachainId = `\n    parachainByUniqueInput(where: {id: $parachainId}) {\n        fundsPledged\n    }\n`\n\n// query MyQuery($parachainId: ID!, $blockHeight: BigInt!) {\n//     historicalParachainFundsPledgeds(where: {parachain: {id_eq: $parachainId}, blockHeight_gte: $blockHeight}) {\n//        fundsPledged\n//        blockHeight\n//    }\n// }\nconst historicalFundsPledgedByParachainIdSinceBlockHeightDataQuery = gql`\n    query HistoricalFundsPledged($parachainId: ID!, $blockHeight: BigInt!) {\n        ${_historicalFundsPledgedByParachainIdSinceBlockHeight}\n    }\n`\n\nconst fundsPledgedByParachainIdDataQuery = gql`\n    query FundsPledged($parachainId: ID!) {\n        ${fundsPledgedByParachainId}\n    }\n`\n\nconst parachainFundsPledgedByParachainId = (parachainId: string) => `\n    parachainByUniqueInput(where: {id: \"${parachainId}\"}) {\n        fundsPledged,\n        hasWonAnAuction\n    }\n`\n\nconst incentiveId = 'incentive';\nconst incentives = `\n    incentiveByUniqueInput(where: {id: \"${incentiveId}\"}) {\n        totalContributionWeight\n        leadPercentageRate,\n        siblingParachain {\n            id\n        }\n    }\n`\n\nconst initialDataQuery = gql`\n    query InitialData {\n        ${chronicleByUniqueInput}\n        ${historicalFundsPledgedByParachainIdSinceBlockHeight(\n            config.ownParachainId,\n            config.ownCrowdloanBlockHeight\n        )}\n        ${parachainFundsPledgedByParachainId(\n            config.ownParachainId\n        )}\n        ${incentives}\n    }\n`\n\nconst accountByAccountId = `\n    accountByUniqueInput(where: {id: $accountId}) {\n        totalContributed\n        contributions {\n            crowdloan {\n                id\n            }\n            blockHeight\n            balance\n        }\n    }\n`\n\nconst historicalIncentivesByBlockHeights = `\n    historicalIncentives(where: {blockHeight_in: $blockHeights}) {\n        blockHeight\n        leadPercentageRate\n    }\n`\n\nconst historicalIncentivesByBlockHeightsDataQuery = gql`\n    query HistoricalIncentives($blockHeights: [BigInt!]) {\n        ${historicalIncentivesByBlockHeights}\n    }\n`\n\nconst accountByAccountIdDataQuery = gql`\n    query ContributionsByAccountId($accountId: ID!) {\n        ${accountByAccountId}\n    }\n`\nconst chronicleDataQuery = gql`\n    query Chronicle {\n        ${chronicleByUniqueInput}\n    }\n`\n\nconst incentivesDataQuery = gql`\n    query Incentives {\n        ${incentives}\n    }\n`\n\nexport type Chronicle = {\n    lastProcessedBlock: string,\n    mostRecentAuctionStart: string | undefined,\n    mostRecentAuctionClosingStart: string | undefined\n}\n\nexport type HistoricalParachainFundsPledged = {\n    fundsPledged: string,\n    blockHeight: string\n}\n\nexport type ParachainDetails = {\n    fundsPledged: string,\n    hasWonAnAuction: boolean\n}\n\nexport type Incentives = {\n    leadPercentageRate: string,\n    totalContributionWeight: string,\n    siblingParachain: {\n        id: string | undefined\n    }\n}\n\nexport type HistoricalIncentive = {\n    blockHeight: string,\n    leadPercentageRate: string,\n}\n\ntype InitialDataQueryResponse = {\n    chronicleByUniqueInput: Chronicle,\n    historicalParachainFundsPledgeds: HistoricalParachainFundsPledged[],\n    parachainByUniqueInput: ParachainDetails,\n    incentiveByUniqueInput: Incentives | undefined\n};\nexport const useInitialDataQuery = () => useLazyQuery<InitialDataQueryResponse>(initialDataQuery);\n\nexport type Contribution = {\n    blockHeight: string,\n    balance: string,\n    crowdloan: {\n        id: string\n    }\n};\n\nexport type Account = {\n    totalContributed: string,\n    contributions: Contribution[],\n}\n\nexport type AccountByAccountIdQueryResponse = {\n    accountByUniqueInput: Account\n};\n\nexport const useAccountByAccountIdDataQuery = (accountId: string) => useLazyQuery<AccountByAccountIdQueryResponse>(accountByAccountIdDataQuery, {\n    variables: {\n        accountId\n    }\n});\n\ntype ChronicleQueryResponse = {\n    chronicleByUniqueInput: Chronicle\n}\n\nexport const useChronicleDataQuery = () => useLazyQuery<ChronicleQueryResponse>(chronicleDataQuery);\n\ntype IncentivesQueryResponse = {\n    incentiveByUniqueInput: Incentives | undefined\n}\n\nexport const useIncentivesDataQuery = () => useLazyQuery<IncentivesQueryResponse>(incentivesDataQuery);\n\ntype HistoricalIncentivesByBlockHeightsQueryResponse = {\n    historicalIncentives: HistoricalIncentive[]\n}\n\nexport const useHistoricalIncentivesByBlockHeightsDataQuery = (blockHeights: string[]) => useLazyQuery<HistoricalIncentivesByBlockHeightsQueryResponse>(historicalIncentivesByBlockHeightsDataQuery, {\n    variables: { blockHeights }\n})\n\ntype HistoricalFundsPledgedByParachainIdQueryResponse = {\n    historicalParachainFundsPledgeds: HistoricalParachainFundsPledged[]\n}\n\nexport const useHistoricalFundsPledgedByParachainIdDataQuery = (parachainId: string, blockHeight: string) => useLazyQuery<HistoricalFundsPledgedByParachainIdQueryResponse>(historicalFundsPledgedByParachainIdSinceBlockHeightDataQuery, {\n    variables: { parachainId, blockHeight }\n})\n\ntype FundsPledgedByParachainIdQueryResponse = {\n    parachainByUniqueInput: ParachainDetails\n}\n\nexport const useFundsPledgedByParachainIdDataQuery = (parachainId: string) => useLazyQuery<FundsPledgedByParachainIdQueryResponse>(fundsPledgedByParachainIdDataQuery, {\n    variables: { parachainId }\n})\n","import { useEffect } from \"react\";\nimport { ActionType } from \"src/containers/store/Actions\";\nimport { LoadingState, useAccount, useChronicleLastProcessedBlock, useDispatch } from \"src/containers/store/Store\"\nimport { usePolkaDotContext } from \"./usePolkadot\";\nimport { AccountByAccountIdQueryResponse, useAccountByAccountIdDataQuery, useHistoricalIncentivesByBlockHeightsDataQuery } from \"./useQueries\";\nimport { isEqual } from 'lodash';\nimport { LazyQueryResult, QueryResult } from \"@apollo/client\";\nimport config from \"src/config\";\n\nconst contributionsFromQuery = (accountByAccountIdData: LazyQueryResult<AccountByAccountIdQueryResponse, {}>) => {\n    return accountByAccountIdData.data?.accountByUniqueInput?.contributions\n        .filter(({ crowdloan: { id } }) => id === config.ownParachainId)\n        .map(({ balance, blockHeight, crowdloan }) => ({ balance, blockHeight, crowdloan })) || [];\n};\n\nexport const useAccountData = () => {\n    const dispatch = useDispatch();\n    const account = useAccount();\n    const { activeAccount, activeAccountBalance } = usePolkaDotContext();\n    const [getAccountByAccountIdData, accountByAccountIdData] = useAccountByAccountIdDataQuery(activeAccount);\n    const [getHistoricalIncentivesByBlockHeightsData, historicalIncentivesByBlockHeightsData] = useHistoricalIncentivesByBlockHeightsDataQuery(\n        accountByAccountIdData \n            ? contributionsFromQuery(accountByAccountIdData)\n                .map(contribution => contribution.blockHeight)\n            : []\n    );\n\n    const lastProcessedBlock = useChronicleLastProcessedBlock();\n    \n    // reload account data when the active account / active account balance changes\n    useEffect(() => {\n        // already loading\n        if (account.loading === LoadingState.Loading) return;\n        dispatch({\n            type: ActionType.LoadAccountData\n        });\n    }, [\n        activeAccount,\n        activeAccountBalance,\n        lastProcessedBlock\n    ]);\n\n    useEffect(() => {\n        // not loading, do nothing\n        if (account.loading != LoadingState.Loading) return;\n        getAccountByAccountIdData();\n    }, [\n        account.loading\n    ]);\n\n    useEffect(() => {\n        if (!accountByAccountIdData.data) return;\n        getHistoricalIncentivesByBlockHeightsData();\n    }, [\n        accountByAccountIdData.data,\n        accountByAccountIdData.loading\n    ]);\n\n    useEffect(() => {\n        if (accountByAccountIdData.loading || !accountByAccountIdData.called) return;\n        // if (historicalIncentivesByBlockHeightsData.loading || !historicalIncentivesByBlockHeightsData.called) return;\n        \n        const totalContributed = (() => {\n            return accountByAccountIdData.data?.accountByUniqueInput?.totalContributed\n                || '0'\n        })();\n\n        const contributions = contributionsFromQuery(accountByAccountIdData);\n\n        const historicalIncentives = (() => {\n            // TODO: figure out why .historicalIncentives being the wrong type was not caught by TS\n            return historicalIncentivesByBlockHeightsData.data?.historicalIncentives || []\n        })();\n\n        dispatch({\n            type: ActionType.SetAccountData,\n            payload: {\n                totalContributed,\n                contributions,\n                historicalIncentives\n            }\n        })\n    }, [\n        accountByAccountIdData,\n        historicalIncentivesByBlockHeightsData\n    ]);\n}","import log from \"loglevel\";\nimport { useEffect } from \"react\"\nimport config from \"src/config\";\nimport { ActionType } from \"src/containers/store/Actions\";\nimport { LoadingState, useChronicle, useDispatch } from \"src/containers/store/Store\"\nimport { Chronicle, useChronicleDataQuery } from \"./useQueries\";\n\nexport const useChronicleData = () => {\n    \n    const dispatch = useDispatch();\n    const chronicle = useChronicle();\n    const [getChronicleData, chronicleData] = useChronicleDataQuery();\n\n    // fetch chronicle every few seconds\n    useEffect(() => {\n        const intervalId = setInterval(() => {\n            log.debug('useChronicleData', 'fetching chronicle')\n            dispatch({\n                type: ActionType.LoadChronicleData\n            })\n        }, config.chronicleRefetchTimeout);\n\n        return () => clearInterval(intervalId);\n    }, []);\n\n    useEffect(() => {\n        if (chronicle.loading != LoadingState.Loading) return;\n        getChronicleData();\n    }, [\n        chronicle.loading\n    ]);\n\n    useEffect(() => {\n        if (chronicleData.loading || !chronicleData.called) return;\n        const _chronicle: Chronicle = (() => ({\n            // TODO: use defaults from the store\n            lastProcessedBlock: chronicleData.data?.chronicleByUniqueInput.lastProcessedBlock || '0',\n            mostRecentAuctionStart: chronicleData.data?.chronicleByUniqueInput.mostRecentAuctionStart,\n            mostRecentAuctionClosingStart: chronicleData.data?.chronicleByUniqueInput.mostRecentAuctionClosingStart\n        }))();\n\n        dispatch({\n            type: ActionType.SetChronicleData,\n            payload: _chronicle\n        })\n    }, [\n        chronicleData\n    ])\n}\n","import log from \"loglevel\";\nimport { useEffect } from \"react\"\nimport { ActionType } from \"src/containers/store/Actions\";\nimport { LoadingState, useChronicleLastProcessedBlock, useDispatch, useIncentives, useInitializedAtBlockHeight, useIsInitialDataLoaded } from \"src/containers/store/Store\";\nimport { useIncentivesDataQuery } from \"./useQueries\";\n\nexport const useIncentivesData = () => {\n    \n    const lastProcessedBlock = useChronicleLastProcessedBlock();\n    const isInitialDataLoaded = useIsInitialDataLoaded();\n    const initializedAtBlockHeight = useInitializedAtBlockHeight();\n    const dispatch = useDispatch();\n    const incentives = useIncentives();\n\n    const [getIncentivesData, incentivesData] = useIncentivesDataQuery();\n\n    useEffect(() => {\n        // do not reload incentives unless the initial data has been already fetched\n        // or if the lastProcessedBlock is 0\n        if (!isInitialDataLoaded || !lastProcessedBlock) return;\n        if (lastProcessedBlock === initializedAtBlockHeight) return;\n        dispatch({\n            type: ActionType.LoadIncentiveData\n        });\n    }, [\n        isInitialDataLoaded,\n        lastProcessedBlock,\n        initializedAtBlockHeight\n    ]);\n\n    useEffect(() => {\n        if (incentives.loading !== LoadingState.Loading) return;\n        getIncentivesData();\n    }, [\n        incentives.loading\n    ]);\n\n    useEffect(() => {\n        if (incentivesData.loading || !incentivesData.called) return;\n        if (!incentivesData.data) return;\n        // TODO: query response parsers are duplicate with initial data, needs to be unified\n        const incentives = (() => {\n            const { leadPercentageRate, totalContributionWeight, siblingParachain } = incentivesData.data?.incentiveByUniqueInput || {\n                leadPercentageRate: '0',\n                totalContributionWeight: '0',\n            };\n\n            return { \n                leadPercentageRate, \n                totalContributionWeight,\n                siblingParachain: { id: siblingParachain?.id }\n            };\n        })();\n        \n        dispatch({\n            type: ActionType.SetIncentiveData,\n            payload: incentives\n        })\n    }, [\n        incentivesData\n    ]);\n}","import BigNumber from \"bignumber.js\";\nimport { initial } from \"lodash\";\nimport log from \"loglevel\";\nimport { useEffect } from \"react\";\nimport { precisionMultiplierBN } from \"src/config\";\nimport { ActionType } from \"src/containers/store/Actions\";\nimport { useDispatch, useIsInitialDataLoaded, useIsInitialDataLoading } from \"src/containers/store/Store\"\nimport { useInitialDataQuery } from \"./useQueries\";\n\nexport const useInitialData = () => {\n    const dispatch = useDispatch();\n    const isInitialDataLoading = useIsInitialDataLoading();\n    const isInitialDataLoaded = useIsInitialDataLoaded();\n    const [getInitialData, initialData] = useInitialDataQuery()\n\n    // load initial data only once\n    useEffect(() => {\n        log.debug('useInitialData', 'loading')\n        dispatch({\n            type: ActionType.LoadInitialData\n        })\n    }, []);\n\n    // if the store says we should be loading, start loading\n    useEffect(() => {\n        if (!isInitialDataLoading || isInitialDataLoaded) return;\n        getInitialData();\n    }, [\n        isInitialDataLoading\n    ]);\n\n    useEffect(() => {\n        if (initialData.loading || !initialData.called) return;\n        if (!initialData.data) return;\n        if (!isInitialDataLoading) return;\n\n        const chronicle = (() => {\n            const { \n                lastProcessedBlock,\n                mostRecentAuctionStart,\n                mostRecentAuctionClosingStart,\n            } = initialData.data?.chronicleByUniqueInput || {\n                lastProcessedBlock: '0',\n            };\n\n            return { \n                lastProcessedBlock,\n                mostRecentAuctionStart,\n                mostRecentAuctionClosingStart,\n            };\n        })();\n\n        const ownHistoricalFundsPledged = (() => initialData.data.historicalParachainFundsPledgeds\n            .map(({ fundsPledged, blockHeight }: { [key: string]: string }) => ({ fundsPledged, blockHeight }))\n        )();\n\n        const ownParachain= (() => initialData.data.parachainByUniqueInput)();\n\n        const incentives = (() => {\n            const { leadPercentageRate, totalContributionWeight, siblingParachain } = initialData.data?.incentiveByUniqueInput || {\n                leadPercentageRate: '0',\n                totalContributionWeight: '0'\n            };\n\n            return { \n                leadPercentageRate, \n                totalContributionWeight,\n                siblingParachain: {\n                    id: siblingParachain?.id\n                }\n            };\n        })();\n\n        log.debug('useInitialData', 'done loading', { \n            chronicle, \n            ownHistoricalFundsPledged, \n            ownParachain,\n            incentives\n        });\n\n        dispatch({\n            type: ActionType.SetInitialData,\n            payload: { \n                chronicle, \n                ownHistoricalFundsPledged, \n                ownParachain,\n                incentives\n            }\n        });\n    }, [\n        initialData.data,\n        isInitialDataLoading\n    ])\n}","import { useEffect, useState } from \"react\";\nimport { usePrevious, usePreviousDistinct } from \"react-use\";\nimport config from \"src/config\";\nimport { ActionType } from \"src/containers/store/Actions\";\nimport { LoadingState, useChronicleLastProcessedBlock, useDispatch, useIncentives, useInitializedAtBlockHeight, useIsInitialDataLoaded, useSibling, useSiblingParachainId } from \"src/containers/store/Store\"\nimport { useFundsPledgedByParachainIdDataQuery, useHistoricalFundsPledgedByParachainIdDataQuery } from \"./useQueries\";\n\nexport const useSiblingData = () => {\n    const siblingParachainId = useSiblingParachainId();\n    const lastProcessedBlock = useChronicleLastProcessedBlock();\n    const isInitialDataLoaded = useIsInitialDataLoaded();\n    const initializedAtBlockHeight = useInitializedAtBlockHeight();\n    const dispatch = useDispatch();\n    const sibling = useSibling();\n    const [previousSiblingParachainId, setPreviousSiblingParachainId] = useState(siblingParachainId);\n\n    const [getSiblingHistoricalFundsPledged, siblingHistoricalFundsPledged] = useHistoricalFundsPledgedByParachainIdDataQuery(\n        siblingParachainId || '',\n        config.ownCrowdloanBlockHeight\n    )\n\n    const [getLatestFundsPledged, latestFundsPledged] = useFundsPledgedByParachainIdDataQuery(\n        siblingParachainId || ''\n    )\n\n    // historical data\n    useEffect(() => {\n        if (!siblingParachainId) return;\n        if (siblingParachainId === previousSiblingParachainId) return;\n        if (sibling.historicalFundsPledged.loading === LoadingState.Loading) return;\n        setPreviousSiblingParachainId(siblingParachainId);\n        dispatch({\n            type: ActionType.LoadHistoricalSiblingFundsPledgedData\n        });\n    }, [\n        siblingParachainId,\n        previousSiblingParachainId,\n        setPreviousSiblingParachainId\n    ]);\n\n    useEffect(() => {\n        if (!sibling.historicalFundsPledged.loading) return;\n        if (siblingHistoricalFundsPledged.loading) return;\n        if (sibling.historicalFundsPledged.loading !== LoadingState.Loading) return;\n        getSiblingHistoricalFundsPledged();\n    }, [\n        sibling.historicalFundsPledged.loading,\n        siblingHistoricalFundsPledged\n    ])\n\n    useEffect(() => {\n        // cant erase historical data\n        if (!siblingHistoricalFundsPledged.data) return;\n        if (sibling.historicalFundsPledged.loading !== LoadingState.Loading) return;\n        if (siblingHistoricalFundsPledged.loading || !siblingHistoricalFundsPledged.called) return;\n\n        const historicalFundsPledged = (() => {\n            return siblingHistoricalFundsPledged.data.historicalParachainFundsPledgeds\n        })();\n\n        dispatch({\n            type: ActionType.SetHistoricalSiblingFundsPledgedData,\n            payload: historicalFundsPledged\n        })\n    }, [\n        siblingHistoricalFundsPledged\n    ])\n\n\n    // latest data\n    useEffect(() => {\n        if (!siblingParachainId) return;\n        if (!lastProcessedBlock) return;\n        if (sibling.parachain.loading === LoadingState.Loading) return;\n\n        dispatch({\n            type: ActionType.LoadLatestSiblingFundsPledgedData\n        });\n    }, [\n        siblingParachainId,\n        lastProcessedBlock\n    ]);\n\n    useEffect(() => {\n        if (sibling.parachain.loading !== LoadingState.Loading) return;\n        getLatestFundsPledged()\n    }, [\n        sibling.parachain.loading\n    ]);\n\n    useEffect(() => {\n        if (latestFundsPledged.loading || !latestFundsPledged.called) return;\n        // if (sibling.parachain.loading !== LoadingState.Loading) return;\n        if (!latestFundsPledged.data) return;\n\n        const fundsPledged = (() => {\n            return latestFundsPledged.data.parachainByUniqueInput?.fundsPledged\n        })()\n\n        const hasWonAnAuction = (() => {\n            return latestFundsPledged.data.parachainByUniqueInput?.hasWonAnAuction\n        })()\n\n        dispatch({\n            type: ActionType.SetLatestSiblingFundsPledgedData,\n            payload: {\n                fundsPledged,\n                hasWonAnAuction\n            }\n        });\n    }, [\n        latestFundsPledged,\n    ])\n}\n","import constate from \"constate\";\nimport { useAccountData } from \"./useAccountData\";\nimport { useChronicleData } from \"./useChronicleData\";\nimport { useIncentivesData } from \"./useIncentivesData\";\nimport { useInitialData } from \"./useInitialData\";\nimport { useSiblingData } from \"./useSiblingData\";\nimport { useOwnData } from \"./useOwnData\";\n\nconst useDashboardData = () => {\n    // loads a bunch of data only once\n    useInitialData();\n\n    useAccountData();\n    useChronicleData();\n    useIncentivesData();\n    useSiblingData();\n    useOwnData();\n}\n\nexport const [DashboardDataProvider, useDashboardDataContext] = constate(useDashboardData);\n","import { useEffect } from \"react\";\nimport { ActionType } from \"src/containers/store/Actions\";\nimport {\n  LoadingState,\n  useChronicleLastProcessedBlock,\n  useDispatch,\n  useOwn,\n} from \"src/containers/store/Store\"\nimport { useFundsPledgedByParachainIdDataQuery } from \"./useQueries\";\nimport config from \"src/config\";\n\nexport const useOwnData = () => {\n  const parachainId = config.ownParachainId;\n  const lastProcessedBlock = useChronicleLastProcessedBlock();\n  const dispatch = useDispatch();\n  const own = useOwn();\n\n  const [getLatestFundsPledged, latestFundsPledged] = useFundsPledgedByParachainIdDataQuery(\n      parachainId || ''\n  )\n\n  // latest data\n  useEffect(() => {\n    if (!parachainId) return;\n    if (!lastProcessedBlock) return;\n    if (own.parachain.loading === LoadingState.Loading) return;\n\n    dispatch({\n      type: ActionType.LoadLatestOwnFundsPledgedData\n    });\n  }, [\n    parachainId,\n    lastProcessedBlock\n  ]);\n\n  useEffect(() => {\n    if (own.parachain.loading !== LoadingState.Loading) return;\n    getLatestFundsPledged()\n  }, [\n    own.parachain.loading\n  ]);\n\n  useEffect(() => {\n    if (latestFundsPledged.loading || !latestFundsPledged.called) return;\n    if (!latestFundsPledged.data) return;\n\n    const fundsPledged = (() => {\n      return latestFundsPledged.data.parachainByUniqueInput?.fundsPledged\n    })()\n\n    const hasWonAnAuction = (() => {\n      return latestFundsPledged.data.parachainByUniqueInput?.hasWonAnAuction\n    })()\n\n    dispatch({\n      type: ActionType.SetLatestOwnFundsPledgedData,\n      payload: {\n        fundsPledged,\n        hasWonAnAuction\n      }\n    });\n  }, [\n    latestFundsPledged,\n  ])\n}\n","import React from 'react';\nimport './App.css';\nimport ConfiguredApolloProvider from './containers/ApolloProvider'\nimport { StoreProvider } from './containers/store/Store';\nimport { PolkadotProvider } from './hooks/usePolkadot';\nimport { Dashboard } from './pages/Dashboard';\nimport { DashboardDataProvider } from './hooks/useDashboardData';\n\nfunction App() {\n  return (\n    <ConfiguredApolloProvider>\n      <StoreProvider>\n        <PolkadotProvider>\n          <DashboardDataProvider>\n              <Dashboard/>\n          </DashboardDataProvider>\n        </PolkadotProvider>\n      </StoreProvider>\n    </ConfiguredApolloProvider>\n  );\n}\n\nexport default App;","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport log, { LogLevelDesc } from 'loglevel'\nimport linearScale from 'simple-linear-scale';\n\n// <reference types=\"simple-linear-scale.d.ts\">\n\nlet logLevel = (() => {\n  let params = (new URL(document.location as unknown as string)).searchParams;\n  console.log('loglevel', params.get('loglevel') as LogLevelDesc);\n  return params.get('loglevel') as LogLevelDesc;\n})() || 'info'\n\nlog.setLevel(logLevel)\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}