{"version":3,"sources":["containers/store/Actions.tsx","containers/store/Store.tsx","utils.tsx","ksmPrecision.tsx","config.tsx","containers/ApolloProvider.tsx","hooks/usePolkadot.tsx","assets/Logo-dark-2-clean.png","assets/basilisk-wallpaper-2.png","hooks/useCalculateIncentives.tsx","containers/CrowdloanContributeForm.tsx","containers/AccountSelector.tsx","containers/Graph.tsx","pages/Dashboard.tsx","hooks/useQueries.tsx","hooks/useAccountData.tsx","hooks/useChronicleData.tsx","hooks/useIncentivesData.tsx","hooks/useInitialData.tsx","hooks/useDashboardData.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["ActionType","LoadingState","toKsmPrecision","humanAmount","BigNumber","multipliedBy","exponentiatedBy","toFixed","fromKsmPrecision","preciseAmount","dividedBy","ksmToUsd","amount","config","usdToHdx","hdxToUsd","precisionMultiplierBN","pow","ksmPrecisionMultiplierBN","processorUrl","nodeUrl","ownParachainId","ownCrowdloanBlockHeight","dappName","chronicleRefetchTimeout","auctionEndingPeriodLength","crowdloanCap","opportunityCost","ksmPrecision","displayPrecision","chart","historicalDataSpan","blocksPerDay","auctionClosingStart","incentives","hdx","leadPercentageRateCliffRange","toNumber","scale","max","min","bsx","allocated","client","ApolloClient","uri","cache","InMemoryCache","defaultOptions","watchQuery","fetchPolicy","query","ConfiguredApolloProvider","children","ApolloProvider","loadable","data","loading","Initial","Loading","loaded","Loaded","initialState","initial","initializedAtBlockHeight","undefined","chronicle","lastProcessedBlock","mostRecentAuctionStart","mostRecentAuctionClosingStart","leadPercentageRate","totalContributionWeight","siblingParachain","id","account","totalContributed","contributions","historicalIncentives","own","historicalFundsPledged","parachain","fundsPledged","sibling","reducer","state","action","type","LoadInitialData","SetInitialData","payload","ownHistoricalFundsPledged","ownParachainFundsPledged","LoadAccountData","SetAccountData","LoadChronicleData","SetChronicleData","LoadIncentiveData","SetIncentiveData","LoadHistoricalSiblingFundsPledgedData","SetHistoricalSiblingFundsPledgedData","LoadLatestSiblingFundsPledgedData","SetLatestSiblingFundsPledgedData","LoadLatestOwnFundsPledgedData","SetLatestOwnFundsPledgedData","constate","useReducer","dispatch","StoreProvider","useStoreContext","useDispatch","useState","useIsInitialDataLoaded","useChronicle","useChronicleLastProcessedBlock","useIncentives","useAccount","mockAccount","address","params","URL","document","location","searchParams","log","debug","get","accounts","setAccounts","useLocalStorage","activeAccount","setActiveAccount","encodeAddress","decodeAddress","activeAccountBalance","setActiveAccountBalance","showAccountSelector","setShowAccountSelector","setLoading","api","setApi","lastContributionStatus","setLastContributionStatus","useEffect","setTimeout","a","web3Enable","allInjected","web3Accounts","allAccounts","map","wsProvider","WsProvider","ApiPromise","create","provider","fetchBalance","system","balance","free","toString","contribute","web3FromAddress","signer","console","tx","crowdloan","signAndSend","status","events","toHuman","isInBlock","isFinalized","filter","event","ExtrinsicFailed","is","length","e","error","PolkadotProvider","usePolkaDotContext","calculateHdxBonus","leadPercentageRateBN","cliffStart","cliffEnd","lt","gt","linearScale","hdxBonusScale","calculateBsxMultiplier","blockHeight","mostRecentAuctionClosingEnd","plus","blockHeightBN","parseInt","bsxMultiplierScale","calculateContributionsWeight","reduce","weight","contribution","bsxMultiplier","calculateMinimumBsxReceived","accountContributionsWeight","minimumBsxReceived","calculateCurrentBsxReceived","totalContributionWeightBN","isZero","currentBsxReceived","calculateCurrentHdxReceived","hdxReceivedInKsm","historicalIncentive","find","hdxBonus","contributionHdxReceivedInKsm","CrowdloanContributeForm","connectAccount","setAmount","defaultRewards","minimalBsxReceived","currentHdxReceived","rewardsReceived","setRewardsReceived","ownFundsPledged","useOwnFundsPledged","currentContributionWeight","totalCurrentContributionWeight","noop","className","name","decimalsLimit","value","disabled","allowNegativeValue","placeholder","intlConfig","locale","onValueChange","minus","onClick","AccountSelector","onAccountSelect","ref","useRef","useClickAway","_","meta","Chart","register","annotationPlugin","defaults","animation","Graph","style","width","parachainId","millifyOptions","precision","decimalSeparator","useDashboardData","useGlobalIncentives","currentAccountMinimumBsxReceived","useCalculateCurrentAccountMinimumBsxReceived","currentAccountCurrentBsxReceived","useCalculateCurrentAccountCurrentBsxReceived","currentAccountCurrentHdxReceived","useCalculateCurrentAccountHdxReceived","Dashboard","href","target","src","bsxEye","millify","parseFloat","bsxWallpaper","chronicleByUniqueInput","gql","initialDataQuery","parachainFundsPledgedByParachainId","historicalIncentivesByBlockHeightsDataQuery","accountByAccountIdDataQuery","chronicleDataQuery","incentivesDataQuery","contributionsFromQuery","accountByAccountIdData","accountByUniqueInput","useAccountData","accountId","blockHeights","useLazyQuery","variables","getAccountByAccountIdData","getHistoricalIncentivesByBlockHeightsData","historicalIncentivesByBlockHeightsData","called","useChronicleData","getChronicleData","chronicleData","intervalId","setInterval","clearInterval","_chronicle","useIncentivesData","isInitialDataLoaded","getIncentivesData","incentivesData","incentiveByUniqueInput","useInitialData","isInitialDataLoading","getInitialData","initialData","historicalParachainFundsPledgeds","parachainByUniqueInput","DashboardDataProvider","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","logLevel","setLevel","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.3f656ee2.chunk.js","sourcesContent":["import { Account, Chronicle, HistoricalIncentive, HistoricalParachainFundsPledged, Incentives, ParachainFundsPledged } from \"./../../hooks/useQueries\"\n\nexport enum ActionType {\n\n    LoadInitialData = 'LOAD_INITIAL_DATA',\n    SetInitialData = 'SET_INITIAL_DATA_SUCCESS',\n\n    LoadChronicleData = 'LOAD_CHRONICLE_DATA',\n    SetChronicleData = 'SET_CHRONICLE_DATA',\n\n    LoadAccountData = 'LOAD_ACCOUNT_DATA',\n    SetAccountData = 'SET_ACCOUNT_DATA',\n\n    LoadIncentiveData = 'LOAD_INCENTIVE_DATA',\n    SetIncentiveData = 'SET_INCENTIVE_DATA',\n\n    LoadHistoricalSiblingFundsPledgedData = 'LOAD_HISTORICAL_SIBLING_FUNDS_PLEDGED_DATA',\n    SetHistoricalSiblingFundsPledgedData = 'SET_HISTORICAL_SIBLING_FUNDS_PLEDGED_DATA',\n\n    LoadLatestOwnFundsPledgedData = 'LOAD_LATEST_OWN_FUNDS_PLEDGED_DATA',\n    SetLatestOwnFundsPledgedData = 'SET_LATEST_OWN_FUNDS_PLEDGED_DATA',\n\n    LoadLatestSiblingFundsPledgedData = 'LOAD_LATEST_SIBLING_FUNDS_PLEDGED_DATA',\n    SetLatestSiblingFundsPledgedData = 'SET_LATEST_SIBLING_FUNDS_PLEDGED_DATA'\n}\n\nexport type LoadInitialData = {\n    type: ActionType.LoadInitialData\n}\n\nexport type SetInitialData = {\n    type: ActionType.SetInitialData\n    payload: {\n        chronicle: Chronicle,\n        ownHistoricalFundsPledged: HistoricalParachainFundsPledged[],\n        ownParachainFundsPledged: ParachainFundsPledged,\n        incentives: Incentives\n    }\n}\n\nexport type LoadChronicleData = {\n    type: ActionType.LoadChronicleData,\n}\n\nexport type SetChronicleData = {\n    type: ActionType.SetChronicleData,\n    payload: Chronicle\n}\n\nexport type LoadAccountData = {\n    type: ActionType.LoadAccountData\n}\n\nexport type SetAccountData = {\n    type: ActionType.SetAccountData,\n    payload: Account & {\n        historicalIncentives: HistoricalIncentive[]\n    }\n}\n\nexport type LoadIncentiveData = {\n    type: ActionType.LoadIncentiveData\n}\n\nexport type SetIncentiveData = {\n    type: ActionType.SetIncentiveData,\n    payload: Incentives\n}\n\nexport type LoadHistoricalSiblingData = {\n    type: ActionType.LoadHistoricalSiblingFundsPledgedData\n}\n\nexport type SetHistoricalSiblingData = {\n    type: ActionType.SetHistoricalSiblingFundsPledgedData,\n    payload: HistoricalParachainFundsPledged[]\n}\n\nexport type LoadLatestSiblingFundsPledgedData = {\n    type: ActionType.LoadLatestSiblingFundsPledgedData\n}\n\nexport type SetLatestSiblingFundsPledgedData = {\n    type: ActionType.SetLatestSiblingFundsPledgedData,\n    payload: ParachainFundsPledged\n}\n\nexport type LoadLatestOwnFundsPledgedData = {\n    type: ActionType.LoadLatestOwnFundsPledgedData\n}\n\nexport type SetLatestOwnFundsPledgedData = {\n    type: ActionType.SetLatestOwnFundsPledgedData,\n    payload: ParachainFundsPledged\n}\n\nexport type Action = \n    | LoadInitialData\n    | SetInitialData\n    | LoadChronicleData\n    | SetChronicleData\n    | LoadAccountData\n    | SetAccountData\n    | LoadIncentiveData\n    | SetIncentiveData\n    | LoadHistoricalSiblingData\n    | SetHistoricalSiblingData\n    | LoadLatestSiblingFundsPledgedData\n    | SetLatestSiblingFundsPledgedData\n    | LoadLatestOwnFundsPledgedData\n    | SetLatestOwnFundsPledgedData","import constate from 'constate';\nimport { initial } from 'lodash';\nimport { useReducer } from 'react';\nimport { Account, Chronicle, HistoricalIncentive, HistoricalParachainFundsPledged, Incentives, ParachainFundsPledged } from 'src/hooks/useQueries';\nimport { Action, ActionType } from './Actions';\n\n\nexport enum LoadingState { \n    Initial, \n    Loading,\n    Loaded \n};\n\ntype Loadable<T> = {\n    loading: LoadingState,\n    data: T\n}\n\ntype Initial = {\n    initializedAtBlockHeight: string | undefined\n}\n\ntype State = {\n    initial: Loadable<Initial>\n    chronicle: Loadable<Chronicle>,\n    incentives: Loadable<Incentives>,\n    // TODO: create a separate time instead of an intersection\n    account: Loadable<Account & {\n        historicalIncentives: HistoricalIncentive[]\n    }>\n    own: {\n        historicalFundsPledged: Loadable<HistoricalParachainFundsPledged[]>,\n        parachain: Loadable<ParachainFundsPledged>\n    },\n    sibling: {\n        historicalFundsPledged: Loadable<HistoricalParachainFundsPledged[]>,\n        parachain: Loadable<ParachainFundsPledged>\n    }\n};\n\nconst loadable = <T extends unknown>(data: T): Loadable<T> => ({\n    loading: LoadingState.Initial,\n    data\n});\n\nconst loading = <T extends unknown>(data: T): Loadable<T> => ({\n    loading: LoadingState.Loading,\n    data\n});\n\nconst loaded = <T extends unknown>(data: T): Loadable<T> => ({\n    loading: LoadingState.Loaded,\n    data\n});\n\nconst initialState: State = {\n    initial: loadable({\n        initializedAtBlockHeight: undefined\n    }),\n    chronicle: loadable({\n        lastProcessedBlock: \"0\",\n        mostRecentAuctionStart: undefined,\n        mostRecentAuctionClosingStart: undefined\n    }),\n    incentives: loadable({\n        leadPercentageRate: '0',\n        totalContributionWeight: '0',\n        siblingParachain: {\n            id: undefined\n        }\n    }),\n    account: loadable({\n        totalContributed: '0',\n        contributions: [],\n        historicalIncentives: []\n    }),\n    own: {\n        historicalFundsPledged: loadable([]),\n        parachain: loadable({\n            fundsPledged: '0'\n        })\n    },\n    sibling: {\n        historicalFundsPledged: loadable([]),\n        parachain: loadable({\n            fundsPledged: '0'\n        })\n    },\n};\n\nconst reducer = (state: State, action: Action) => {\n    switch (action.type) {\n        case ActionType.LoadInitialData:\n            return {\n                ...state,\n                initial: loading(state.initial.data)\n            }\n\n        case ActionType.SetInitialData: {\n            return {\n                ...state,\n                initial: loaded({\n                    initializedAtBlockHeight: action.payload.chronicle.lastProcessedBlock\n                }),\n                chronicle: loaded(action.payload.chronicle),\n                incentives: loaded(action.payload.incentives),\n                own: {\n                    historicalFundsPledged: loaded(action.payload.ownHistoricalFundsPledged),\n                    parachain: loaded(action.payload.ownParachainFundsPledged)\n                }\n            }\n        }\n\n        case ActionType.LoadAccountData:\n            return {\n                ...state,\n                account: loading(state.account.data)\n            }\n\n        case ActionType.SetAccountData:\n            return {\n                ...state,\n                account: loaded(action.payload)\n            }\n\n        case ActionType.LoadChronicleData:\n            return {\n                ...state,\n                chronicle: loading(state.chronicle.data)\n            }\n\n        case ActionType.SetChronicleData:\n            return {\n                ...state,\n                chronicle: loaded(action.payload)\n            }\n\n        case ActionType.LoadIncentiveData:\n            return {\n                ...state,\n                incentives: loading(state.incentives.data)\n            }\n\n        case ActionType.SetIncentiveData: \n            return {\n                ...state,\n                incentives: loaded(action.payload)\n            }\n\n        case ActionType.LoadHistoricalSiblingFundsPledgedData:\n            return {\n                ...state,\n                sibling: {\n                    ...state.sibling,\n                    historicalFundsPledged: loading(state.sibling.historicalFundsPledged.data)\n                }\n            }\n\n        case ActionType.SetHistoricalSiblingFundsPledgedData:\n            return {\n                ...state,\n                sibling: {\n                    ...state.sibling,\n                    historicalFundsPledged: loaded(\n                        action.payload\n                    )\n                }\n            }\n\n        case ActionType.LoadLatestSiblingFundsPledgedData:\n            return {\n                ...state,\n                sibling: {\n                    ...state.sibling,\n                    parachain: loading(state.sibling.parachain.data)\n                }\n            }\n\n        case ActionType.SetLatestSiblingFundsPledgedData:\n            return {\n                ...state,\n                sibling: {\n                    ...state.sibling,\n                    parachain: loaded(action.payload)\n                }\n            }\n\n        case ActionType.LoadLatestOwnFundsPledgedData:\n            return {\n                ...state,\n                own: {\n                    ...state.own,\n                    parachain: loading(state.own.parachain.data)\n                }\n            }\n\n        case ActionType.SetLatestOwnFundsPledgedData:\n            return {\n                ...state,\n                own: {\n                    ...state.own,\n                    parachain: loaded(action.payload)\n                }\n            }\n        \n        default:\n            return state\n    }\n};\nexport const useStore = () => {\n    const [state, dispatch] = useReducer(reducer, initialState);\n    return { state, dispatch };\n}\n\nexport const [StoreProvider, useStoreContext] = constate(useStore);\nexport const useDispatch = () => {\n    const { dispatch } = useStoreContext();\n    return dispatch;\n}\n\nexport const useState = () => {\n    const { state } = useStoreContext();\n    return state;\n}\n\nexport const useIsInitialDataLoading = () => {\n    const state = useState();\n    return state.initial.loading === LoadingState.Loading;\n}\n\nexport const useIsInitialDataLoaded = () => {\n    const state = useState();\n    return state.initial.loading === LoadingState.Loaded;\n}\n\nexport const useInitializedAtBlockHeight = () => {\n    const state = useState();\n    return state.initial.data.initializedAtBlockHeight;\n}\n\nexport const useChronicle = () => {\n    const state = useState();\n    return state.chronicle\n}\n\nexport const useChronicleLastProcessedBlock = () => {\n    const chronicle = useChronicle();\n    return chronicle.data.lastProcessedBlock;\n}\n\nexport const useIncentives = () => {\n    const state = useState();\n    return state.incentives;\n}\n\nexport const useIncentivesTotalContributionWeight = () => {\n    const incentives = useIncentives();\n    return incentives.data.totalContributionWeight;\n}\n\nexport const useIncentivesLeadPercentageRate = () => {\n    const incentives = useIncentives();\n    return incentives.data.leadPercentageRate;\n}\n\nexport const useAccount = () => {\n    const state = useState();\n    return state.account;\n}\n\nexport const useHistoricalIncentives = () => {\n    const state = useState();\n    return state.account.data.historicalIncentives;\n}\n\nexport const useOwnFundsPledged = () => {\n    const state = useState();\n    return state.own.parachain.data?.fundsPledged || '222000000000000';\n}\n\nexport const useSiblingParachainId = () => {\n    const incentives = useIncentives();\n    return incentives.data.siblingParachain.id;\n}\n\nexport const useOwn = () => {\n    const state = useState();\n    return state.own;\n}\n\nexport const useSibling = () => {\n    const state = useState();\n    return state.sibling;\n}\n","import BigNumber from 'bignumber.js';\nimport ksmPrecision from './ksmPrecision';\nimport config from './config';\n\nexport const toKsmPrecision = (humanAmount: any) => {\n    const preciseAmount = new BigNumber(humanAmount)\n            .multipliedBy(\n                new BigNumber(10)\n                    .exponentiatedBy(12)\n            )\n            .toFixed(ksmPrecision)\n\n    return preciseAmount;\n}\n\nexport const fromKsmPrecision = (preciseAmount: any) => {\n    const humanAmount = new BigNumber(preciseAmount)\n            .dividedBy(\n                new BigNumber(10)\n                    .exponentiatedBy(12)\n            )\n            .toFixed(ksmPrecision)\n\n    return humanAmount;\n}\n\nexport const ksmToUsd = (amount: any) => {\n    return new BigNumber(amount)\n        .multipliedBy(config.ksmToUsd)\n        .toFixed(ksmPrecision)\n}\n\nexport const usdToHdx = (amount: any) => {\n    return new BigNumber(amount)\n        .dividedBy(config.hdxToUsd)\n        .toFixed(ksmPrecision)\n}","// outside of a config to avoid dependency cycling\nexport default 12;","import BigNumber from \"bignumber.js\";\nimport { toKsmPrecision } from './utils';\nimport ksmPrecision from \"./ksmPrecision\";\n\nexport const precisionMultiplierBN = new BigNumber('10').pow('6');\nexport const ksmPrecisionMultiplierBN = new BigNumber('10').pow('12');\n\n\nconst config = {\n\n    // processorUrl: 'http://localhost:4000/graphql',\n    processorUrl: 'https://api-crowdloan-basilisk.hydradx.io/graphql',\n    nodeUrl: 'wss://ksm-arch-01.hydration.cloud',\n\n    // Kilt\n    // ownParachainId: '2086',\n    ownParachainId: '2090',\n    // 31.8 - 3 days\n    ownCrowdloanBlockHeight: '9023093',\n    dappName: 'Basilisk Crowdloan',\n    chronicleRefetchTimeout: 6000, // ms\n    auctionEndingPeriodLength: 72000,\n    crowdloanCap: new BigNumber(toKsmPrecision((new BigNumber('222222')))),\n    opportunityCost: new BigNumber('0.1375'),\n    ksmToUsd: '400',\n    hdxToUsd: '0.08059',\n    \n    ksmPrecision,\n    displayPrecision: 6,\n    chart: {\n        historicalDataSpan: 600,\n        blocksPerDay: 14400,\n        auctionClosingStart: 9035066\n    },\n\n    incentives: {\n        hdx: {\n            leadPercentageRateCliffRange: [\n                new BigNumber('15')\n                    .multipliedBy(precisionMultiplierBN)\n                    .toNumber(),\n                new BigNumber('20')\n                    .multipliedBy(precisionMultiplierBN)\n                    .toNumber(),\n            ],\n            scale: {\n                max: 30,\n                min: 5\n            }\n        },\n        bsx: {\n            allocated: new BigNumber(toKsmPrecision(new BigNumber('15000000000'))),\n            scale: {\n                max: 1,\n                min: 0\n            }\n        }\n    }\n};\n\nexport default config;","import {\n    ApolloClient,\n    InMemoryCache,\n    ApolloProvider,\n} from '@apollo/client'\n\nimport config from '../config'\n\nconst client = new ApolloClient({\n    uri: config.processorUrl,\n    cache: new InMemoryCache(),\n    defaultOptions: {\n        watchQuery: {\n            fetchPolicy: 'network-only'\n        },\n        query: {\n            fetchPolicy: 'network-only'\n        }\n    }\n})\n\ntype props = {}\nconst ConfiguredApolloProvider = ({children}: React.PropsWithChildren<props>) => (\n    <ApolloProvider client={client}>\n        {children}\n    </ApolloProvider>\n);\nexport default ConfiguredApolloProvider;","import { ApiPromise, WsProvider } from '@polkadot/api';\nimport {\n    web3Accounts,\n    web3Enable,\n    web3FromAddress,\n  } from '@polkadot/extension-dapp';\nimport { useEffect, useState } from 'react';\nimport { useLocalStorage } from 'react-use';\nimport config from '../config';\nimport constate from 'constate';\nimport log from 'loglevel';\nimport { Signer } from '@polkadot/api/types';\nimport BigNumber from 'bignumber.js';\nimport {encodeAddress,decodeAddress } from '@polkadot/util-crypto';\nimport { useChronicle } from 'src/containers/store/Store';\n\nconst mockAccount = {\n    address: (() => {\n        let params = (new URL(document.location as unknown as string)).searchParams;\n        log.debug('account', params.get('account'));\n        return params.get(\"account\");\n    })() || \"\",\n}\n\nexport const usePolkadot = () => {\n    const [accounts, setAccounts] = useState<any[]>([]);\n    // current active account persisted at the local storage between reloads\n    // allow injecting of a mock account address\n    let [activeAccount, setActiveAccount] = useLocalStorage<string>(\"bsx-crowdloan-account\", mockAccount.address);\n    activeAccount = activeAccount ? encodeAddress(decodeAddress(activeAccount), 2) : \"\";\n\n    const [activeAccountBalance, setActiveAccountBalance] = useState(\"0\");\n    const [showAccountSelector, setShowAccountSelector] = useState(false);\n    const [loading, setLoading] = useState(false);\n    const [api, setApi] = useState<ApiPromise | undefined>(undefined)\n    const [lastContributionStatus, setLastContributionStatus] = useState<boolean | undefined>(undefined);\n\n    const chronicle = useChronicle()\n\n    /**\n     * Configure polkadot.js at the start\n     */\n    useEffect(() => {\n        setTimeout(async () => {\n            log.debug('usePolkadot', 'loading initial');\n            setLoading(true);\n            const allInjected = await web3Enable(config.dappName);\n            const allAccounts = (await web3Accounts())\n                .map(account => ({\n                    ...account,\n                    address: encodeAddress(decodeAddress(account.address), 2)\n                }))\n\n            const wsProvider = new WsProvider(config.nodeUrl);\n            const api = await ApiPromise.create({\n                provider: wsProvider\n            });\n\n            log.debug('usePolkadot', 'loaded', allInjected, api, allAccounts);\n            setAccounts(allAccounts);\n            setApi(api);\n            setLoading(false);\n        }, 300);\n    }, [])\n\n    const fetchBalance = async () => {\n        if (!api || !activeAccount) return;\n        const { data: balance } = await api.query.system.account(activeAccount);\n        log.debug('usePolkadot', 'balance', balance.free.toString());\n        setActiveAccountBalance(balance.free.toString())\n    }\n\n    useEffect(() => {\n        if (!activeAccount) return;\n        if (!api) return\n        fetchBalance();\n    }, [\n        activeAccount,\n        api,\n        chronicle.data.lastProcessedBlock\n    ]);\n\n    const contribute = async (amount: string) => {\n        if (!api) return;\n        if (!activeAccount) return;\n        \n        setLoading(true);\n\n        const { signer } = await web3FromAddress(activeAccount);\n\n        (async () => {\n            console.log('amount', new BigNumber(amount).toFixed(0));\n            try {\n                api.tx.crowdloan.contribute(\n                    config.ownParachainId,\n                    new BigNumber(amount).toFixed(0),\n                    null\n                )\n                .signAndSend(\n                    activeAccount,\n                    { signer },\n                    ({ status, events }) => {\n                        console.log('status', status, status.toHuman());\n                        if (status.isInBlock || status.isFinalized) {\n                            events\n                                .filter(({ event }) => api.events.system.ExtrinsicFailed.is(event))\n                                .length\n                                ? setLastContributionStatus(false)\n                                : setLastContributionStatus(true);\n                        }\n                    }\n                )\n                fetchBalance();\n            } catch (e) {\n                console.error(e);\n                setLastContributionStatus(false);\n            }\n\n            setLoading(false);\n        })();\n    }\n\n    return {\n        accounts,\n        setActiveAccount,\n        activeAccount,\n        activeAccountBalance,\n        lastContributionStatus,\n        showAccountSelector,\n        setShowAccountSelector,\n        contribute\n    }\n}\n\nexport const [PolkadotProvider, usePolkaDotContext] = constate(usePolkadot);","export default __webpack_public_path__ + \"static/media/Logo-dark-2-clean.cbd38319.png\";","export default __webpack_public_path__ + \"static/media/basilisk-wallpaper-2.cc01249c.png\";","import BigNumber from \"bignumber.js\";\nimport { LoadingState, useAccount, useChronicle, useChronicleLastProcessedBlock, useIncentives } from \"src/containers/store/Store\"\nimport linearScale from 'simple-linear-scale';\nimport config, { precisionMultiplierBN } from \"src/config\";\nimport { Contribution, HistoricalIncentive } from \"./useQueries\";\nimport { fromKsmPrecision } from \"src/utils\";\nimport { find } from \"lodash\";\n\nexport const calculateHdxBonus = (leadPercentageRate: string) => {\n    const leadPercentageRateBN = new BigNumber(leadPercentageRate);\n    const cliffStart = config.incentives.hdx.leadPercentageRateCliffRange[0];\n    const cliffEnd = config.incentives.hdx.leadPercentageRateCliffRange[1]\n    \n    // following if statements are necessary due to linearScale clamping being broken\n    // if the lead diff is smaller than the cliff start, return maximum bonus\n    if (leadPercentageRateBN.lt(cliffStart)) return config.incentives.hdx.scale.max; \n    // if the lead diff is larger than the cliff end, return minimum bonus\n    if (leadPercentageRateBN.gt(cliffEnd)) return config.incentives.hdx.scale.min;\n\n    const hdxBonusScale = linearScale(\n        [\n            cliffStart,\n            cliffEnd\n        ], \n        [\n            config.incentives.hdx.scale.max,\n            config.incentives.hdx.scale.min\n        ]\n    )\n    \n    return hdxBonusScale(leadPercentageRate);\n}\n\nexport const calculateBsxMultiplier = (blockHeight: string, mostRecentAuctionClosingStart: string | undefined) => {\n\n    // there is no recent auction, return the full bsx multiplier\n    if (!mostRecentAuctionClosingStart) return config.incentives.bsx.scale.max;\n\n    const mostRecentAuctionClosingEnd = new BigNumber(mostRecentAuctionClosingStart)\n        .plus(config.auctionEndingPeriodLength)\n        .toNumber();\n\n    const blockHeightBN = new BigNumber(blockHeight);\n    // before closing starts, return the full bsx multiplier\n    if (blockHeightBN.lt(mostRecentAuctionClosingStart)) return config.incentives.bsx.scale.max;\n    // after closing ends, return the minimal bsx multiplier\n    if (blockHeightBN.gt(mostRecentAuctionClosingEnd)) return config.incentives.bsx.scale.min;\n\n    const bsxMultiplierScale = linearScale(\n        [\n            parseInt(mostRecentAuctionClosingStart),\n            mostRecentAuctionClosingEnd\n        ],\n        [\n            config.incentives.bsx.scale.max,\n            config.incentives.bsx.scale.min\n        ]\n    )\n\n    return bsxMultiplierScale(blockHeight)\n}\n\nexport const calculateContributionsWeight = (contributions: Contribution[], mostRecentAuctionClosingStart: string | undefined) => {\n    const accountContributionsWeight = contributions\n        .reduce((weight, contribution) => {\n            const bsxMultiplier = calculateBsxMultiplier(\n                contribution.blockHeight,\n                mostRecentAuctionClosingStart\n            );\n\n            weight = weight.plus(\n                new BigNumber(contribution.balance)\n                    .multipliedBy(bsxMultiplier)\n            );\n\n            return weight;\n        }, new BigNumber(0));\n\n    return accountContributionsWeight\n}\n\nexport const calculateMinimumBsxReceived = (\n    contributions: Contribution[] = [], \n    mostRecentAuctionClosingStart: string | undefined\n): BigNumber => {\n    const accountContributionsWeight = calculateContributionsWeight(contributions, mostRecentAuctionClosingStart);\n    const minimumBsxReceived = config.incentives.bsx.allocated\n        .dividedBy(\n            config.crowdloanCap\n                .multipliedBy(\n                    config.incentives.bsx.scale.max\n                )\n        )\n        .multipliedBy(accountContributionsWeight);\n\n    return minimumBsxReceived;\n}\n\nexport const calculateCurrentBsxReceived = (\n    contributions: Contribution[] = [], \n    mostRecentAuctionClosingStart: string | undefined,\n    totalContributionWeight: string,\n) => {\n    const accountContributionsWeight = calculateContributionsWeight(contributions, mostRecentAuctionClosingStart);\n    const totalContributionWeightBN = new BigNumber(totalContributionWeight)    \n        .dividedBy(precisionMultiplierBN);\n\n    if (totalContributionWeightBN.isZero()) return new BigNumber(0);\n\n    const currentBsxReceived = config.incentives.bsx.allocated\n        .dividedBy(totalContributionWeightBN)\n        .multipliedBy(accountContributionsWeight);\n\n    return currentBsxReceived;\n}\n\nexport const calculateCurrentHdxReceived = (contributions: Contribution[], historicalIncentives: HistoricalIncentive[]) => {\n    const hdxReceivedInKsm = contributions.reduce((hdxReceivedInKsm, contribution) => {\n        const historicalIncentive = find(historicalIncentives, { \n            blockHeight: `${contribution.blockHeight}`\n        });\n        const leadPercentageRate = historicalIncentive?.leadPercentageRate || '0';\n\n        // this will account for the contribution with the max hdxBonus\n        // if the leadPercentage rate defaults to '0'\n        // TODO: handle missing historical incentive differently?\n        // NOTE: could use a medium hdxBonus in case the historical data is missing\n        // this would be the most gracious way to handle the missing data.\n        // It would confuse the users the least.\n        const hdxBonus = calculateHdxBonus(leadPercentageRate);\n\n        const contributionHdxReceivedInKsm = new BigNumber(contribution.balance)\n            .multipliedBy(\n                new BigNumber(config.opportunityCost)\n            )\n            .multipliedBy(\n                new BigNumber(hdxBonus)\n            )\n            // divide by 100 since hdx bonus is '30' not '0.3'\n            .dividedBy(\n                new BigNumber(100)\n            )\n\n        hdxReceivedInKsm = hdxReceivedInKsm\n                .plus(contributionHdxReceivedInKsm);\n        \n        return hdxReceivedInKsm;\n    }, new BigNumber('0'));\n\n    return hdxReceivedInKsm;\n}\n\nexport const useCalculateCurrentAccountHdxReceived = () => {\n    const { data: { contributions, historicalIncentives } } = useAccount();\n    return calculateCurrentHdxReceived(contributions, historicalIncentives)\n}\n\nexport const useCalculateCurrentAccountMinimumBsxReceived = () => {\n    const { data: { contributions } } = useAccount();\n    const { data: { mostRecentAuctionClosingStart } } = useChronicle();\n\n    return calculateMinimumBsxReceived(contributions, mostRecentAuctionClosingStart);\n}\n\nexport const useCalculateCurrentAccountCurrentBsxReceived = () => {\n    const { data: { contributions } } = useAccount();\n    const { data: { mostRecentAuctionClosingStart } } = useChronicle();\n    const { data: { totalContributionWeight } } = useIncentives();\n\n    return calculateCurrentBsxReceived(\n        contributions, \n        mostRecentAuctionClosingStart,\n        totalContributionWeight\n    );\n}\n\n\n/**\n * TODO: This function could be optimalized to recalculate only \n * when the incentives really change. \n */\nexport const useGlobalIncentives = () => {\n    const incentives = useIncentives();\n    const lastProcessedBlock = useChronicleLastProcessedBlock();\n    const { data: { mostRecentAuctionClosingStart } } = useChronicle();\n\n    if (incentives.loading !== LoadingState.Loaded) return {\n        bsxMultiplier: undefined,\n        hdxBonus: undefined\n    }\n\n    const hdxBonus = new BigNumber(\n        calculateHdxBonus(incentives.data.leadPercentageRate)\n    );\n\n    const bsxMultiplier = new BigNumber(\n        calculateBsxMultiplier(lastProcessedBlock, mostRecentAuctionClosingStart)\n    );\n\n    return {\n        bsxMultiplier,\n        hdxBonus\n    }\n}\n","import { usePolkaDotContext } from '../hooks/usePolkadot';\nimport log from 'loglevel';\nimport { useEffect, useState } from 'react';\n// import { useChronicle, useContributions, useHistoricalIncentives, useOwn } from './oldStore/Store';\n// import { calculateBsxRewards, calculateCurrentHdxReward, useIncentives } from '../hooks/useIncentives';\n// import config from '../oldConfig';\nimport { fromKsmPrecision, ksmToUsd, toKsmPrecision, usdToHdx } from './../utils';\nimport CurrencyInput from 'react-currency-input-field';\nimport './CrowdloanContributeForm.scss'\nimport BigNumber from 'bignumber.js';\nimport { useChronicle, useHistoricalIncentives, useIncentives, useOwnFundsPledged } from './store/Store';\nimport { Contribution, HistoricalIncentive } from 'src/hooks/useQueries';\nimport config, { ksmPrecisionMultiplierBN, precisionMultiplierBN } from 'src/config';\nimport { calculateBsxMultiplier, calculateCurrentBsxReceived, calculateCurrentHdxReceived, calculateMinimumBsxReceived } from 'src/hooks/useCalculateIncentives';\nimport ksmPrecision from 'src/ksmPrecision';\n\ntype Props = {\n    totalContributionWeight: string,\n    connectAccount: any\n}\n\nexport const CrowdloanContributeForm = ({connectAccount}: Props) => {\n    const { activeAccountBalance, lastContributionStatus, contribute, activeAccount } = usePolkaDotContext();\n    const [amount, setAmount] = useState<number | undefined>(undefined)\n    const defaultRewards = {\n        minimalBsxReceived: \"0\",\n        currentBsxReceived: \"0\",\n        // TODO: convert KSM amount to HDX\n        currentHdxReceived: \"0\",\n    };\n    const [rewardsReceived, setRewardsReceived] = useState(defaultRewards);\n\n    const { data: { lastProcessedBlock, mostRecentAuctionClosingStart } } = useChronicle()\n    const { data: { totalContributionWeight, leadPercentageRate } } = useIncentives();\n    const ownFundsPledged = useOwnFundsPledged()\n\n    useEffect(() => {\n        const contributions: Contribution[] = [\n            {\n                blockHeight: lastProcessedBlock,\n                balance: new BigNumber(amount || 0).multipliedBy(ksmPrecisionMultiplierBN).toFixed(0),\n                crowdloan: {\n                    id: config.ownParachainId\n                }\n            }\n        ];\n\n        if (!amount) return setRewardsReceived(defaultRewards);\n\n        const minimumBsxReceived = calculateMinimumBsxReceived(contributions, mostRecentAuctionClosingStart);\n\n        const currentContributionWeight = new BigNumber(contributions[0].balance)\n            .multipliedBy(\n                calculateBsxMultiplier(\n                    lastProcessedBlock,\n                    mostRecentAuctionClosingStart\n                )\n            )\n            .multipliedBy(precisionMultiplierBN);\n\n        const totalCurrentContributionWeight = new BigNumber(totalContributionWeight)\n            .plus(currentContributionWeight)\n            .toFixed(0);\n\n        const currentBsxReceived = calculateCurrentBsxReceived(\n            contributions,\n            mostRecentAuctionClosingStart,\n            totalCurrentContributionWeight\n        );\n\n        const historicalIncentives: HistoricalIncentive[] = [{\n            blockHeight: lastProcessedBlock,\n            leadPercentageRate\n        }];\n\n        const currentHdxReceived = usdToHdx(ksmToUsd(calculateCurrentHdxReceived(contributions, historicalIncentives)));\n\n        setRewardsReceived({\n            minimalBsxReceived: new BigNumber(fromKsmPrecision(minimumBsxReceived)).toFixed(config.displayPrecision),\n            currentBsxReceived: new BigNumber(fromKsmPrecision(currentBsxReceived)).toFixed(config.displayPrecision),\n            // TODO: convert KSM amount to HDX\n            currentHdxReceived: new BigNumber(fromKsmPrecision(currentHdxReceived)).toFixed(config.displayPrecision),\n        })\n    }, [\n        lastProcessedBlock,\n        leadPercentageRate,\n        mostRecentAuctionClosingStart,\n        totalContributionWeight,\n        amount\n    ])\n\n\n    const handleContributeClick = () => {\n        log.debug('CrowdloanContributeForm', 'handleContributeClick', amount);\n        // call contribute here\n        contribute(toKsmPrecision(amount));\n    }\n\n    useEffect(() => {\n        if (lastContributionStatus) setAmount(0)\n    }, [\n        lastContributionStatus\n    ]);\n\n    const handleContributeChange = (value: any) => {\n        log.debug('CrowdloanContributeForm', 'handleContributeChange', value, activeAccountBalance);\n        if (value == undefined) return setAmount(undefined);\n        if (config.crowdloanCap.minus(ownFundsPledged).lt(toKsmPrecision(value))) return;\n        setAmount(value)\n    }\n\n    const noop = () => {}\n\n    return <div className=\"bsx-contribute-form\">\n\n        <div className=\"bsx-form-wrapper\">\n            <label>ksm contribution</label>\n            <CurrencyInput\n                name=\"amount\"\n                decimalsLimit={12}\n                value={amount}\n                disabled={false}\n                allowNegativeValue={false}\n                placeholder={\"Sacrifice goes here\"}\n                intlConfig={{ locale: 'en-US' }}\n                onValueChange={handleContributeChange}\n            />\n\n            {/* rewards */}\n            <label>minimal bsx received</label>\n            <CurrencyInput\n                name=\"minimal bsx received\"\n                disabled={true}\n                value={rewardsReceived.minimalBsxReceived}\n                onValueChange={noop}\n            />\n\n            <label>current bsx received</label>\n            <CurrencyInput\n                name=\"current bsx received\"\n                disabled={true}\n                value={rewardsReceived.currentBsxReceived}\n                onValueChange={noop}\n            />\n\n            <label>current hdx received</label>\n            <CurrencyInput\n                name=\"current hdx received\"\n                disabled={true}\n                value={rewardsReceived.currentHdxReceived}\n                onValueChange={noop}\n            />\n\n            {activeAccount\n                ? (\n                    <button\n                        disabled={(!amount || amount == 0)}\n                        onClick={handleContributeClick}\n                    >Contribute</button>\n                )\n                : (\n                    <button\n                        onClick={connectAccount}\n                    >\n                        Connect Account\n                    </button>\n                )\n            }\n\n        </div>\n\n        <div className=\"contribution-status\">\n            {lastContributionStatus\n                ? \"Thanksss for your sacrifice\"\n                : (\n                    (lastContributionStatus == false)\n                        ? \"There was a problem with your contribution, please try again.\"\n                        : \"\"\n\n                )\n            }\n        </div>\n    </div>\n}\n","import { useRef } from 'react';\nimport { useClickAway } from 'react-use';\nimport { usePolkaDotContext } from '../hooks/usePolkadot';\nimport './AccountSelector.scss';\n\nexport type Props = {\n    onAccountSelect: any,\n};\n\nexport const AccountSelector = ({onAccountSelect}: Props) => {\n    const { accounts, setActiveAccount } = usePolkaDotContext();\n    \n    const handleAccountOnClick = (address: string) => {\n        setActiveAccount(address);\n        onAccountSelect()\n    }\n\n    const ref = useRef(null);\n    useClickAway(ref, () => {\n        onAccountSelect();\n    })\n\n    const noAccount = undefined;\n\n    return <div className=\"bsx-account-selector\">\n        <div className=\"bsx-account-selector-backdrop\">\n            <div className=\"bsx-account-selector-modal\" ref={ref}>\n                <div className=\"title\">Select an account</div>\n                {\n                    accounts && accounts.length \n                        ? accounts.map(account => (\n                                <div\n                                    className=\"account\"\n                                    key={account.address}\n                                    onClick={_ => handleAccountOnClick(account.address)}\n                                >\n                                    <p className=\"name\">{account.meta.name}</p>\n                                    <p className=\"address\">{account.address}</p>\n                                </div>\n                            ))\n                        : <div className=\"bsx-loading-accounts\">Loading accounts</div>\n                }\n                \n                {/* <div\n                    className=\"account no-account\"\n                    // please don't hurt me\n                    onClick={_ => handleAccountOnClick(noAccount as unknown as string)}\n                >\n                        <p className=\"name\"> Reset account selection </p>\n                </div> */}\n\n                <div>\n                </div>\n            </div>\n        </div>\n    </div>\n}","import BigNumber from \"bignumber.js\";\nimport { range, times } from \"lodash\";\nimport { useMemo } from \"react\";\nimport { Line } from \"react-chartjs-2\";\nimport config from \"src/config\";\nimport { calculateBsxMultiplier } from \"src/hooks/useCalculateIncentives\";\nimport { fromKsmPrecision } from \"src/utils\";\nimport { useChronicle, useOwn, useSibling } from \"./store/Store\";\nimport { Chart, LinearScale } from 'chart.js';\nimport annotationPlugin from 'chartjs-plugin-annotation';\nimport millify from 'millify';\nimport { defaults } from 'react-chartjs-2';\nimport linearScale from \"simple-linear-scale\";\n\n\nChart.register(annotationPlugin);\n\nconst millifyOptions = {\n    // precision: config.displayPrecision,\n    precision: 6,\n    decimalSeparator: ','\n}\n\ndefaults.animation = false;\n\nconst colors = {\n    yellow: '#ffe733',\n    red: '#ff5033',\n    orange: '#ff8133',\n    green: '#90ff33',\n    white: '#ebebeb',\n    black: '#171b22',\n    faintGray: 'rgba(181, 149, 114, .1)',\n    transparent: 'transparent',\n}\n\nexport const Graph = () => {\n    // const sibling = useSibling();\n    // const { siblingHistoricalFundsPledged, siblingFundsPledged } = (() => {\n    //     const { historicalFundsPledged, parachain: { data: { fundsPledged } } } = sibling;\n    //     return {\n    //         siblingHistoricalFundsPledged: historicalFundsPledged.data,\n    //         siblingFundsPledged: fundsPledged\n    //     }\n    // })();\n\n    // const own = useOwn();\n    // const { ownHistoricalFundsPledged, ownFundsPledged } = (() => {\n    //     if (!own || !own.parachain.data) return {\n    //         ownHistoricalFundsPledged: [],\n    //         ownFundsPledged: '0'\n    //     }\n    //     console.log('own', own);\n    //     const { historicalFundsPledged, parachain: { data: { fundsPledged } } } = own;\n    //     return {\n    //         ownHistoricalFundsPledged: historicalFundsPledged.data,\n    //         ownFundsPledged: fundsPledged\n    //     }\n    // })();\n\n    // const { data: { mostRecentAuctionClosingStart, lastProcessedBlock } } = useChronicle();\n\n    // const isLineChartDataLoading = false;\n\n    // // console.log('sibling data', siblingFundsPledged, siblingHistoricalFundsPledged);\n\n    // // 8979298 - 9080098\n    // const chartStart = config.ownCrowdloanBlockHeight;\n    // const graphEndBlockHeight = new BigNumber(chartStart)\n    //     .plus(config.chart.blocksPerDay * 7)\n    //     .toNumber();\n\n    // const lineChartLabels = useMemo(() => {\n    //     return range(\n    //         // own crowdloan start - 2 days\n    //         chartStart,\n    //         graphEndBlockHeight,\n    //         config.chart.historicalDataSpan\n    //     )\n    //     .concat([parseInt(lastProcessedBlock)]);\n    // }, [])\n\n    // const lineChartBlockNumScale = linearScale(\n    //     [\n    //         chartStart,\n    //         graphEndBlockHeight,\n    //     ],\n    //     [\n    //         0,\n    //         // (targetAuction.closingEnd - config.ownCrowdloanBlockNum) / aggregationCoeficient,\n    //         // (config.chart.auctionClosingStart + config.auctionEndingPeriodLength)\n    //         168\n    //         // lineChartLabels.length - 1\n    //     ]\n    // )\n    \n    // console.log('chart')\n    // console.log('labels', lineChartLabels);\n    // console.log('ownData', ownHistoricalFundsPledged);\n    // console.log('siblingData', siblingHistoricalFundsPledged);\n\n    // const ownFundsPledgedWithOffset = (() => {\n    //     if (!ownHistoricalFundsPledged) return [];\n    //     if (!ownHistoricalFundsPledged[ownHistoricalFundsPledged.length - 1]) return [];\n    //     const lastOwnHistoricalDataBlockHeight = ownHistoricalFundsPledged[ownHistoricalFundsPledged.length - 1]?.blockHeight;\n    //     const diffFromLastBlockToLastHistorical = new BigNumber(lastProcessedBlock)\n    //         .minus(\n    //             new BigNumber(\n    //                 lastOwnHistoricalDataBlockHeight\n    //             )\n    //         )\n    //         .dividedBy(config.chart.historicalDataSpan)\n    //         .toFixed(0);\n    \n    //         console.log('diffFromLastBlock', diffFromLastBlockToLastHistorical)\n\n    //     return (times(parseInt(diffFromLastBlockToLastHistorical), () => null) as any[])\n    //         .concat([\n    //             fromKsmPrecision(ownFundsPledged)\n    //         ])\n    // })();\n\n    // const siblingFundsPledgedWithOffset = (() => {\n    //     if (!siblingHistoricalFundsPledged) return [];\n    //     if (!siblingHistoricalFundsPledged[siblingHistoricalFundsPledged.length - 1]) return [];\n    //     const lastSiblingHistoricalDataBlockHeight = siblingHistoricalFundsPledged[siblingHistoricalFundsPledged.length - 1]?.blockHeight;\n    //     const diffFromLastBlockToLastHistorical = new BigNumber(lastProcessedBlock)\n    //         .minus(\n    //             new BigNumber(\n    //                 lastSiblingHistoricalDataBlockHeight\n    //             )\n    //         )\n    //         .dividedBy(config.chart.historicalDataSpan)\n    //         .toFixed(0);\n    \n    //         console.log('diffFromLastBlock', lastSiblingHistoricalDataBlockHeight, diffFromLastBlockToLastHistorical)\n\n    //     return [\n    //         fromKsmPrecision(siblingFundsPledged)\n    //     ];\n\n    //     // return (times(parseInt(diffFromLastBlockToLastHistorical), () => null) as any[])\n    //     //     .concat([\n    //     //         fromKsmPrecision(siblingFundsPledged)\n    //     //     ])\n    // })();\n\n    // console.log('ownFundsPledgedWithOffset', ownFundsPledgedWithOffset);\n    // const ownLineChartData = ownHistoricalFundsPledged\n    //     ?.map(({ blockHeight, fundsPledged }) => fromKsmPrecision(fundsPledged))\n    //     .concat(ownFundsPledged ? ownFundsPledgedWithOffset : [])\n\n\n    // const siblingLineChartData = siblingHistoricalFundsPledged\n    //     ?.map(({ blockHeight, fundsPledged }) => fromKsmPrecision(fundsPledged))\n    //     .concat(siblingFundsPledged ? siblingFundsPledgedWithOffset : [])\n\n    // const lineChartData = {\n    //     labels: lineChartLabels,\n    //     datasets: [\n    //             {\n    //                 label: 'Basilisk',\n    //                 borderColor: colors.green,\n    //                 yAxisID: 'crowdloanCap',\n    //                 data: ownLineChartData,\n    //                 spanGaps: true,\n    //             },\n    //             {\n    //                 label: 'Sibling', // todo replace with real sibling name from mapping or at least paraId\n    //                 borderColor: colors.yellow,\n    //                 yAxisID: 'crowdloanCap',\n    //                 data: siblingLineChartData,\n    //                 spanGaps: true,\n    //             },\n    //             {\n    //                 label: 'BSX Multiplier',\n    //                 yAxisID: 'bsxMultiplier',\n    //                 borderColor: colors.transparent,\n    //                 backgroundColor: colors.faintGray,\n    //                 fill: true,\n    //                 data: lineChartLabels\n    //                         .map(blockHeight => {\n    //                             return calculateBsxMultiplier(\n    //                                 blockHeight.toString(),\n    //                                 mostRecentAuctionClosingStart\n    //                             )\n    //                         })\n    //             }\n    //     ]\n    // }\n\n    // const labelOptions = {\n    //     backgroundColor: colors.green,\n    //     position: 'end',\n    //     enabled: true,\n    //     color: colors.black,\n    //     font: {\n    //         family: 'Pexico',\n    //         size: 12\n    //     },\n    //     xAdjust: 10,\n    //     cornerRadius: 0,\n    // }\n\n\n\n    // const lineChartOptions = useMemo(() => {\n    //     return {\n    //         pointRadius: 0,\n    //         responsive: true,\n    //         maintainAspectRatio: false,\n    //         scales: {\n    //             x: {\n    //                 // display: false,\n    //             },\n    //             crowdloanCap: {\n    //                 type: 'linear',\n    //                 position: 'left',\n    //                 display: false,\n    //                 max: 200000,\n    //                 min: 0\n    //             },\n    //             bsxMultiplier: {\n    //                 type: 'linear',\n    //                 display: false,\n    //                 position: 'right',\n    //                 max: 1.7,\n    //                 min: 0\n    //             }\n    //         },\n    //         plugins: {\n    //             tooltip: {\n    //                 enabled: false,\n    //             },\n    //             legend: {\n    //                 display: false\n    //             },\n    //             autocolors: false,\n    //             annotation: {\n    //                 annotations: {\n    //                     // auctionStart: {\n    //                     //     type: 'line',\n    //                     //     value: lineChartBlockNumScale(targetAuction.blockNum),\n    //                     //     borderColor: colors.orange,\n    //                     //     borderWidth: 3,\n    //                     //     borderDash: [3, 3],\n    //                     //     scaleID: 'x',\n    //                     //     label: {\n    //                     //         ...labelOptions,\n    //                     //         position: 'start',\n    //                     //         backgroundColor: colors.orange,                                \n    //                     //         content: 'auction starting',\n    //                     //         xAdjust: -10,\n    //                     //         yAdjust: 20,\n                                \n    //                     //     }\n    //                     // },\n    //                     closingStart: {\n    //                         type: 'line',\n    //                         value: (() => {\n    //                             const value = lineChartBlockNumScale(mostRecentAuctionClosingStart || config.chart.auctionClosingStart);\n    //                             console.log('closing start', value, lineChartLabels.length);\n    //                             // return 0;\n    //                             return value;\n    //                         })(),\n    //                         // value: 100000,\n    //                         // xMin: chronicle.data.curBlockNum,\n    //                         // xMax: chronicle.data.curBlockNum,\n    //                         borderColor: colors.red,\n    //                         borderWidth: 3,\n    //                         borderDash: [3, 3],\n    //                         scaleID: 'x',\n    //                         label: {\n    //                             ...labelOptions,\n    //                             position: 'start',\n    //                             backgroundColor: colors.red,                                \n    //                             content: 'auction closing',\n    //                             xAdjust: 10,\n    //                             yAdjust: 20,\n    //                             xPadding: 30,\n    //                         }\n    //                     },\n    //                     now: lastProcessedBlock ? {\n    //                         type: 'line',\n    //                         // value: lineChartBlockNumScale(chronicle.data.curBlockNum),\n    //                         value: (() => {\n    //                             const value = lineChartBlockNumScale(lastProcessedBlock)\n    //                             console.log('lastProcessed value', value, lastProcessedBlock);\n    //                             return value;\n    //                         })(),\n    //                         // value: 100000,\n    //                         // xMin: chronicle.data.curBlockNum,\n    //                         // xMax: chronicle.data.curBlockNum,\n    //                         borderColor: colors.white,\n    //                         borderWidth: 3,\n    //                         borderDash: [3, 3],\n    //                         scaleID: 'x',\n    //                         label: {\n    //                             ...labelOptions,\n    //                             position: 'start',\n    //                             backgroundColor: colors.white,                                \n    //                             content: 'now',\n    //                             xAdjust: 0,\n    //                             yAdjust: 60,\n    //                             xPadding: 10,\n    //                         }\n    //                     } : null,\n                        \n    //                     siblingRaised: siblingFundsPledged ? {\n    //                         type: 'line',\n    //                         borderWidth: 1,\n    //                         borderDash: [3, 3],\n    //                         scaleID: 'crowdloanCap',\n    //                         // TODO: .toFixed(0) first\n    //                         value: fromKsmPrecision(siblingFundsPledged),\n    //                         borderColor: colors.yellow,\n    //                         label: {\n    //                             ...labelOptions,\n    //                             xAdjust: -8,\n    //                             backgroundColor: colors.yellow,\n    //                             content: millify(parseFloat(fromKsmPrecision(siblingFundsPledged)), millifyOptions),\n    //                         }\n    //                     } : null,\n\n    //                     ownRaised: ownFundsPledged ? {\n    //                         type: 'line',\n    //                         value: fromKsmPrecision(ownFundsPledged),\n    //                         borderColor: colors.green,\n    //                         borderWidth: 1,\n    //                         borderDash: [3, 3],\n    //                         scaleID: 'crowdloanCap',\n    //                         label: {\n    //                             ...labelOptions,\n    //                             xAdjust: -116,\n    //                             content: millify(parseFloat(fromKsmPrecision(ownFundsPledged)), millifyOptions),\n    //                         }\n    //                     } : null,\n    //                 },\n    //             },\n    //         }\n    //     }\n    // }, [\n    //     ownFundsPledged,\n    //     siblingFundsPledged,\n    //     lastProcessedBlock\n    // ])\n\n    return <>\n        <div className=\"col-9 bsx-graph\">\n            <div className=\"bsx-graph-wrapper\">\n                        \n                <div className=\"bsx-annotation-container\"></div>\n\n                <div className=\"bsx-graph-loader\">\n                    Graph will become available <br/> in the next few hours\n                </div>\n\n                {/* {isLineChartDataLoading\n                    ? (\n                        <div className=\"bsx-graph-loader\">\n                            Fetching graph data...\n                        </div>\n                    )\n                    : (\n                        <Line\n                            id=\"1\"\n                            type=\"line\"\n                            data={lineChartData}\n                            options={lineChartOptions}\n                        />\n                    )\n                } */}\n                \n            </div>\n            <div className=\"bsx-graph-timeline\">\n                <div className=\"row\">\n                    <div className=\"col-3\">\n                        29.8\n                    </div>\n                    <div className=\"col-6 bsx-legend\">\n                        <span className=\"basilisk\">Basilisk</span> / <span className=\"sibling\">Target</span> KSM raised\n                    </div>\n                    <div className=\"col-3\">\n                        5.9\n                    </div>\n                </div>\n                <div className=\"bsx-progress-bar-container\">\n                    <div className=\"bsx-progress-bar\" style={{\n                        // width: `${progressBarScale(chronicle.data.curBlockNum)}%`\n                        width: '0%'\n                    }}></div>\n                </div>\n            </div>\n        </div>\n    </>\n}","import './Dashboard.scss'\nimport bsxEye from './../assets/Logo-dark-2-clean.png';\nimport bsxWallpaper from './../assets/basilisk-wallpaper-2.png';\nimport { CrowdloanContributeForm } from 'src/containers/CrowdloanContributeForm';\nimport { defaults } from 'react-chartjs-2';\nimport { useState } from 'react';\n\nimport { Chart } from 'chart.js';\nimport annotationPlugin from 'chartjs-plugin-annotation';\nimport { AccountSelector } from 'src/containers/AccountSelector';\nimport { usePolkaDotContext } from 'src/hooks/usePolkadot';\nimport { useInitialData } from 'src/hooks/useInitialData';\nimport { useAccount, useChronicleLastProcessedBlock, useIncentives, useSibling } from 'src/containers/store/Store';\nimport { fromKsmPrecision, ksmToUsd, usdToHdx } from 'src/utils';\nimport millify from 'millify';\nimport { useAccountData } from 'src/hooks/useAccountData';\nimport { useChronicleData } from 'src/hooks/useChronicleData';\nimport { useIncentivesData } from 'src/hooks/useIncentivesData';\nimport { useCalculateCurrentAccountCurrentBsxReceived, useCalculateCurrentAccountMinimumBsxReceived, useCalculateCurrentAccountHdxReceived, useGlobalIncentives } from 'src/hooks/useCalculateIncentives';\nimport BigNumber from 'bignumber.js';\nimport config from 'src/config';\nimport { useSiblingData } from 'src/hooks/useSiblingData';\n\nimport { Graph } from './../containers/Graph';\n\nChart.register(annotationPlugin);\n\nconst millifyOptions = {\n    // precision: config.displayPrecision,\n    precision: 6,\n    decimalSeparator: '.'\n}\n\nconst useDashboardData = () => {\n    const lastProcessedBlock = useChronicleLastProcessedBlock();\n\n\n    // incentives\n    const { bsxMultiplier, hdxBonus } = useGlobalIncentives();\n    const currentAccountMinimumBsxReceived = useCalculateCurrentAccountMinimumBsxReceived();\n    const currentAccountCurrentBsxReceived = useCalculateCurrentAccountCurrentBsxReceived();\n    const currentAccountCurrentHdxReceived = useCalculateCurrentAccountHdxReceived()\n\n    // TODO: move polkadot-js data to the store\n    const {\n        showAccountSelector,\n        setShowAccountSelector,\n        activeAccount,\n        activeAccountBalance\n    } = usePolkaDotContext();\n\n    const { data: { totalContributed } } = useAccount()\n\n\n\n    return {\n        // chronicle\n        lastProcessedBlock,\n\n        // polkadot-js / account\n        showAccountSelector,\n        setShowAccountSelector,\n        activeAccount,\n        activeAccountBalance,\n\n        // account data\n        totalContributed,\n\n        // incentives\n        bsxMultiplier,\n        hdxBonus,\n        currentAccountMinimumBsxReceived,\n        currentAccountCurrentBsxReceived,\n        currentAccountCurrentHdxReceived\n    }\n}\n\nexport const Dashboard = () => {\n\n    const {\n        // chronicle\n        lastProcessedBlock,\n\n        // polkadot-js / account\n        showAccountSelector,\n        setShowAccountSelector,\n        activeAccount,\n        activeAccountBalance,\n\n        // account data\n        totalContributed,\n\n        // incentives\n        bsxMultiplier,\n        hdxBonus,\n        currentAccountMinimumBsxReceived,\n        currentAccountCurrentBsxReceived,\n        currentAccountCurrentHdxReceived\n    } = useDashboardData();\n\n    return <div className='bsx-dashboard'>\n\n        <div className=\"bsx-navbar\">\n            <div className=\"container-xl\">\n                <div className=\"row\">\n                    <div className=\"col-3\">\n                        <div className=\"bsx-logo\">\n                            basilisk\n                        </div>\n                    </div>\n                    <div className=\"col-9 bsx-menu-col\">\n\n                        <div className=\"bsx-menu\">\n                            <div className=\"bsx-menu-item\">\n                                <a href=\"https://bsx.fi/\" target=\"_blank\">\n                                    home\n                                </a>\n                            </div>\n                            <div className=\"bsx-menu-item\">\n                                <a href=\"https://discord.gg/S8YZj5aXR6\" target=\"_blank\">\n                                    discord\n                                </a>\n                            </div>\n                            <div className=\"bsx-eye\">\n                                <img src={bsxEye}/>\n                            </div>\n                            <div className=\"bsx-menu-item\">\n                                <a href=\"https://github.com/galacticcouncil/Basilisk-node\" target=\"_blank\">\n                                    github\n                                </a>\n                            </div>\n                            <div className=\"bsx-menu-item\">\n                                <a href=\"https://docs.bsx.fi/\" target=\"_blank\">\n                                    docs\n                                </a>\n                            </div>\n                            <div className=\"bsx-menu-item\">\n                                <a href=\"https://basiliskfi.substack.com/\" target=\"_blank\">\n                                    blog\n                                </a>\n                            </div>\n                        </div>\n\n                    </div>\n                </div>\n            </div>\n        </div>\n\n        {/* <div className=\"bsx-disclaimer\">\n            Basilisk is taking a temporary leave of absence, it shall return for the next batch of parachain slot auctions.\n            If you've made an offering to the snekk during the auctions for slot #1 - #5, your KSM will be returned automatically by the protocol at block 8467200 (2021-07-23 10:35).\n            <br/><br/> Until then, make sure to follow our <a href=\"https://basiliskfi.substack.com/\" target=\"_blank\">blog</a> for the latest updates regarding Basilisk.\n            Stay vigilant.\n        </div> */}\n\n        <div className=\"bsx-account\">\n            <div className=\"container-xl\">\n                <div className=\"row bsx-account-selector-display\">\n\n                    <div className=\"col-9 bsx-address\">\n                        <div>\n                            <span className=\"bsx-chronicle\">\n                                {`#${lastProcessedBlock}`}\n                                {activeAccount ? ` / ` : ' / No account connected'}\n                            </span>\n                            {activeAccount}\n                        </div>\n                    </div>\n                    <div\n                        className=\"col-3 bsx-select-account\"\n                        onClick={_ => setShowAccountSelector(true)}\n                    >\n                        { activeAccount ? \"change your account\" : \"connect account\" }\n                    </div>\n                </div>\n                <div className=\"row bsx-stats\">\n                    <div className=\"col-9\">\n                        <div className=\"row\">\n                            <div className=\"col-3 bsx-stat\">\n                                <span className=\"bsx-stat-title\">\n                                    total ksm contributed\n                                </span>\n                                <span className=\"bsx-stat-value\">\n                                    {millify(parseFloat(fromKsmPrecision(totalContributed)), millifyOptions)}\n                                </span>\n                            </div>\n                            <div className=\"col-3 bsx-stat\">\n                                <span className=\"bsx-stat-title\">\n                                    minimal bsx received\n                                </span>\n                                <span className=\"bsx-stat-value\">\n                                    {millify(parseFloat(fromKsmPrecision(currentAccountMinimumBsxReceived)), millifyOptions)}\n                                </span>\n                            </div>\n                            <div className=\"col-3 bsx-stat\">\n                                <span className=\"bsx-stat-title\">\n                                    current bsx received\n                                </span>\n                                <span className=\"bsx-stat-value\">\n                                    {currentAccountCurrentBsxReceived\n                                        ? millify(parseFloat(fromKsmPrecision(currentAccountCurrentBsxReceived)), millifyOptions)\n                                        : '-'\n                                    }\n                                </span>\n                            </div>\n                            <div className=\"col-3 bsx-stat\">\n                                <span className=\"bsx-stat-title\">\n                                    current hdx reward\n                                </span>\n                                <span className=\"bsx-stat-value\">\n                                    {millify(parseFloat(usdToHdx(ksmToUsd(fromKsmPrecision(currentAccountCurrentHdxReceived)))), millifyOptions)}\n                                </span>\n                            </div>\n                        </div>\n                    </div>\n                    <div className=\"col-3 bsx-stat bsx-stat-balance\">\n                        <span className=\"bsx-stat-title\">\n                            free balance\n                        </span>\n                        <span className=\"bsx-stat-value\">\n                            {millify(parseFloat(fromKsmPrecision(activeAccountBalance)), millifyOptions)}\n                        </span>\n                    </div>\n                </div>\n            </div>\n        </div>\n\n        <div className=\"container-xl\">\n            <div className=\"row\">\n                <Graph/>\n                <div className=\"col-3 bsx-contribute\">\n                    <div className=\"bsx-incentives\">\n\n                    <>\n                        <div className=\"bsx-incentive\">\n                            <div className=\"row\">\n                                <div className=\"col-6 name\">\n                                    <span>\n                                        hdx bonus\n                                    </span>\n                                </div>\n                                <div className=\"col-6 value\">\n                                    <span>\n                                    {hdxBonus ? hdxBonus.toFixed(2) : '-'}\n                                    </span>\n                                </div>\n                            </div>\n                        </div>\n\n                        <div className=\"bsx-incentive\">\n                            <div className=\"row\">\n                                <div className=\"col-8 name\">\n                                    <span>\n                                        bsx multiplier\n                                    </span>\n                                </div>\n                                <div className=\"col-4 value\">\n                                    <span>\n                                        {bsxMultiplier ? bsxMultiplier.toFixed(2) : '-'}\n                                    </span>\n                                </div>\n                            </div>\n                        </div>\n                    </>\n\n                        {/* {false\n                            ? (<>\n                                <div className=\"bsx-incentives-loader\">\n                                    Caluculating incentives...\n                                </div>\n                            </>)\n                            : (<>\n                                <div className=\"bsx-incentive\">\n                                    <div className=\"row\">\n                                        <div className=\"col-6 name\">\n                                            <span>\n                                                hdx bonus\n                                            </span>\n                                        </div>\n                                        <div className=\"col-6 value\">\n                                            <span>\n                                            {hdxBonus ? `~${hdxBonus.toFixed(2)}` : '-'}\n                                            </span>\n                                        </div>\n                                    </div>\n                                </div>\n\n                                <div className=\"bsx-incentive\">\n                                    <div className=\"row\">\n                                        <div className=\"col-8 name\">\n                                            <span>\n                                                bsx multiplier\n                                            </span>\n                                        </div>\n                                        <div className=\"col-4 value\">\n                                            <span>\n                                                {bsxMultiplier ? `~${bsxMultiplier.toFixed(2) }` : '-'}\n                                            </span>\n                                        </div>\n                                    </div>\n                                </div>\n                            </>)\n                        } */}\n\n                    </div>\n\n                    <div>\n                        <CrowdloanContributeForm\n                            connectAccount={() => setShowAccountSelector(true)}\n                            totalContributionWeight={\"0\"}\n                        />\n                    </div>\n                </div>\n            </div>\n        </div>\n\n        <div className=\"bsx-wallpaper\">\n            <img src={bsxWallpaper}/>\n        </div>\n\n        {showAccountSelector ? <AccountSelector\n            onAccountSelect={() => setShowAccountSelector(false)}\n        /> : <></>}\n    </div>\n}\n","import { gql, useLazyQuery } from \"@apollo/client\";\nimport config from './../config';\n\nconst chronicleId = 'chronicle';\nconst chronicleByUniqueInput = `\n    chronicleByUniqueInput(where: {id: \"${chronicleId}\"}) {\n        lastProcessedBlock\n        mostRecentAuctionClosingStart\n        mostRecentAuctionStart\n    }\n`\n\nconst historicalFundsPledgedByParachainIdSinceBlockHeight = (parachainId: string, blockHeight: string) => `\n    historicalParachainFundsPledgeds(where: {parachain: {id_eq: \"${parachainId}\"}, blockHeight_gte: \"${blockHeight}\"}) {\n        fundsPledged\n        blockHeight\n    }\n`\n\n// duplicate but parametrized via the query instead\nconst _historicalFundsPledgedByParachainIdSinceBlockHeight = `\n    historicalParachainFundsPledgeds(where: {parachain: {id_eq: $parachainId}, blockHeight_gte: $blockHeight}) {\n        fundsPledged\n        blockHeight\n    }\n`\n\nconst fundsPledgedByParachainId = `\n    parachainByUniqueInput(where: {id: $parachainId}) {\n        fundsPledged\n    }\n`\n\n// query MyQuery($parachainId: ID!, $blockHeight: BigInt!) {\n//     historicalParachainFundsPledgeds(where: {parachain: {id_eq: $parachainId}, blockHeight_gte: $blockHeight}) {\n//        fundsPledged\n//        blockHeight\n//    }\n// }\nconst historicalFundsPledgedByParachainIdSinceBlockHeightDataQuery = gql`\n    query HistoricalFundsPledged($parachainId: ID!, $blockHeight: BigInt!) {\n        ${_historicalFundsPledgedByParachainIdSinceBlockHeight}\n    }\n`\n\nconst fundsPledgedByParachainIdDataQuery = gql`\n    query FundsPledged($parachainId: ID!) {\n        ${fundsPledgedByParachainId}\n    }\n`\n\nconst parachainFundsPledgedByParachainId = (parachainId: string) => `\n    parachainByUniqueInput(where: {id: \"${parachainId}\"}) {\n        fundsPledged\n    }\n`\n\nconst incentiveId = 'incentive';\nconst incentives = `\n    incentiveByUniqueInput(where: {id: \"${incentiveId}\"}) {\n        totalContributionWeight\n        leadPercentageRate,\n        siblingParachain {\n            id\n        }\n    }\n`\n\nconst initialDataQuery = gql`\n    query InitialData {\n        ${chronicleByUniqueInput}\n        ${historicalFundsPledgedByParachainIdSinceBlockHeight(\n            config.ownParachainId,\n            config.ownCrowdloanBlockHeight\n        )}\n        ${parachainFundsPledgedByParachainId(\n            config.ownParachainId\n        )}\n        ${incentives}\n    }\n`\n\nconst accountByAccountId = `\n    accountByUniqueInput(where: {id: $accountId}) {\n        totalContributed\n        contributions {\n            crowdloan {\n                id\n            }\n            blockHeight\n            balance\n        }\n    }\n`\n\nconst historicalIncentivesByBlockHeights = `\n    historicalIncentives(where: {blockHeight_in: $blockHeights}) {\n        blockHeight\n        leadPercentageRate\n    }\n`\n\nconst historicalIncentivesByBlockHeightsDataQuery = gql`\n    query HistoricalIncentives($blockHeights: [BigInt!]) {\n        ${historicalIncentivesByBlockHeights}\n    }\n`\n\nconst accountByAccountIdDataQuery = gql`\n    query ContributionsByAccountId($accountId: ID!) {\n        ${accountByAccountId}\n    }\n`\nconst chronicleDataQuery = gql`\n    query Chronicle {\n        ${chronicleByUniqueInput}\n    }\n`\n\nconst incentivesDataQuery = gql`\n    query Incentives {\n        ${incentives}\n    }\n`\n\nexport type Chronicle = {\n    lastProcessedBlock: string,\n    mostRecentAuctionStart: string | undefined,\n    mostRecentAuctionClosingStart: string | undefined\n}\n\nexport type HistoricalParachainFundsPledged = {\n    fundsPledged: string,\n    blockHeight: string\n}\n\nexport type ParachainFundsPledged = {\n    fundsPledged: string\n}\n\nexport type Incentives = {\n    leadPercentageRate: string,\n    totalContributionWeight: string,\n    siblingParachain: {\n        id: string | undefined\n    }\n}\n\nexport type HistoricalIncentive = {\n    blockHeight: string,\n    leadPercentageRate: string,\n}\n\ntype InitialDataQueryResponse = {\n    chronicleByUniqueInput: Chronicle,\n    historicalParachainFundsPledgeds: HistoricalParachainFundsPledged[],\n    parachainByUniqueInput: ParachainFundsPledged,\n    incentiveByUniqueInput: Incentives | undefined\n};\nexport const useInitialDataQuery = () => useLazyQuery<InitialDataQueryResponse>(initialDataQuery);\n\nexport type Contribution = {\n    blockHeight: string,\n    balance: string,\n    crowdloan: {\n        id: string\n    }\n};\n\nexport type Account = {\n    totalContributed: string,\n    contributions: Contribution[],\n}\n\nexport type AccountByAccountIdQueryResponse = {\n    accountByUniqueInput: Account\n};\n\nexport const useAccountByAccountIdDataQuery = (accountId: string) => useLazyQuery<AccountByAccountIdQueryResponse>(accountByAccountIdDataQuery, {\n    variables: {\n        accountId\n    }\n});\n\ntype ChronicleQueryResponse = {\n    chronicleByUniqueInput: Chronicle\n}\n\nexport const useChronicleDataQuery = () => useLazyQuery<ChronicleQueryResponse>(chronicleDataQuery);\n\ntype IncentivesQueryResponse = {\n    incentiveByUniqueInput: Incentives | undefined\n}\n\nexport const useIncentivesDataQuery = () => useLazyQuery<IncentivesQueryResponse>(incentivesDataQuery);\n\ntype HistoricalIncentivesByBlockHeightsQueryResponse = {\n    historicalIncentives: HistoricalIncentive[]\n}\n\nexport const useHistoricalIncentivesByBlockHeightsDataQuery = (blockHeights: string[]) => useLazyQuery<HistoricalIncentivesByBlockHeightsQueryResponse>(historicalIncentivesByBlockHeightsDataQuery, {\n    variables: { blockHeights }\n})\n\ntype HistoricalFundsPledgedByParachainIdQueryResponse = {\n    historicalParachainFundsPledgeds: HistoricalParachainFundsPledged[]\n}\n\nexport const useHistoricalFundsPledgedByParachainIdDataQuery = (parachainId: string, blockHeight: string) => useLazyQuery<HistoricalFundsPledgedByParachainIdQueryResponse>(historicalFundsPledgedByParachainIdSinceBlockHeightDataQuery, {\n    variables: { parachainId, blockHeight }\n})\n\ntype FundsPledgedByParachainIdQueryResponse = {\n    parachainByUniqueInput: ParachainFundsPledged\n}\n\nexport const useFundsPledgedByParachainIdDataQuery = (parachainId: string) => useLazyQuery<FundsPledgedByParachainIdQueryResponse>(fundsPledgedByParachainIdDataQuery, {\n    variables: { parachainId }\n})","import { useEffect } from \"react\";\nimport { ActionType } from \"src/containers/store/Actions\";\nimport { LoadingState, useAccount, useChronicleLastProcessedBlock, useDispatch } from \"src/containers/store/Store\"\nimport { usePolkaDotContext } from \"./usePolkadot\";\nimport { AccountByAccountIdQueryResponse, useAccountByAccountIdDataQuery, useHistoricalIncentivesByBlockHeightsDataQuery } from \"./useQueries\";\nimport { isEqual } from 'lodash';\nimport { LazyQueryResult, QueryResult } from \"@apollo/client\";\nimport config from \"src/config\";\n\nconst contributionsFromQuery = (accountByAccountIdData: LazyQueryResult<AccountByAccountIdQueryResponse, {}>) => {\n    return accountByAccountIdData.data?.accountByUniqueInput?.contributions\n        .filter(({ crowdloan: { id } }) => id === config.ownParachainId)\n        .map(({ balance, blockHeight, crowdloan }) => ({ balance, blockHeight, crowdloan })) || [];\n};\n\nexport const useAccountData = () => {\n    const dispatch = useDispatch();\n    const account = useAccount();\n    const { activeAccount, activeAccountBalance } = usePolkaDotContext();\n    const [getAccountByAccountIdData, accountByAccountIdData] = useAccountByAccountIdDataQuery(activeAccount);\n    const [getHistoricalIncentivesByBlockHeightsData, historicalIncentivesByBlockHeightsData] = useHistoricalIncentivesByBlockHeightsDataQuery(\n        accountByAccountIdData \n            ? contributionsFromQuery(accountByAccountIdData)\n                .map(contribution => contribution.blockHeight)\n            : []\n    );\n\n    const lastProcessedBlock = useChronicleLastProcessedBlock();\n    \n    // reload account data when the active account / active account balance changes\n    useEffect(() => {\n        // already loading\n        if (account.loading === LoadingState.Loading) return;\n        dispatch({\n            type: ActionType.LoadAccountData\n        });\n    }, [\n        activeAccount,\n        activeAccountBalance,\n        lastProcessedBlock\n    ]);\n\n    useEffect(() => {\n        // not loading, do nothing\n        if (account.loading != LoadingState.Loading) return;\n        getAccountByAccountIdData();\n    }, [\n        account.loading\n    ]);\n\n    useEffect(() => {\n        if (!accountByAccountIdData.data) return;\n        getHistoricalIncentivesByBlockHeightsData();\n    }, [\n        accountByAccountIdData.data,\n        accountByAccountIdData.loading\n    ]);\n\n    useEffect(() => {\n        if (accountByAccountIdData.loading || !accountByAccountIdData.called) return;\n        // if (historicalIncentivesByBlockHeightsData.loading || !historicalIncentivesByBlockHeightsData.called) return;\n        \n        const totalContributed = (() => {\n            return accountByAccountIdData.data?.accountByUniqueInput?.totalContributed\n                || '0'\n        })();\n\n        const contributions = contributionsFromQuery(accountByAccountIdData);\n\n        const historicalIncentives = (() => {\n            // TODO: figure out why .historicalIncentives being the wrong type was not caught by TS\n            return historicalIncentivesByBlockHeightsData.data?.historicalIncentives || []\n        })();\n\n        dispatch({\n            type: ActionType.SetAccountData,\n            payload: {\n                totalContributed,\n                contributions,\n                historicalIncentives\n            }\n        })\n    }, [\n        accountByAccountIdData,\n        historicalIncentivesByBlockHeightsData\n    ]);\n}","import log from \"loglevel\";\nimport { useEffect } from \"react\"\nimport config from \"src/config\";\nimport { ActionType } from \"src/containers/store/Actions\";\nimport { LoadingState, useChronicle, useDispatch } from \"src/containers/store/Store\"\nimport { Chronicle, useChronicleDataQuery } from \"./useQueries\";\n\nexport const useChronicleData = () => {\n    \n    const dispatch = useDispatch();\n    const chronicle = useChronicle();\n    const [getChronicleData, chronicleData] = useChronicleDataQuery();\n\n    // fetch chronicle every few seconds\n    useEffect(() => {\n        const intervalId = setInterval(() => {\n            log.debug('useChronicleData', 'fetching chronicle')\n            dispatch({\n                type: ActionType.LoadChronicleData\n            })\n        }, config.chronicleRefetchTimeout);\n\n        return () => clearInterval(intervalId);\n    }, []);\n\n    useEffect(() => {\n        if (chronicle.loading != LoadingState.Loading) return;\n        getChronicleData();\n    }, [\n        chronicle.loading\n    ]);\n\n    useEffect(() => {\n        if (chronicleData.loading || !chronicleData.called) return;\n        const _chronicle: Chronicle = (() => ({\n            // TODO: use defaults from the store\n            lastProcessedBlock: chronicleData.data?.chronicleByUniqueInput.lastProcessedBlock || '0',\n            mostRecentAuctionStart: chronicleData.data?.chronicleByUniqueInput.mostRecentAuctionStart,\n            mostRecentAuctionClosingStart: chronicleData.data?.chronicleByUniqueInput.mostRecentAuctionClosingStart\n        }))();\n\n        dispatch({\n            type: ActionType.SetChronicleData,\n            payload: _chronicle\n        })\n    }, [\n        chronicleData\n    ])\n}\n","import log from \"loglevel\";\nimport { useEffect } from \"react\"\nimport { ActionType } from \"src/containers/store/Actions\";\nimport { LoadingState, useChronicleLastProcessedBlock, useDispatch, useIncentives, useInitializedAtBlockHeight, useIsInitialDataLoaded } from \"src/containers/store/Store\";\nimport { useIncentivesDataQuery } from \"./useQueries\";\n\nexport const useIncentivesData = () => {\n    \n    const lastProcessedBlock = useChronicleLastProcessedBlock();\n    const isInitialDataLoaded = useIsInitialDataLoaded();\n    const initializedAtBlockHeight = useInitializedAtBlockHeight();\n    const dispatch = useDispatch();\n    const incentives = useIncentives();\n\n    const [getIncentivesData, incentivesData] = useIncentivesDataQuery();\n\n    useEffect(() => {\n        // do not reload incentives unless the initial data has been already fetched\n        // or if the lastProcessedBlock is 0\n        if (!isInitialDataLoaded || !lastProcessedBlock) return;\n        if (lastProcessedBlock === initializedAtBlockHeight) return;\n        dispatch({\n            type: ActionType.LoadIncentiveData\n        });\n    }, [\n        isInitialDataLoaded,\n        lastProcessedBlock,\n        initializedAtBlockHeight\n    ]);\n\n    useEffect(() => {\n        if (incentives.loading !== LoadingState.Loading) return;\n        getIncentivesData();\n    }, [\n        incentives.loading\n    ]);\n\n    useEffect(() => {\n        if (incentivesData.loading || !incentivesData.called) return;\n        if (!incentivesData.data) return;\n        // TODO: query response parsers are duplicate with initial data, needs to be unified\n        const incentives = (() => {\n            const { leadPercentageRate, totalContributionWeight, siblingParachain } = incentivesData.data?.incentiveByUniqueInput || {\n                leadPercentageRate: '0',\n                totalContributionWeight: '0',\n            };\n\n            return { \n                leadPercentageRate, \n                totalContributionWeight,\n                siblingParachain: { id: siblingParachain?.id }\n            };\n        })();\n        \n        dispatch({\n            type: ActionType.SetIncentiveData,\n            payload: incentives\n        })\n    }, [\n        incentivesData\n    ]);\n}","import BigNumber from \"bignumber.js\";\nimport { initial } from \"lodash\";\nimport log from \"loglevel\";\nimport { useEffect } from \"react\";\nimport { precisionMultiplierBN } from \"src/config\";\nimport { ActionType } from \"src/containers/store/Actions\";\nimport { useDispatch, useIsInitialDataLoaded, useIsInitialDataLoading } from \"src/containers/store/Store\"\nimport { useInitialDataQuery } from \"./useQueries\";\n\nexport const useInitialData = () => {\n    const dispatch = useDispatch();\n    const isInitialDataLoading = useIsInitialDataLoading();\n    const isInitialDataLoaded = useIsInitialDataLoaded();\n    const [getInitialData, initialData] = useInitialDataQuery()\n\n    // load initial data only once\n    useEffect(() => {\n        log.debug('useInitialData', 'loading')\n        dispatch({\n            type: ActionType.LoadInitialData\n        })\n    }, []);\n\n    // if the store says we should be loading, start loading\n    useEffect(() => {\n        if (!isInitialDataLoading || isInitialDataLoaded) return;\n        getInitialData();\n    }, [\n        isInitialDataLoading\n    ]);\n\n    useEffect(() => {\n        if (initialData.loading || !initialData.called) return;\n        if (!initialData.data) return;\n        if (!isInitialDataLoading) return;\n\n        const chronicle = (() => {\n            const { \n                lastProcessedBlock,\n                mostRecentAuctionStart,\n                mostRecentAuctionClosingStart,\n            } = initialData.data?.chronicleByUniqueInput || {\n                lastProcessedBlock: '0',\n            };\n\n            return { \n                lastProcessedBlock,\n                mostRecentAuctionStart,\n                mostRecentAuctionClosingStart,\n            };\n        })();\n\n        const ownHistoricalFundsPledged = (() => initialData.data.historicalParachainFundsPledgeds\n            .map(({ fundsPledged, blockHeight }: { [key: string]: string }) => ({ fundsPledged, blockHeight }))\n        )();\n\n        const ownParachainFundsPledged = (() => initialData.data.parachainByUniqueInput)();\n\n        const incentives = (() => {\n            const { leadPercentageRate, totalContributionWeight, siblingParachain } = initialData.data?.incentiveByUniqueInput || {\n                leadPercentageRate: '0',\n                totalContributionWeight: '0'\n            };\n\n            return { \n                leadPercentageRate, \n                totalContributionWeight,\n                siblingParachain: {\n                    id: siblingParachain?.id\n                }\n            };\n        })();\n\n        log.debug('useInitialData', 'done loading', { \n            chronicle, \n            ownHistoricalFundsPledged, \n            ownParachainFundsPledged,\n            incentives\n        });\n\n        dispatch({\n            type: ActionType.SetInitialData,\n            payload: { \n                chronicle, \n                ownHistoricalFundsPledged, \n                ownParachainFundsPledged,\n                incentives\n            }\n        });\n    }, [\n        initialData.data,\n        isInitialDataLoading\n    ])\n}","import constate from \"constate\";\nimport { useAccountData } from \"./useAccountData\";\nimport { useChronicleData } from \"./useChronicleData\";\nimport { useIncentivesData } from \"./useIncentivesData\";\nimport { useInitialData } from \"./useInitialData\";\nimport { useSiblingData } from \"./useSiblingData\";\n\nconst useDashboardData = () => {\n    // loads a bunch of data only once\n    useInitialData();\n\n    useAccountData();\n    useChronicleData();\n    useIncentivesData();\n    // useSiblingData();\n}\n\nexport const [DashboardDataProvider, useDashboardDataContext] = constate(useDashboardData);","import React from 'react';\nimport './App.css';\nimport ConfiguredApolloProvider from './containers/ApolloProvider'\nimport { StoreProvider } from './containers/store/Store';\nimport { PolkadotProvider } from './hooks/usePolkadot';\nimport { Dashboard } from './pages/Dashboard';\nimport { DashboardDataProvider } from './hooks/useDashboardData';\n\nfunction App() {\n  return (\n    <ConfiguredApolloProvider>\n      <StoreProvider>\n        <PolkadotProvider>\n          <DashboardDataProvider>\n              <Dashboard/>\n          </DashboardDataProvider>\n        </PolkadotProvider>\n      </StoreProvider>\n    </ConfiguredApolloProvider>\n  );\n}\n\nexport default App;","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport log, { LogLevelDesc } from 'loglevel'\nimport linearScale from 'simple-linear-scale';\n\n// <reference types=\"simple-linear-scale.d.ts\">\n\nlet logLevel = (() => {\n  let params = (new URL(document.location as unknown as string)).searchParams;\n  console.log('loglevel', params.get('loglevel') as LogLevelDesc);\n  return params.get('loglevel') as LogLevelDesc;\n})() || 'info'\n\nlog.setLevel(logLevel)\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}