{"version":3,"sources":["containers/store/Actions.tsx","config.tsx","containers/ApolloProvider.tsx","containers/store/Store.tsx","hooks/usePolkadot.tsx","assets/Logo-dark-2-clean.png","assets/basilisk-wallpaper-2.png","incentives/calculateBsxMultiplier.tsx","incentives/calculateHdxMultiplier.tsx","hooks/useQueries.tsx","hooks/useData.tsx","hooks/useIncentives.tsx","utils.tsx","containers/CrowdloanContributeForm.tsx","hooks/useAccountData.tsx","containers/AccountSelector.tsx","pages/Dashboard.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["ActionType","config","indexerUrl","nodeUrl","dappName","ownParachainId","params","URL","document","location","searchParams","console","log","get","ownParaId","blockTime","ownCrowdloanBlockNum","targetAuctionId","ksmOpportunityCost","ksmPrecision","ksmToUsd","hdxToUsd","incentives","precision","hdx","decimals","scale","leadPercentageDiff","min","max","rewardMultiplier","bsx","allocated","none","historicalAuctionData","1","blockNum","closingStart","closingEnd","2","3","4","client","ApolloClient","uri","cache","InMemoryCache","defaultOptions","watchQuery","fetchPolicy","query","ConfiguredApolloProvider","children","ApolloProvider","initialState","account","loading","data","address","balance","contributions","chronicle","curBlockNum","curAuctionId","curAuction","own","crowdloan","aggregatedCrowdloanBalances","sibling","historicalIncentives","reducer","state","action","debug","type","payload","newState","LoadChronicle","SetChronicle","LoadOwnData","SetOwnData","LoadSiblingData","SetSiblingData","ConnectAccount","SetAccountData","LoadHistoricalIncentivesData","SetHistoricalIncentivesData","constate","useReducer","dispatch","StoreProvider","useStoreContext","useChronicle","useOwn","useSibling","useAccount","useContributions","mockAccount","useState","accounts","setAccounts","useLocalStorage","activeAccount","setActiveAccount","activeAccountBalance","setActiveAccountBalance","setLoading","undefined","api","setApi","lastContributionStatus","setLastContributionStatus","useEffect","a","web3Enable","allInjected","web3Accounts","allAccounts","wsProvider","WsProvider","ApiPromise","create","provider","fetchBalance","system","free","toString","contribute","amount","web3FromAddress","injector","tx","BigNumber","toFixed","signAndSend","signer","status","events","isInBlock","isFinalized","filter","event","ExtrinsicFailed","is","length","e","PolkadotProvider","usePolkaDotContext","incentivesConfig","calculateBsxMultiplier","curAuctionClosingStart","curAuctionClosingEnd","bsxMultiplierScale","linearScale","hdxBonusScale","getChronicleQuery","gql","getCrowdloanByParachainIdQuery","getAggregatedCrowdloanBalancesByParachainIdQuery","getSiblingCrowdloanCandidatesQuery","getContributionsByAccountAndParachainId","getHistoricalSiblingCrowdloanCandidateBalancesQuery","getHistoricalOwnCrowdloanBalancesQuery","getAllContributionsByOwnParachainId","useCrowdloanByParachainIdQuery","parachainId","useLazyQuery","variables","useAggregatedCrowdloanBalancesByParachainIdQuery","onlySignificant","useChronicleData","getChronicle","intervalId","setInterval","clearInterval","called","parseInt","useOwnData","getOwnCrowdloan","ownCrowdloan","useOwnAggregatedCrowdloanBalancesQuery","getOwnAggregatedCrowdloanBalances","ownCrowdloanAggregatedBalances","every","crowdloans","nodes","id","raised","cap","map","ownLoading","determineSiblingParachain","siblingCrowdloanCandidates","siblingCandidates","siblingCrowdloanCandidate","valuation","siblingParachain","useSiblingData","getSiblingCrowdloanCandidates","siblingParachainId","setSiblingParachainId","getSiblingCrowdloan","siblingCrowdloan","getAggregatedSiblingCrowdloanBalances","aggregatedSiblingCrowdloanBalances","siblingLoading","calculateIncentives","ownCrowdloanValuation","siblingCrowdloanValuation","targetAuctionClosingEnd","noIncentives","hdxBonus","bsxMultiplier","isAuctionClosing","siblingParachainValuation","ownParachainValuation","isLessThanOrEqualTo","minus","dividedBy","multipliedBy","isGreaterThanOrEqualTo","calculateHdxMultiplier","useIncentives","findActiveHistoricalAuction","activeAuctions","Object","keys","auctionId","auctionData","inRange","Error","activeAuction","useHistoricalIncentivesData","blockNums","setBlockNums","useHistoricalSiblingCrowdloanCandidateBalances","getHistoricalSiblingCrowdloanCandidateBalances","historicalSiblingCrowdloanCandidateBalances","useHistoricalOwnCrowdloanBalances","getHistoricalOwnCrowdloanCandidateBalances","historicalOwnCrowdloanCandidateBalances","contributionBlockNums","contribution","candidateCrowdloansHistoricalBalances","groupBy","ownCrowdloansHistoricalBalances","validHistoricalCrowdloanCandidates","reduce","accumulator","crowdloanSiblingCandidates","activeAuctionId","historicallyValidCrowdloanSiblingCandidates","crowdloanSiblingCandidate","wonAuctionId","fund","filterHistoricallyValidCrowdloanSiblingCandidates","siblingParachainCrowdloan","find","calculateCurrentHdxReward","ksmOpportunityCostPerContribution","contributionHdxReward","plus","calculateBsxRewards","totalContributionWeight","accountWeight","accountCurrentBsxReward","contributionsWeight","isZero","calculateCurrentBsxReceived","accountMinimumBsxReward","calculateMinBsxReceived","useCalculateRewardsReceived","getAllOwnContributions","allOwnContributions","setTotalContributionWeight","currentBsxReceived","setCurrentBsxReceived","minimalBsxReceived","setMinimalBsxReceived","currentHdxReceived","setCurrentHdxReceived","contributionWeight","hdxReward","toKsmPrecision","humanAmount","exponentiatedBy","fromKsmPrecision","preciseAmount","usdToHdx","CrowdloanContributeForm","connectAccount","setAmount","currentBsxReward","rewardsReceived","setRewardsReceived","bsxRewards","noop","className","name","decimalsLimit","value","placeholder","onValueChange","disabled","onClick","useContributionsData","useContributionsByAccountAndParachainId","contributionsByAccountAndParachainId","accountContributions","setAccountContributions","useTotalKsmContributed","totalKsmContributed","AccountSelector","onAccountSelect","ref","useRef","useClickAway","_","meta","Chart","register","annotationPlugin","millifyOptions","defaults","animation","colors","useDashboardData","accountData","useAccountData","isDashboardEssentialDataLoading","useMemo","Dashboard","showAccountSelector","setShowAccountSelector","targetAuction","labels","range","lineChartBlockNumScale","progressBarScale","lineChartData","datasets","label","borderColor","yAxisID","aggregatedCrowdloanBalance","concat","backgroundColor","fill","labelOptions","position","enabled","color","font","family","size","xAdjust","cornerRadius","lineChartOptions","pointRadius","responsive","maintainAspectRatio","scales","x","display","crowdloanCap","plugins","tooltip","legend","autocolors","annotation","annotations","auctionStart","borderWidth","borderDash","scaleID","content","yAdjust","now","ownRaised","millify","parseFloat","siblingRaised","isLineChartDataLoading","href","target","src","bsxEye","options","style","width","bsxWallpaper","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","logLevel","setLevel","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.05866994.chunk.js","sourcesContent":["import { AccountState, HistoricalIncentives, ParachainCrowdloanState } from \"./Store\";\nimport { Chronicle } from './../../hooks/useQueries';\n\nexport enum ActionType {\n    LoadChronicle = 'LOAD_CHRONICLE',\n    SetChronicle = 'SET_CHRONICLE',\n\n    LoadOwnData = 'LOAD_OWN_DATA',\n    SetOwnData = 'SET_OWN_DATA',\n\n    LoadSiblingData = 'LOAD_SIBLING_DATA',\n    SetSiblingData = 'SET_SIBLING_DATA',\n\n    ConnectAccount = 'CONNECT_ACCOUNT',\n    SetAccountData = 'SET_ACCOUNT_DATA',\n\n    LoadHistoricalIncentivesData = 'LOAD_HISTORICAL_INCENTIVES_DATA',\n    SetHistoricalIncentivesData = 'SET_HISTORICAL_INCENTIVES_DATA'\n};\n\nexport type ActionWithoutPayload = {\n    type: ActionType\n    payload?: null\n};\n\nexport type SetChronicle = {\n    type: ActionType.SetChronicle,\n    payload: Chronicle\n}\n\nexport type SetOwnData = {\n    type: ActionType.SetOwnData,\n    payload: ParachainCrowdloanState\n}\n\nexport type SetSiblingData = {\n    type: ActionType.SetSiblingData,\n    payload: ParachainCrowdloanState\n}\n\nexport type SetAccountData = {\n    type: ActionType.SetAccountData,\n    payload: AccountState\n}\n\nexport type SetHistoricalIncentivesData = {\n    type: ActionType.SetHistoricalIncentivesData,\n    payload: HistoricalIncentives\n}\n\n\nexport type Action = \n    | ActionWithoutPayload\n    | SetChronicle\n    | SetOwnData\n    | SetSiblingData\n    | SetAccountData\n    | SetHistoricalIncentivesData","const config = {\n    // indexerUrl: 'http://localhost:3000',\n    // indexerUrl: 'https://ksm-arch.hydration.cloud/',\n    indexerUrl: 'https://api-crowdloan-basilisk.hydradx.io/',\n    nodeUrl: 'wss://ksm-arch.hydration.cloud:1144',\n    dappName: 'Basilisk Crowdloan',\n    // used to fetch own crowdloan & bid data for incentive calculation\n    // and graph rendering\n    // shiden\n    // ownParachainId: '2007-Ekf4HssuTpYjmUEvzy9AAFuqpUcNm9AAkrMF1stTU6Mo1hR',\n    // khala\n    // ownParachainId: '2004-DaEJPYPCJQnKeHGfV6SSF8WPWtLg9zggbWwAwCZRWVPeWvv',\n    // bifrost\n    // ownParachainId: \"2001-GLiebiQp5f6G5vNcc7BgRE9T3hrZSYDwP6evERn3hEczdaM\",\n    // first crowdloan registred\n    // ownParachainId: \"2000-Gq2No2gcF6s4DLfzzuB53G5opWCoCtK9tZeVGRGcmkSDGoK\",\n    ownParachainId: (() => {\n        let params = (new URL(document.location as unknown as string)).searchParams;\n        console.log('ownParachainId', params.get('ownParachainId'));\n        return params.get(\"ownParachainId\");\n    })() || \"2082-FcbeWvFfqsNj6D8F3gg45pHYRAAsFAdCApCnRUJ5TX71mPg\",\n    ownParaId: \"2082\",\n    // used to fetch the indexer chronicle periodically\n    // alternativelly plug-in polkadot.js and watch for new blocks instead\n    blockTime: 6000,\n    // used to fetch data newer than this block, especially for the graph\n    // ownCrowdloanBlockNum: 8106771,\n    ownCrowdloanBlockNum: 8228873,\n    // oldest crowdloan blockNum\n    // ownCrowdloanBlockNum: 7830323,\n    // used to calculated incentives based on curAuctionId\n    targetAuctionId: 4,\n\n    // value lost by not staking your KSM\n    ksmOpportunityCost: '0.1375',\n    ksmPrecision: 12,\n    // TODO: feetch ksm price dynamically\n    ksmToUsd: '205.20',\n    hdxToUsd: '0.0859',\n\n    incentives: {\n        precision: 50,\n        hdx: {\n            decimals: 12,\n            scale: {\n              leadPercentageDiff: {\n                min: 0,\n                max: 0.1\n              },\n              /**\n               * Lower the absoulute lead percentage diff, higher the reward\n               */\n              rewardMultiplier: {\n                min: 0.3,\n                max: 0.05\n              }\n            },       \n          },\n          bsx: {\n              decimals: 12,\n              // 15bn with 12 decimals\n              allocated: '15000000000000000000000',\n              scale: {\n                rewardMultiplier: {\n                  min: 1,\n                  max: 0,\n                  // separate configuration for no incentives\n                  // in case that the minimal bsx multiplier won't be 0\n                  // if the incentive program changes\n                  none: 0\n                }\n              }\n          }\n    },\n    historicalAuctionData: {\n      1: {\n          blockNum: 7924237,\n          closingStart: 7951237,\n          closingEnd: 8023773\n      },\n      2: {\n          blockNum: 8024552, // 779 blocks since closingEnd\n          closingStart: 8051552,\n          closingEnd: 8123989,\n      },\n      3: {\n          blockNum: 8124516, // 527 blocks since closing end\n          closingStart: 8151516,\n          closingEnd: 8223516\n      },\n      4: {\n        blockNum: 8224581,\n        closingStart: 8251581,\n        closingEnd: 8323581\n    }\n  }\n};\n\nexport default config;","import {\n    ApolloClient,\n    InMemoryCache,\n    ApolloProvider,\n} from '@apollo/client'\n\nimport config from '../config'\n\nconst client = new ApolloClient({\n    uri: config.indexerUrl,\n    cache: new InMemoryCache(),\n    defaultOptions: {\n        watchQuery: {\n            fetchPolicy: 'network-only'\n        },\n        query: {\n            fetchPolicy: 'network-only'\n        }\n    }\n})\n\ntype props = {}\nconst ConfiguredApolloProvider = ({children}: React.PropsWithChildren<props>) => (\n    <ApolloProvider client={client}>\n        {children}\n    </ApolloProvider>\n);\nexport default ConfiguredApolloProvider;","import { useReducer } from 'react';\nimport constate from 'constate';\nimport { AggregatedCrowdloanBalance, Crowdloan, Chronicle, Contribution } from 'src/hooks/useQueries';\nimport { ActionType, Action, SetChronicle, SetOwnData, SetSiblingData, SetAccountData, SetHistoricalIncentivesData } from './Actions';\nimport log from 'loglevel';\n\nexport type ParachainCrowdloanState = {\n    crowdloan: null | Crowdloan,\n    aggregatedCrowdloanBalances: null | AggregatedCrowdloanBalance[]\n};\n\nexport type AccountState = {\n    address: null | string,\n    balance: null | string,\n    contributions: Contribution[]\n};\n\nexport interface Incentive {\n    hdxBonus: string,\n    blockNum: number,\n    siblingParachainId: string\n}\n\nexport interface HistoricalIncentives {\n    [blockNum: number]: Incentive\n}\n\nexport interface Rewards {\n    currentBsxReceived: null | string,\n    minimalBsxReceived: null | string,\n    currentHdxReceived: null | string\n}\n\nexport type State = {\n    account: {\n        loading: boolean,\n        data: AccountState\n    },\n    chronicle: {\n        loading: boolean,\n        data: Chronicle\n    },\n    own: {\n        loading: boolean,\n        data: ParachainCrowdloanState\n    }\n    sibling: {\n        loading: boolean,\n        data: ParachainCrowdloanState\n    },\n    historicalIncentives: {\n        loading: boolean,\n        data: HistoricalIncentives\n    }\n};\n\nconst initialState: State = {\n    account: {\n        loading: false,\n        data: {\n            address: null,\n            balance: \"0\",\n            contributions: []\n        }\n    },\n    chronicle: {\n        loading: false,\n        data: {\n            curBlockNum: 0,\n            curAuctionId: 0,\n            curAuction: {\n                closingStart: null,\n                closingEnd: null,\n                blockNum: null\n            }\n        }\n    },\n    own: {\n        loading: false,\n        data: {\n            crowdloan: null,\n            aggregatedCrowdloanBalances: []\n        }\n    },\n    sibling: {\n        loading: false,\n        data: {\n            crowdloan: null,\n            aggregatedCrowdloanBalances: []\n        }\n    },\n    historicalIncentives: {\n        loading: false,\n        data: {}\n    }\n};\n\nconst reducer = (state: State, action: Action) => {\n    log.debug('Store', 'action', action.type, action.payload, state);\n    const newState = (() => {\n        switch (action.type) {\n            /**\n             * Chronicle\n             */\n            case ActionType.LoadChronicle:\n                return {\n                    ...state,\n                    chronicle: {\n                        ...state.chronicle,\n                        loading: true\n                    }\n                }\n            case ActionType.SetChronicle:\n                return {\n                    ...state,\n                    chronicle: {\n                        ...state.chronicle,\n                        loading: false,\n                        // TODO: figure out how to use type union without having to type cast\n                        data: (action as SetChronicle).payload\n                    }\n                }\n    \n            case ActionType.LoadOwnData:\n                return {\n                    ...state,\n                    own: {\n                        ...state.own,\n                        loading: true\n                    }\n                }\n    \n            case ActionType.SetOwnData:\n                return {\n                    ...state,\n                    own: {\n                        ...state.own,\n                        loading: false,\n                        data: (action as SetOwnData).payload\n                    }\n                }\n\n            case ActionType.LoadSiblingData:\n                return {\n                    ...state,\n                    sibling: {\n                        ...state.sibling,\n                        loading: true\n                    }\n                }\n\n            case ActionType.SetSiblingData:\n                return {\n                    ...state,\n                    sibling: {\n                        loading: false,\n                        data: (action as SetSiblingData).payload,\n                    }\n                }\n\n            case ActionType.ConnectAccount:\n                return {\n                    ...state,\n                    account: {\n                        ...initialState.account,\n                        loading: true,\n                    }\n                }\n                \n\n            case ActionType.SetAccountData:\n                return {\n                    ...state,\n                    account: {\n                        ...state.account,\n                        loading: false,\n                        data: (action as SetAccountData).payload\n                    }\n                }\n\n            case ActionType.LoadHistoricalIncentivesData:\n                return {\n                    ...state,\n                    historicalIncentives: {\n                        ...state.historicalIncentives,\n                        loading: true\n                    }\n                }\n\n            case ActionType.SetHistoricalIncentivesData:\n                return {\n                    ...state,\n                    historicalIncentives: {\n                        ...state.historicalIncentives,\n                        loading: false,\n                        data: (action as unknown as SetHistoricalIncentivesData).payload\n                    }\n                }\n\n            default:\n                return state;\n        }\n    })()\n\n    log.debug('Store', 'newState', newState);\n    return newState;\n};\n\nconst useStore = () => {\n    const [state, dispatch] = useReducer(reducer, initialState);\n    return { state, dispatch };\n}\n\nconst [StoreProvider, useStoreContext] = constate(useStore);\n\nconst useChronicle = () => {\n    const { state } = useStoreContext();\n    return state.chronicle;\n}\n\nconst useOwn = () => {\n    const { state } = useStoreContext();\n    return state.own;\n}\n\nconst useSibling = () => {\n    const { state } = useStoreContext();\n    return state.sibling;\n}\n\nconst useAccount = () => {\n    const { state } = useStoreContext();\n    return state.account;\n}\n\nconst useContributions = () => {\n    const account = useAccount();\n    return account.data.contributions;\n}\n\nconst useHistoricalIncentives = () => {\n    const { state } = useStoreContext();\n    return state.historicalIncentives;\n}\n\nexport {\n    StoreProvider,\n    ActionType,\n\n    useStoreContext,\n\n    useChronicle,\n    useOwn,\n    useSibling,\n    useAccount,\n    useContributions,\n    useHistoricalIncentives\n}","import { ApiPromise, WsProvider } from '@polkadot/api';\nimport {\n    web3Accounts,\n    web3Enable,\n    web3FromAddress,\n    web3ListRpcProviders,\n    web3UseRpcProvider\n  } from '@polkadot/extension-dapp';\nimport { useEffect, useState } from 'react';\nimport { useLocalStorage } from 'react-use';\nimport config from './../config';\nimport constate from 'constate';\nimport log from 'loglevel';\nimport { Signer } from '@polkadot/api/types';\nimport BigNumber from 'bignumber.js';\nimport { useChronicle } from 'src/containers/store/Store';\n\nconst mockAccount = {\n    // 400+ bifrost contributions from this address\n    // address: 'Ge1LJP92bS9wKxKGpkBbu8LcGD5vdfugNyaqxnaZXD9edfT',\n    // one bifrost contribution\n    // address: \"DFfX8mydSrTadbXYfLzv1vkR53awtqshNxqpSusAn63t2xe\",\n    // several early contribution to 2000-Gq2No2gcF6s4DLfzzuB53G5opWCoCtK9tZeVGRGcmkSDGoK\n    // address: \"Em9CzTD4q3zAD5gjAKS5bzUYCDq2jhLXcM66PvJvaFbmTN8\",\n    // \n    // address: 'Ga7qfpHpNWW2jtUCuQawANkjP1xL4dCMDkhpUbH9TgvFUB4',\n    // address: \"D5CVLHRhookKgoYLrszyuF4yxNPpHCFBAMZEzL7xUGtwkgG\",\n    address: (() => {\n        let params = (new URL(document.location as unknown as string)).searchParams;\n        log.debug('account', params.get('account'));\n        return params.get(\"account\");\n    })() || \"\",\n}\n\nexport const usePolkadot = () => {\n    const [accounts, setAccounts] = useState<any[]>([]);\n    // current active account persisted at the local storage between reloads\n    // allow injecting of a mock account address\n    const [activeAccount, setActiveAccount] = useLocalStorage<string>(\"bsx-crowdloan-account\", mockAccount.address);\n    const [activeAccountBalance, setActiveAccountBalance] = useState(\"0\");\n    const [showAccountSelector, setShowAccountSelector] = useState(false);\n    const [loading, setLoading] = useState(false);\n    const [api, setApi] = useState<ApiPromise | undefined>(undefined)\n    const [lastContributionStatus, setLastContributionStatus] = useState<boolean | undefined>(undefined);\n    const chronicle = useChronicle();\n\n    /**\n     * Configure polkadot.js at the start\n     */\n    useEffect(() => {\n        (async () => {\n            log.debug('usePolkadot', 'loading initial');\n            setLoading(true);\n            const allInjected = await web3Enable(config.dappName);\n            const allAccounts = await web3Accounts();\n\n            const wsProvider = new WsProvider(config.nodeUrl);\n            const api = await ApiPromise.create({\n                provider: wsProvider\n            });\n\n            log.debug('usePolkadot', 'loaded', allInjected, api);\n            setAccounts(allAccounts);\n            setApi(api);\n            setLoading(false);\n        })()\n    }, [])\n\n    const fetchBalance = async () => {\n        if (!api || !activeAccount) return;\n        const { data: balance } = await api.query.system.account(activeAccount);\n        log.debug('usePolkadot', 'balance', balance.free.toString());\n        setActiveAccountBalance(balance.free.toString())\n    }\n    useEffect(() => {\n        if (!activeAccount) return;\n        if (!api) return\n        fetchBalance();\n    }, [\n        activeAccount,\n        api,\n        chronicle.data.curBlockNum\n    ]);\n\n    const contribute = async (amount: string) => {\n        if (!api) return;\n        if (!activeAccount) return;\n        \n        setLoading(true);\n\n        const injector = await web3FromAddress(activeAccount);\n\n        (async () => {\n            try {\n                api.tx.crowdloan.contribute(\n                    config.ownParaId,\n                    new BigNumber(amount).toFixed(0),\n                    null\n                )\n                .signAndSend(\n                    activeAccount,\n                    {\n                        signer: injector.signer\n                    },\n                    ({ status, events }) => {\n                        if (status.isInBlock || status.isFinalized) {\n                            events\n                                .filter(({ event }) => api.events.system.ExtrinsicFailed.is(event))\n                                .length\n                                ? setLastContributionStatus(false)\n                                : setLastContributionStatus(true);\n                        }\n                    }\n                )\n                fetchBalance();\n            } catch (e) {\n                setLastContributionStatus(false);\n            }\n\n            setLoading(false);\n        })();\n    }\n\n    return {\n        accounts,\n        setActiveAccount,\n        activeAccount,\n        activeAccountBalance,\n        lastContributionStatus,\n        contribute\n    }\n}\n\nexport const [PolkadotProvider, usePolkaDotContext] = constate(usePolkadot);","export default __webpack_public_path__ + \"static/media/Logo-dark-2-clean.cbd38319.png\";","export default __webpack_public_path__ + \"static/media/basilisk-wallpaper-2.cc01249c.png\";","import linearScale from 'simple-linear-scale'\nimport config from '../config'\nimport log from 'loglevel';\n\nconst incentivesConfig = config.incentives;\n\nexport const calculateBsxMultiplier = (\n    curBlockNum: number, \n    curAuctionId: null | number,\n    curAuctionClosingStart: null | number,\n    curAuctionClosingEnd: null | number,\n) => {\n    log.debug('calculateBsxMultiplier', curAuctionId);\n    // if a contribution is newer than the target auction, it is not considered\n    if (curBlockNum >= (config.historicalAuctionData as any)[config.targetAuctionId].closingEnd) return incentivesConfig.bsx.scale.rewardMultiplier.none;\n    // if we're in targetAuctionId - 1, return full bsx multiplier\n    if ((curAuctionId || 0) < config.targetAuctionId) return incentivesConfig.bsx.scale.rewardMultiplier.min;\n    // There is no curAuctionId, therefore no closing start/end information either.\n    // Which means there is no auction registred yet therefore we return the full multiplier.\n    if (!curAuctionClosingStart || !curAuctionClosingEnd) return incentivesConfig.bsx.scale.rewardMultiplier.min;\n\n    /**\n     * Linear scale used to determine the reward multiplier\n     * resulting from a range of possible lead percentage diffs.\n     */\n    const bsxMultiplierScale = linearScale(\n        [\n            curAuctionClosingStart,\n            curAuctionClosingEnd\n        ],\n        [\n            incentivesConfig.bsx.scale.rewardMultiplier.min,\n            incentivesConfig.bsx.scale.rewardMultiplier.max\n        ]\n    )\n    \n    const isAuctionClosing = curBlockNum >= curAuctionClosingStart;\n    // if the auction is not closing, return the full bsx multiplier\n    if (!isAuctionClosing) return incentivesConfig.bsx.scale.rewardMultiplier.min\n    \n    /**\n     * If the auction is closing, calculate the multipler on a scale\n     * from curAuctionClosingStart to curAuctionClosingEnd\n     * using the curBlockNum\n     */\n    return bsxMultiplierScale(curBlockNum)\n}","/**\n * This library has the same top level api as d3Scale\n */\nimport BigNumber from 'bignumber.js';\nimport linearScale from 'simple-linear-scale'\nimport config from '../config'\nimport log from 'loglevel';\n\nconst incentivesConfig = config.incentives;\n\n/**\n * Linear scale used to determine the reward multiplier\n * resulting from a range of possible lead percentage diffs.\n */\nconst hdxBonusScale = linearScale(\n    [\n        incentivesConfig.hdx.scale.leadPercentageDiff.min,\n        incentivesConfig.hdx.scale.leadPercentageDiff.max\n    ],\n    [\n        incentivesConfig.hdx.scale.rewardMultiplier.min,\n        incentivesConfig.hdx.scale.rewardMultiplier.max\n    ]\n)\n\n/**\n * \n * @param siblingParachainValuation \n * @param ownParachainValuation \n * @param isAuctionClosing \n */\nexport const calculateHdxMultiplier = (\n    siblingParachainValuation: BigNumber, \n    ownParachainValuation: BigNumber, \n    isAuctionClosing: boolean\n) => {\n    // TODO: Should this be applied or not?\n    /**\n     * If the auction is not in the closing phase,\n     * return the maximum reward multiplier\n     */\n    // if (!isAuctionClosing) {\n    //     return incentivesConfig.hdx.scale.rewardMultiplier.min;\n    // }\n    \n    /**\n     * If our own auction has raised less money than the sibling auction,\n     * then return the maximal reward multiplier\n     * \n     * NOTE: it's called `min` within the scale config,\n     */\n    if (ownParachainValuation.isLessThanOrEqualTo(siblingParachainValuation)) {\n        return incentivesConfig.hdx.scale.rewardMultiplier.min;\n    }\n\n    /**\n     * Calculate the % diff for which our own auction is winning,\n     * relative to the amount raised by our own auction.\n     *  \n     * Assuming that ownFundsRaised > siblingFundRaised\n     * \n     * This calculation can be verified here:\n     * https://www.wolframalpha.com/input/?i=percent+difference&assumption=%7B%22F%22%2C+%22PercentDifference%22%2C+%22number2%22%7D+-%3E%2241216215268999930%22&assumption=%7B%22F%22%2C+%22PercentDifference%22%2C+%22number1%22%7D+-%3E%22137017971757623070%22\n     */\n    const leadPercentageDiff = siblingParachainValuation\n            .minus(ownParachainValuation)\n            .dividedBy(ownParachainValuation)\n            .multipliedBy(-1)\n        \n\n    log.debug('calculateHdxMultiplier', 'leadPercentageDiff',\n        ownParachainValuation.toFixed(0),\n        siblingParachainValuation.toFixed(0),\n        leadPercentageDiff.toFixed(config.incentives.precision)\n    );\n\n    /**\n     * If our auction is leading by more than `x` percent, return the minimal reward multiplier.\n     */    \n    const hdxBonus = leadPercentageDiff.isGreaterThanOrEqualTo(incentivesConfig.hdx.scale.leadPercentageDiff.max)\n        ? incentivesConfig.hdx.scale.rewardMultiplier.max\n        /**\n         * Unless any of the specific reward multiplier calculation conditions were met,\n         * calculate the appropriate HDX reward multiplier depending on the % lead of our own auction.\n         */\n        : hdxBonusScale(leadPercentageDiff)\n    \n    log.debug('calculateHdxMultiplier', 'hdxBonus', hdxBonus);\n\n    return hdxBonus;\n};\n","import { gql, useLazyQuery } from \"@apollo/client\";\nimport config from '../config';\n\nexport type Auction = {\n    blockNum: null | number\n    closingStart: null | number,\n    closingEnd: null | number\n};\n\nexport type Chronicle = {\n    curBlockNum:  number,\n    curAuctionId: null | number,\n    curAuction: Auction\n};\n\nexport type Contribution = {\n    account: string,\n    amount: string,\n    parachainId: string,\n    blockNum: number\n};\n\nexport type Crowdloan = {\n    id: string,\n    // KSM cap\n    cap: number,\n    // KSM raised\n    raised: string,\n    // parachainId which the crowdloan belongs to\n    parachainId: string,\n    // blockNum when the crowdloan was registred, NOT when it was last updated\n    blockNum: number\n}\n\nexport type AggregatedCrowdloanBalance = {\n    id: string,\n    // blockNum for which the data was aggregated\n    blockNum: number,\n    // snapshot of KSM raised at the given blockNum\n    raised: string,\n    parachainId: string\n}\n\n// fetch only data newer than this block in some cases\n// TODO: replace with real blockNum when the BSX crowdloan starts\nconst ownCrowdloanBlockNum = config.ownCrowdloanBlockNum;\n\n/**\n * Queries\n */\n// ID of the chronicle in the indexer db\nconst chronicleKey = \"ChronicleKey\"\nconst chronicle = `\n    chronicle(id: \"${chronicleKey}\") {\n        curBlockNum\n        curAuctionId,\n        curAuction {\n            closingStart,\n            closingEnd\n        }\n    }\n`\n\n// query to fetch the chronicle\nexport const getChronicleQuery = gql`\n    query chronicle {\n        ${chronicle}\n    }\n`\n\n// which crowdloan fields to fetch at any query involving a crowdloan\nconst crowdloanFields = `\n    nodes{\n        id,\n        cap,\n        raised,\n        parachainId,\n        blockNum\n    }\n`\n\n// query to fetch a crowdloan that matches the ownParachainId\nexport const getCrowdloanByParachainIdQuery = gql`\n    query ownCrowdloan($parachainId: String) {\n        crowdloans(filter: {\n            parachainId: {\n                equalTo: $parachainId\n            }\n        }){\n            ${crowdloanFields}\n        }\n    }\n`\n\n// query to fetch aggregated crowdloan balances for the given parachainId\nexport const getAggregatedCrowdloanBalancesByParachainIdQuery = gql`\n    query getAggregatedCrowdloanBalances($parachainId: String, $onlySignificant: Boolean, $ownCrowdloanBlockNum: Int) {\n        aggregatedCrowdloanBalances(\n            filter: { \n                parachainId: { equalTo: $parachainId },\n                isSignificant: { equalTo: $onlySignificant }\n                blockNum: {\n                    greaterThanOrEqualTo: $ownCrowdloanBlockNum\n                }\n            },\n            orderBy: BLOCK_NUM_ASC\n        ) {\n            nodes {\n                id,\n                blockNum,\n                raised,\n                parachainId\n            }\n        }\n    }\n`\n\n/**\n * Query to fetch the sibling crowdloan candidates.\n * Fetching the top two largest crowdloans, that are not ours,\n * allows us to either determine by what margin we are loosing, or winning.\n */\nexport const getSiblingCrowdloanCandidatesQuery = gql`\n    query siblingCrowdloanCandidates($ownParachainId: String) {\n        crowdloans(\n            filter: { \n                parachainId: { notEqualTo: $ownParachainId }\n                isFinished: { notEqualTo: true }\n                # only crowdloans that have not won an auction yet\n                wonAuctionId: { isNull: true }\n            }\n            first: 2\n            orderBy: RAISED_DESC\n        ) {\n            nodes {\n                blockNum\n                id\n                raised\n                parachainId\n            }\n        }\n    }\n`\n\n/**\n * We need to get all historical contributions of a given address\n * to the given parachainId, no matter how old they are.\n */\nexport const getContributionsByAccountAndParachainId = gql`\n    query contributionsByAddressAndParachainId($account: String, $parachainId: String, $ownCrowdloanBlockNum: Int) {\n        contributions(\n            filter:{\n                account: {\n                    equalTo: $account\n                },\n                parachainId: {\n                    equalTo: $parachainId\n                },\n                blockNum: {\n                    greaterThan: $ownCrowdloanBlockNum\n                }\n            }\n        ){\n            nodes{\n                amount,\n                account,\n                parachainId,\n                blockNum\n            }\n        }\n    }\n`\n\nexport const getHistoricalSiblingCrowdloanCandidateBalancesQuery = gql`\n    query historicalSiblingCrowdloanCandidates($ownParachainId: String, $blockNums: [Int!]) {\n        aggregatedCrowdloanBalances(\n            filter: { \n                parachainId: { notEqualTo: $ownParachainId }\n                blockNum: { in: $blockNums }\n            }\n            orderBy: RAISED_DESC\n        ) {\n            nodes {\n                blockNum\n                id\n                raised\n                parachainId,\n                fund {\n                    wonAuctionId\n                }\n            }\n        }\n    }\n`;\n\nexport const getHistoricalOwnCrowdloanBalancesQuery = gql`\n    query historicalSiblingCrowdloanCandidates($ownParachainId: String, $blockNums: [Int!]) {\n        aggregatedCrowdloanBalances(\n            filter: { \n                parachainId: { equalTo: $ownParachainId }\n                # only crowdloans that have not won an auction yet\n                # wonAuctionId: { isNull: true }\n                blockNum: { in: $blockNums }\n            }\n        ) {\n            nodes {\n                blockNum\n                id\n                raised\n                parachainId,\n            }\n        }\n    }\n`;\n\nexport const getAllContributionsByOwnParachainId = gql`\n    query contributions($ownParachainId: String, $ownCrowdloanBlockNum: Int) {\n        contributions(filter:{\n            parachainId: {\n                equalTo: $ownParachainId\n            },\n            blockNum:{\n                greaterThan: $ownCrowdloanBlockNum\n            },\n        }) {\n            totalCount,\n            nodes{\n                blockNum,\n                amount\n            }\n        }\n    }\n`\n\n/**\n * Hooks\n */\n// hook to fetch the latest indexer chronicle\nexport const useChronicleQuery = () => useLazyQuery(getChronicleQuery)\n\nexport const useCrowdloanByParachainIdQuery = (parachainId: string) => useLazyQuery(getCrowdloanByParachainIdQuery, {\n    variables: {\n        parachainId\n    }\n})\n\n// hook to fetch our own crowdloan\nexport const useOwnCrowdloanQuery = () => useCrowdloanByParachainIdQuery(config.ownParachainId);\n\n// hook to fetch aggregated crowdloan balances by parachain id\nexport const useAggregatedCrowdloanBalancesByParachainIdQuery = (variables: any) => useLazyQuery(getAggregatedCrowdloanBalancesByParachainIdQuery, { \n    variables: {\n        onlySignificant: true,\n        // minBlockNum should be since our crowdloan started (crowdloan.blockNum)\n        ownCrowdloanBlockNum: ownCrowdloanBlockNum,\n        ...variables\n    }\n});\n\n// hook to fetch aggregated crowdloan balances using ownParachainId\nexport const useOwnAggregatedCrowdloanBalancesQuery = (variables: any = {}) => useAggregatedCrowdloanBalancesByParachainIdQuery({\n    parachainId: config.ownParachainId,\n    ...variables\n});\n\nexport const useSiblingCrowdloanCandidatesQuery = () => useLazyQuery(getSiblingCrowdloanCandidatesQuery, {\n    variables: {\n        ownParachainId: config.ownParachainId\n    }\n})\n\nexport const useContributionsByAccountAndParachainId = (account: string, parachainId: string) => useLazyQuery(getContributionsByAccountAndParachainId, {\n    variables: {\n        account,\n        parachainId,\n        ownCrowdloanBlockNum: config.ownCrowdloanBlockNum\n    }\n})\n\nexport const useHistoricalSiblingCrowdloanCandidateBalances = (blockNums: number[]) => useLazyQuery(getHistoricalSiblingCrowdloanCandidateBalancesQuery, {\n    variables: {\n        ownParachainId: config.ownParachainId,\n        // at what blockNum are we looking for historical crowdloan sibling candidates?\n        blockNums\n    }\n})\n\nexport const useHistoricalOwnCrowdloanBalances = (blockNums: number[]) => useLazyQuery(getHistoricalOwnCrowdloanBalancesQuery, {\n    variables: {\n        ownParachainId: config.ownParachainId,\n        // at what blockNum are we looking for historical crowdloan sibling candidates?\n        blockNums\n    }\n})\n\nexport const useAllOwnContributions = () => useLazyQuery(getAllContributionsByOwnParachainId, {\n    variables: {\n        ownParachainId: config.ownParachainId,\n        ownCrowdloanBlockNum: config.ownCrowdloanBlockNum\n    }\n});","import { useChronicleQuery, useOwnAggregatedCrowdloanBalancesQuery, useOwnCrowdloanQuery, AggregatedCrowdloanBalance, useSiblingCrowdloanCandidatesQuery, useAggregatedCrowdloanBalancesByParachainIdQuery, useCrowdloanByParachainIdQuery, useContributionsByAccountAndParachainId, getContributionsByAccountAndParachainId } from './useQueries';\nimport { useEffect, useState } from 'react';\nimport { every } from 'lodash';\nimport { ActionType, useAccount, useContributions, useStoreContext } from 'src/containers/store/Store';\nimport { useChronicle, useSibling, useOwn } from '../containers/store/Store';\nimport log from 'loglevel';\nimport config from 'src/config';\n\n/**\n * Hook to get & set latest chronicle from the indexer.\n * Observes `chronicle.loading` as a trigger to start loading\n * the latest chronicle.\n */\nconst useChronicleData = () => {\n    // use the lazy chronicle query\n    const [getChronicle, chronicle] = useChronicleQuery()\n    // we will save the new chronicle to the store\n    const { state, dispatch } = useStoreContext()\n\n    /**\n     * Watch `state.chronicle.loading`, if it changes to `true`\n     * then run the getChronicle query.\n     */\n    useEffect(() => {\n        log.debug('useChronicleData', 'state.chronicle.loading', state.chronicle.loading)\n        if (state.chronicle.loading) getChronicle();\n    }, [\n        state.chronicle.loading,\n        getChronicle\n    ])\n\n    useEffect(() => {\n        const intervalId = setInterval(() => {\n            //if(chronicle.loading) return;\n            getChronicle()\n        }, config.blockTime);\n        return () => {\n            clearInterval(intervalId)\n        };\n    }, [])\n\n    /**\n     * Watch `chronicle` data from the `getChronicle` query.\n     * When it changes while the query has finished loading,\n     * save the chronicle to the store.\n     */\n    useEffect(() => {\n        // TODO: also check for errors \n        if (!chronicle.called || chronicle.loading) return;\n        log.debug('useChronicleData', 'chronicle', chronicle)\n        if(!chronicle.data) return;\n\n        dispatch({\n            type: ActionType.SetChronicle,\n            payload: {\n                curBlockNum: chronicle.data.chronicle.curBlockNum,\n                curAuctionId: chronicle.data.chronicle.curAuctionId \n                    ? parseInt(chronicle.data.chronicle.curAuctionId)\n                    : 0,\n                curAuction: {\n                    closingStart: chronicle.data.chronicle.curAuction?.closingStart,\n                    closingEnd: chronicle.data.chronicle.curAuction?.closingEnd,\n                    blockNum: chronicle.data.chronicle.curAuction?.blockNum,\n                }\n            }\n        })\n    }, [\n        chronicle,\n        dispatch\n    ])\n\n    return {\n        chronicle: state.chronicle\n    };\n}\n\n/**\n * Hook to fetch both own crowdloan data & own aggregated crowdloan balances (for the graph)\n * Observes `chronicle.data.curBlockNum`\n */\nconst useOwnData = () => {\n    // use own crowdloan & own aggregated crowdloan balances queries\n    const [getOwnCrowdloan, ownCrowdloan] = useOwnCrowdloanQuery();\n    const [getOwnAggregatedCrowdloanBalances, ownCrowdloanAggregatedBalances] = useOwnAggregatedCrowdloanBalancesQuery()\n    // we will store the result of the query calls in the store\n    const { dispatch } = useStoreContext();\n    // use the chronicle as a trigger for own data fetching\n    const chronicle = useChronicle();\n    const own = useOwn();\n\n    /**\n     * Watch `chronicle.data.curBlockNum` and when it changes,\n     * trigger fetching of our own crowdloan & aggregated balances data.\n     */\n    useEffect(() => {\n        log.debug('useOwnData', 'chronicle changed, loading own data', ownCrowdloan.loading, ownCrowdloanAggregatedBalances.loading);\n        // TODO: error handling\n        if (ownCrowdloan.loading || ownCrowdloanAggregatedBalances.loading) return;\n        dispatch({\n            type: ActionType.LoadOwnData\n        });\n    }, [\n        chronicle.data.curBlockNum,\n        ownCrowdloan.loading,\n        ownCrowdloanAggregatedBalances.loading,\n        dispatch\n    ])\n\n    /**\n     * Watch `state.own.loading` and when it changes, run all\n     * the necessary queries for own data.\n     */\n    useEffect(() => {\n        log.debug('useOwnData', 'state.own.loading', own.loading);\n        if (!own.loading) return;\n        log.debug('useOwnData', 'getOwnCrowdloan');\n        getOwnCrowdloan();\n        // TODO: split it up because aggregated crowdloan balance requires blockNum from ownCrowdloan\n        // alternatively just use a fixed blockNum from config for now\n        log.debug('useOwnData', 'getOwnCrowgetOwnAggregatedCrowdloanBalancesdloan');\n        getOwnAggregatedCrowdloanBalances();\n    }, [\n        own.loading,\n        getOwnCrowdloan,\n        getOwnAggregatedCrowdloanBalances\n    ])\n\n    /**\n     * Determine if own data is loading by combining loading states\n     * of all the subsequent queries\n     */\n    const loading = every([\n        ownCrowdloan.loading,\n        ownCrowdloanAggregatedBalances.loading,\n        !ownCrowdloanAggregatedBalances.called\n    ]);\n\n    log.debug('useOwnData', 'loading', loading);\n\n    /**\n     * Watch all own data queries, and when they finish,\n     * parse the received data into a format required for the global data store\n     * and save it.\n     */\n    useEffect(() => {\n        if (!ownCrowdloan.called || ownCrowdloan.loading) return;\n        if (!ownCrowdloanAggregatedBalances.called || ownCrowdloanAggregatedBalances.loading) return;\n        \n        // TODO: add error handling\n        log.debug('useOwnData', 'ownCrowdloan', ownCrowdloan)\n        log.debug('useOwnData', 'ownCrowdloanAggregatedBalances', ownCrowdloanAggregatedBalances)\n\n        if (!ownCrowdloan.data) return;\n\n        let crowdloan = ownCrowdloan.data.crowdloans.nodes[0];\n        if (!crowdloan) return;\n        crowdloan = {\n            id: crowdloan.id,\n            parachainId: crowdloan.parachainId,\n            raised: crowdloan.raised,\n            cap: crowdloan.cap,\n            blockNum: crowdloan.blockNum\n        };\n\n        let aggregatedCrowdloanBalances = ownCrowdloanAggregatedBalances\n            .data\n            ?.aggregatedCrowdloanBalances\n            .nodes\n            .map(({ id, blockNum, raised, parachainId }: AggregatedCrowdloanBalance) => ({\n                id, blockNum, raised, parachainId\n            }));\n\n        log.debug('useOwnData', 'crowdloan', crowdloan)\n        log.debug('useOwndata', 'aggregatedCrowdloanBalances', aggregatedCrowdloanBalances)\n\n        // load sibling data before setting own as loaded\n        dispatch({\n            type: ActionType.LoadSiblingData\n        })\n\n        dispatch({\n            type: ActionType.SetOwnData,\n            payload: {\n                crowdloan,\n                aggregatedCrowdloanBalances\n            }\n        })\n    }, [\n        ownCrowdloan, \n        ownCrowdloanAggregatedBalances, \n        loading,\n        dispatch\n    ])\n\n    return {\n        own,\n        ownLoading: loading\n    }\n}\n\n/**\n * TODO: add auction bids into the equation, not just crowdloan balances\n * TODO: make sure this logic works out\n * @param siblingCrowdloanCandidates \n * @param ownValuation \n */\nconst determineSiblingParachain = (\n    siblingCrowdloanCandidates: any,\n    curAuctionId: null | number\n) => {\n    log.debug('determineSiblingParachain', siblingCrowdloanCandidates, curAuctionId);\n    const siblingCandidates = siblingCrowdloanCandidates\n        .map((siblingCrowdloanCandidate: any) => ({\n            valuation: siblingCrowdloanCandidate.raised,\n            parachainId: siblingCrowdloanCandidate.parachainId\n        })) || [];\n\n    /**\n     * If we're not in the target auction yet, then our competitor\n     * is the parachain with the second largest valuation, instead of the first one.\n     * This is because the first one is presumed to win the current auction,\n     * and therefore not compete with us in the target auction.\n     */\n    const siblingParachain = ((curAuctionId || 0) < config.targetAuctionId)\n        ? siblingCandidates[1]\n        : siblingCandidates[0];\n\n    log.debug('determineSiblingParachain', 'siblingParachain', siblingParachain?.parachainId);\n    return siblingParachain?.parachainId;\n}\n\n/**\n * Hook used to determine who the sibling parachain is,\n * based on 'own' and sibling candidates data.\n * \n * TODO: factor in bid size, not only crowdloan size\n */\nconst useSiblingData = () => {\n    const chronicle = useChronicle();\n    const own = useOwn()\n    const { dispatch } = useStoreContext()\n    const sibling = useSibling();\n    \n    const [getSiblingCrowdloanCandidates, siblingCrowdloanCandidates] = useSiblingCrowdloanCandidatesQuery();\n    \n    const [siblingParachainId, setSiblingParachainId] = useState(\"\");\n    // TODO: fetch latest data from the node, instead of the indexer\n    // in order to provide the most accurate reward estimates\n    const [getSiblingCrowdloan, siblingCrowdloan] = useCrowdloanByParachainIdQuery(siblingParachainId);\n    const [getAggregatedSiblingCrowdloanBalances, aggregatedSiblingCrowdloanBalances] = useAggregatedCrowdloanBalancesByParachainIdQuery({\n        parachainId: siblingParachainId\n    })\n\n    const loading = every([\n        siblingCrowdloan.loading,\n        !siblingCrowdloan.called,\n        aggregatedSiblingCrowdloanBalances.loading,\n        !aggregatedSiblingCrowdloanBalances.called\n    ]);\n    \n    useEffect(() => {\n        // don't do anything in case we don't know the `curBlockNum` yet\n        if (!chronicle.data.curBlockNum) return;\n        if (!sibling.loading) return;\n        if (siblingCrowdloan.loading) return;\n        if (siblingCrowdloanCandidates.loading) return;\n        log.debug('useSiblingData', 'getSiblingCrowdloanCandidates')\n        getSiblingCrowdloanCandidates();\n    }, [\n        chronicle.data.curBlockNum,\n        sibling.loading,\n        getSiblingCrowdloanCandidates\n    ]);\n    \n    useEffect(() => {\n        if (own.loading || !own.data.crowdloan) return;\n        if (!chronicle.data.curBlockNum) return;\n        if (!siblingCrowdloanCandidates.called || siblingCrowdloanCandidates.loading) return;\n\n        log.debug('useSiblingData', 'loaded', 'determining sibling parachain');\n\n        const siblingParachainId = determineSiblingParachain(\n            siblingCrowdloanCandidates.data?.crowdloans.nodes,\n            chronicle.data?.curAuctionId\n        );\n        \n        // TODO: if siblingParachainId is undefined, this hook never 'stops loading'\n        setSiblingParachainId(siblingParachainId);\n    }, [\n        siblingCrowdloanCandidates,\n        chronicle.data?.curAuctionId,\n        own.data.crowdloan,\n        own.loading\n    ]);\n\n    /**\n     * When the siblingParachainId or curBlockNum changes, fetch its crowdloan data\n     * \n     * NOTE: This hook is a bit tricky, it executes both when the curBlockNum changes and\n     * also independently when the siblingParachainId changes.\n     */\n    useEffect(() => {\n        if (!siblingParachainId) return;\n        if (!chronicle.data.curBlockNum) return;\n        if (!sibling.loading) return;\n        // if (!sibling.loading) return;\n        log.debug('useSiblingData', 'fetching sibling data');\n        getAggregatedSiblingCrowdloanBalances()\n        getSiblingCrowdloan()\n    }, [\n        siblingParachainId,\n        chronicle.data.curBlockNum,\n        sibling.loading,\n    ])\n\n    useEffect(() => {\n        if (!siblingCrowdloan.called || siblingCrowdloan.loading) return;\n        if (!aggregatedSiblingCrowdloanBalances.called || aggregatedSiblingCrowdloanBalances.loading) return;\n\n        log.debug('useSiblingData', 'fetched sibling data', 'parsing');\n\n        let crowdloan = siblingCrowdloan.data.crowdloans.nodes[0];\n        crowdloan = {\n            id: crowdloan.id,\n            parachainId: crowdloan.parachainId,\n            raised: crowdloan.raised,\n            cap: crowdloan.cap,\n            blockNum: crowdloan.blockNum\n        };\n\n        let aggregatedCrowdloanBalances = aggregatedSiblingCrowdloanBalances\n            .data\n            ?.aggregatedCrowdloanBalances\n            .nodes\n            .map(({ id, blockNum, raised, parachainId }: AggregatedCrowdloanBalance) => ({\n                id, blockNum, raised, parachainId\n            }));\n        \n        log.debug('useSiblingData', 'setting sibling data');\n\n        dispatch({\n            type: ActionType.SetSiblingData,\n            payload: {\n                crowdloan,\n                aggregatedCrowdloanBalances\n            }\n        })\n\n    }, [\n        aggregatedSiblingCrowdloanBalances,\n        siblingCrowdloan\n    ])\n\n    return {\n        sibling,\n        siblingLoading: loading\n    }\n}\n\n\n\n\nexport {\n    useChronicleData,\n    useOwnData,\n    useSiblingData,\n    determineSiblingParachain\n}","import BigNumber from \"bignumber.js\"\nimport { chown } from \"fs\"\nimport { useEffect, useState } from \"react\"\nimport { useAccount, useChronicle, useOwn, useSibling, useHistoricalIncentives, useStoreContext, ActionType, useContributions } from \"src/containers/store/Store\"\nimport { calculateBsxMultiplier } from '../incentives/calculateBsxMultiplier'\nimport { calculateHdxMultiplier } from '../incentives/calculateHdxMultiplier' \nimport { useHistoricalSiblingCrowdloanCandidateBalances, useHistoricalOwnCrowdloanBalances, useAllOwnContributions, Contribution } from \"./useQueries\"\nimport { groupBy, inRange, find } from 'lodash';\nimport config from \"src/config\"\nimport { determineSiblingParachain } from \"./useData\"\nimport log from \"loglevel\"\n\n/**\n * Calculate the BSX Multiplier & HDX Bonus for the given blockNum, auction and sibling/own valuations\n * \n * @param blockNum \n * @param curAuctionId \n * @param curAuctionClosingStart \n * @param curAuctionClosingEnd \n * @param ownCrowdloanValuation \n * @param siblingCrowdloanValuation \n */\nexport const calculateIncentives = (\n    blockNum: number,\n    curAuctionId: number | null,\n    curAuctionClosingStart: number | null,\n    curAuctionClosingEnd: number | null,\n    ownCrowdloanValuation: string | undefined,\n    siblingCrowdloanValuation: string | undefined\n) => {\n    log.debug('calculateIncentives', {\n        blockNum, curAuctionId, curAuctionClosingStart, curAuctionClosingEnd, ownCrowdloanValuation, siblingCrowdloanValuation\n    });\n\n    const targetAuctionClosingEnd = (config.historicalAuctionData as any)[config.targetAuctionId].closingEnd;\n\n    const noIncentives = {\n        hdxBonus: \"0\",\n        bsxMultiplier: \"0\"\n    };\n\n    // if there is no own crowdloan, there are no incentives\n    // if the contribution is beyond the target auction, there are no incentives\n    if (ownCrowdloanValuation == undefined) {\n        log.debug('calculateIncentives', 'no ownCrowdloanValuation')\n        return noIncentives\n    }\n\n    if (blockNum > (targetAuctionClosingEnd || 0)) {\n        log.debug('calculateIncentives', 'contribution newer than target auction end');\n        return noIncentives;\n    }\n    \n    // calculate the bsx multiplier \n    let bsxMultiplier = calculateBsxMultiplier(\n        blockNum,\n        curAuctionId,\n        curAuctionClosingStart,\n        curAuctionClosingEnd\n    );\n\n    log.debug('calculateIncentives', 'calculateBsxMultiplier', bsxMultiplier);\n    \n    // determine if the auction is closing\n    const isAuctionClosing = curAuctionClosingStart \n        ? (blockNum >= curAuctionClosingStart)\n        : false\n\n    log.debug('calculateIncentives', 'isAuctionClosing', isAuctionClosing);\n    \n    // calculate the hdx multiplier from own & sibling valuations\n    let hdxBonus = calculateHdxMultiplier(\n        new BigNumber(siblingCrowdloanValuation || 0),\n        new BigNumber(ownCrowdloanValuation || 0),\n        isAuctionClosing,\n    );\n\n    log.debug('calculateIncentives', 'hdxBonus', hdxBonus);\n    \n    const incentives = {\n        hdxBonus: (new BigNumber(hdxBonus)).toFixed(config.ksmPrecision),\n        bsxMultiplier: (new BigNumber(bsxMultiplier)).toFixed(config.ksmPrecision)\n    };\n\n    log.debug('calculateIncentives', 'incentives', incentives);\n\n    return incentives;\n}\n\n/**\n * Hook providing the latest calculated incentives,\n * using existing own & sibling data.\n */\nexport const useIncentives = () => {\n    let chronicle = useChronicle();\n    let own = useOwn();\n    let sibling = useSibling();\n    \n    const incentives = calculateIncentives(\n        chronicle.data.curBlockNum,\n        chronicle.data.curAuctionId,\n        chronicle.data.curAuction?.closingStart,\n        chronicle.data.curAuction?.closingEnd,\n        own.data.crowdloan?.raised || undefined,\n        sibling.data.crowdloan?.raised || undefined\n    );\n\n    // if there is no own crowdloan, return no incentives\n    if (!own.data.crowdloan) return {\n        hdxBonus: null,\n        bsxMultiplier: null\n    };\n\n    return incentives;\n}\n\n/**\n * Find an auction that was active at the given blockNum.\n * This is useful to accurately present incentives from the contribution history.\n * @param blockNum \n */\nconst findActiveHistoricalAuction = (blockNum: number) => {\n    log.debug('findActiveHistoricalAuction', blockNum);\n    const noAuctionId = 0;\n    const activeAuctions = Object.keys(config.historicalAuctionData)\n        .filter(auctionId => {\n            const auctionData = (config.historicalAuctionData as any)[auctionId];\n            return inRange(\n                blockNum, \n                auctionData.blockNum, \n                auctionData.closingEnd\n            )\n        }) as unknown as number[]; // don't hurt me\n\n    log.debug('findActiveHistoricalAuction', 'activeAuctions', activeAuctions);\n\n    if (!activeAuctions || (activeAuctions && activeAuctions.length == 0)) {\n        log.debug('findActiveHistoricalAuction', 'no active auction')\n        return noAuctionId\n    };\n\n    if (activeAuctions.length > 1) {\n        log.debug('findActiveHistoricalAuctions', 'more than 1 active auction found');\n        throw new Error(\"More than 1 active historical auctions found\");\n    }\n\n    const activeAuction = activeAuctions[0];\n\n    log.debug('findActiveHistoricalAuctions', 'activeAuction', activeAuction);\n    return activeAuction;\n};\n\n/**\n * In order to be able to calculate incentives for past blocks & contributions,\n * filter out auctions that have won an auction before the given blockNum.\n * @param blockNum\n */\nconst filterHistoricallyValidCrowdloanSiblingCandidates = (blockNum: number, crowdloanSiblingCandidates: any[]) => {\n    log.debug('filterHistoricallyValidCrowdloanSiblingCandidates', blockNum, crowdloanSiblingCandidates);\n    /**\n     * If the crowdloan has won an auction already, and that auction\n     * was scheduled to close at an earlier block than the candidate balance at hand,\n     * then it is not valid for consideration.\n     */\n    // find an auction that was active at the given blockNum\n    const activeAuctionId = findActiveHistoricalAuction(blockNum);\n    log.debug('filterHistoricallyValidCrowdloanSiblingCandidates', 'activeAuctionId', activeAuctionId);\n    const historicallyValidCrowdloanSiblingCandidates = crowdloanSiblingCandidates?.filter(crowdloanSiblingCandidate => {\n        const wonAuctionId = crowdloanSiblingCandidate.fund.wonAuctionId;\n        // if the sibling candidate has won an auction, that is older than the current auction at the given blockNum\n        // then it is not eligible as a sibling\n        if (wonAuctionId && wonAuctionId <= activeAuctionId) return false;\n        return true;\n    }) || [];\n\n    log.debug('filterHistoricallyValidCrowdloanSiblingCandidates', historicallyValidCrowdloanSiblingCandidates);\n    return historicallyValidCrowdloanSiblingCandidates;\n}\n\n/**\n * Hook that fetches all the data necessary to calculate historical incentives\n * for account contributions.\n */\nexport const useHistoricalIncentivesData = () => {\n    const account = useAccount();\n    const { dispatch } = useStoreContext();\n    const contributions = account.data.contributions;\n    const [blockNums, setBlockNums] = useState<number[]>([]);\n    const [getHistoricalSiblingCrowdloanCandidateBalances, historicalSiblingCrowdloanCandidateBalances] = useHistoricalSiblingCrowdloanCandidateBalances(blockNums)\n    const [getHistoricalOwnCrowdloanCandidateBalances, historicalOwnCrowdloanCandidateBalances] = useHistoricalOwnCrowdloanBalances(blockNums);\n    const historicalIncentives = useHistoricalIncentives();\n\n    /**\n     * When there are new contributions, set the blockNums which\n     * we need to calculate incentives for.\n     */\n    useEffect(() => {\n        log.debug('notWorkingHook', contributions)\n        if (!contributions) return;\n        if (contributions && !contributions.length) return;\n        const contributionBlockNums = contributions.map(contribution => contribution.blockNum);\n        setBlockNums(contributionBlockNums);\n        log.debug('useHistoricalIncentivesData', 'blockNums', contributionBlockNums);\n        dispatch({\n            type: ActionType.LoadHistoricalIncentivesData\n        });\n    }, [\n        contributions\n    ]);\n\n    /**\n     * Fetch historical balances for own & sibling,\n     * based on the account contribution blocks.\n     */\n    useEffect(() => {\n        if (!blockNums) return;\n        if (blockNums && !blockNums.length) return;\n        if (!historicalIncentives.loading) return;\n        if (historicalSiblingCrowdloanCandidateBalances.loading) return;\n        if (historicalOwnCrowdloanCandidateBalances.loading) return;\n        log.debug('useHistoricalIncentivesData', 'fetching historical balances for own & sibling');\n        getHistoricalSiblingCrowdloanCandidateBalances()\n        getHistoricalOwnCrowdloanCandidateBalances()\n    }, [\n        historicalIncentives.loading,\n        historicalSiblingCrowdloanCandidateBalances,\n        getHistoricalSiblingCrowdloanCandidateBalances,\n        getHistoricalOwnCrowdloanCandidateBalances,\n        historicalOwnCrowdloanCandidateBalances\n    ])\n\n    /**\n     * After we fetch the historical balances, recalculate all the historical incentives.\n     */\n    useEffect(() => {\n        if (!historicalSiblingCrowdloanCandidateBalances.called || historicalSiblingCrowdloanCandidateBalances.loading) return;\n        if (!historicalOwnCrowdloanCandidateBalances.called || historicalOwnCrowdloanCandidateBalances.loading) return;\n\n        log.debug('useHistoricalIncentivesData', 'calculating historican incentives for each contribution block');\n\n        // split sibling crowdloan candidates into groups by blockNum\n        const candidateCrowdloansHistoricalBalances = groupBy(\n            historicalSiblingCrowdloanCandidateBalances.data.aggregatedCrowdloanBalances.nodes,\n            'blockNum'\n        );\n        \n        // split own crowdloan balances by blockNum\n        const ownCrowdloansHistoricalBalances = groupBy(\n            historicalOwnCrowdloanCandidateBalances.data.aggregatedCrowdloanBalances.nodes,\n            'blockNum'\n        );\n\n        log.debug('useHistoricalIncentivesData', 'historicalBalances', candidateCrowdloansHistoricalBalances, ownCrowdloansHistoricalBalances);\n        \n        // filter out sibling crowdloan candidates that are not valid\n        const validHistoricalCrowdloanCandidates = blockNums.reduce((accumulator, blockNum) => {\n            (accumulator as any)[blockNum] = filterHistoricallyValidCrowdloanSiblingCandidates(\n                blockNum,\n                candidateCrowdloansHistoricalBalances[blockNum]\n            )\n            return accumulator;\n        }, {});\n\n        log.debug('useHistoricalIncentivesData', 'validHistoricalCrowdloanCandidates', validHistoricalCrowdloanCandidates);\n\n        /**\n         * Calculate *only* the historical HDX Bonus, since BSX bonus can be calculated on the fly.\n         */\n        const historicalIncentives = blockNums.reduce((accumulator, blockNum) => {\n            // find a siblingParachainId by providing the activeAuctionId at the time\n            const activeAuctionId = findActiveHistoricalAuction(blockNum);\n            const siblingParachainId = determineSiblingParachain(\n                (validHistoricalCrowdloanCandidates as any)[blockNum],\n                activeAuctionId\n            );\n            const ownCrowdloan = (ownCrowdloansHistoricalBalances as any)[blockNum][0];\n\n            log.debug('useHistoricalIncentivesData', 'calculating', {\n                activeAuctionId,\n                siblingParachainId,\n                ownCrowdloan\n            });\n\n            if (!ownCrowdloan) return accumulator;\n\n            // auction data by historically active auctionId\n            const activeAuction = (config.historicalAuctionData as any)[activeAuctionId];\n\n            log.debug('useHistoricalIncentivesData', 'activeAuction', activeAuction);\n\n            // find the siblingParachainCrowdloan data by siblingParachainId\n            const siblingParachainCrowdloan = find(\n                (validHistoricalCrowdloanCandidates as any)[blockNum],\n                ['parachainId', siblingParachainId]\n            );\n            \n            log.debug('useHistoricalIncentivesData', 'own vs sibling raised', {\n                sibling: siblingParachainCrowdloan?.raised,\n                own: ownCrowdloan?.raised\n            });\n\n            // recalculate incentives (hdx bonus) for the given blockNum,\n            // while taking the historically active auctionId into consideration\n            (accumulator as any)[blockNum] = {\n                ...calculateIncentives(\n                    blockNum,\n                    activeAuctionId,\n                    activeAuction?.closingStart,\n                    activeAuction?.closingEnd,\n                    ownCrowdloan?.raised,\n                    siblingParachainCrowdloan?.raised\n                ),\n                blockNum,\n                siblingParachainId\n            }\n\n            log.debug('useHistoricalIncentivesData', 'resulting historical incentive', blockNum, (accumulator as any)[blockNum]);\n            return accumulator;\n        }, {});\n        \n        dispatch({\n            type: ActionType.SetHistoricalIncentivesData,\n            payload: historicalIncentives\n        })\n    }, [\n        historicalSiblingCrowdloanCandidateBalances,\n        historicalOwnCrowdloanCandidateBalances\n    ]);\n\n    return historicalIncentives;\n}\n\n/**\n * Calculate the minimum Bsx received given a crowdloan cap\n * and an array of account contributions\n * @param cap\n * @param contributions \n * @param chronicle \n */\nexport const calculateMinBsxReceived = (\n    cap: string,\n    contributions: any[],\n    chronicle: any,\n) => {\n\n    // sum up weights of the given contributions\n    const contributionsWeight = contributions.reduce((accumulator, contribution: Contribution) => {\n        const bsxMultiplier = calculateBsxMultiplier(\n            contribution.blockNum,\n            chronicle.data.curAuctionId,\n            chronicle.data.curAuction.closingStart,\n            chronicle.data.curAuction.closingEnd\n        );\n\n        log.debug('useCalculateRewardsReceived', 'accountWeight bsxMultiplier', bsxMultiplier, {\n            blockNum: contribution.blockNum,\n            curAuctionId: chronicle.data.curAuctionId,\n            closingStart: chronicle.data.curAuction.closingStart,\n            closingEnd: chronicle.data.curAuction.closingEnd\n        });\n        \n        return new BigNumber(accumulator)\n            .plus((\n                // calculate the invididual contribution weight\n                (new BigNumber(contribution.amount))\n                    .multipliedBy(bsxMultiplier)\n            ))\n            .toFixed(config.incentives.precision)\n    }, \"0\");\n\n    // calculate the minimum Bsx received with respect to the own crowdloan cap\n    const minBsxReceived = new BigNumber(config.incentives.bsx.allocated)\n        .dividedBy(\n            // maximum reward multiplier for the full crowdloan cap\n            (new BigNumber(cap))\n                .multipliedBy(config.incentives.bsx.scale.rewardMultiplier.min)\n        )\n        .multipliedBy(contributionsWeight)\n        .toFixed(config.incentives.precision)   \n\n    return minBsxReceived;\n}\n\n/**\n * Calculate the current Bsx received with regards\n * to the weight of other contributions\n * @param totalContributionWeight \n * @param contributions \n * @param chronicle \n */\nexport const calculateCurrentBsxReceived = (\n    totalContributionWeight: string,\n    contributions: any[],\n    chronicle: any,\n) => {\n\n    // calculate the weight of the given account contributions\n    const contributionsWeight = contributions.reduce((accumulator, contribution: Contribution) => {\n        const bsxMultiplier = calculateBsxMultiplier(\n            contribution.blockNum,\n            chronicle.data.curAuctionId,\n            chronicle.data.curAuction.closingStart,\n            chronicle.data.curAuction.closingEnd\n        );\n\n        log.debug('useCalculateRewardsReceived', 'accountWeight bsxMultiplier', bsxMultiplier, {\n            blockNum: contribution.blockNum,\n            curAuctionId: chronicle.data.curAuctionId,\n            closingStart: chronicle.data.curAuction.closingStart,\n            closingEnd: chronicle.data.curAuction.closingEnd\n        });\n\n        return new BigNumber(accumulator)\n            .plus((\n                // weight of the given contribution using the bsx multiplier\n                (new BigNumber(contribution.amount))\n                    .multipliedBy(bsxMultiplier)\n            ))\n            .toFixed(config.incentives.precision)\n    }, \"0\");\n\n    // current bsx received with respect to the total contributions weight\n    const accountCurrentBsxReward = (!new BigNumber(contributionsWeight).isZero())\n        ? new BigNumber(config.incentives.bsx.allocated)\n            .dividedBy(totalContributionWeight)\n            .multipliedBy(contributionsWeight)\n            .toFixed(config.incentives.precision)\n        : new BigNumber(\"0\").toFixed(config.incentives.precision)\n\n    return accountCurrentBsxReward\n}\n\n/**\n * Calculate the current HDX reward for the given account contributions,\n * using HDX Bonuses calculated for the past contribution blockNums\n * @param contributions \n * @param historicalIncentives \n */\nexport const calculateCurrentHdxReward = (\n    contributions: any[],\n    historicalIncentives: any\n) => {\n    const hdxReward = contributions.reduce((accumulator, contribution: Contribution) => {\n        log.debug('useCalculateRewardsReceived', 'hdxReward', 'contribution', contribution, historicalIncentives.data[contribution.blockNum]);\n        const ksmOpportunityCostPerContribution = (new BigNumber(contribution.amount))\n            .multipliedBy(\n                config.ksmOpportunityCost\n            );\n\n        log.debug('useCalculateRewardsReceived', 'hdxReward', 'ksmOpportunityCostPerContribution', ksmOpportunityCostPerContribution);\n        const contributionHdxReward = ksmOpportunityCostPerContribution\n            .multipliedBy(\n                historicalIncentives.data[contribution.blockNum].hdxBonus\n            );\n            \n        log.debug('useCalculateRewardsReceived', 'hdxReward', 'contributionHdxReward', contributionHdxReward);\n\n        return new BigNumber(accumulator)\n            .plus(contributionHdxReward)\n            .toFixed(config.incentives.precision)\n    }, \"0\");\n\n    return hdxReward;\n}\n\nexport const calculateBsxRewards = (\n    contributions: any[],\n    chronicle: any,\n    totalContributionWeight: string | undefined,\n    own: any,\n    historicalIncentives: any\n) => {\n    const accountWeight = contributions.reduce((accumulator, contribution: Contribution) => {\n        const bsxMultiplier = calculateBsxMultiplier(\n            contribution.blockNum,\n            chronicle.data.curAuctionId,\n            chronicle.data.curAuction.closingStart,\n            chronicle.data.curAuction.closingEnd\n        );\n\n        // const bsxMultiplier = historicalIncentives.data[contribution.blockNum].bsxMultiplier\n\n        log.debug('useCalculateRewardsReceived', 'accountWeight bsxMultiplier', bsxMultiplier, {\n            blockNum: contribution.blockNum,\n            curAuctionId: chronicle.data.curAuctionId,\n            closingStart: chronicle.data.curAuction.closingStart,\n            closingEnd: chronicle.data.curAuction.closingEnd\n        });\n\n        return new BigNumber(accumulator)\n            .plus((\n                (new BigNumber(contribution.amount))\n                    .multipliedBy(bsxMultiplier)\n            ))\n            .toFixed(config.incentives.precision)\n    }, \"0\");\n\n    log.debug('useCalculateRewardsReceived', 'accountWeight', accountWeight);\n    log.debug('useCalculateRewardsReceived', 'totalContributionWeight', totalContributionWeight);\n\n    const accountCurrentBsxReward = calculateCurrentBsxReceived(\n        totalContributionWeight || \"0\",\n        contributions,\n        chronicle\n    );\n\n    log.debug('useCalculateRewardsReceived', 'accountCurrentBsxReward', accountCurrentBsxReward);\n\n    const accountMinimumBsxReward = calculateMinBsxReceived(\n        own.data.crowdloan.cap,\n        contributions,\n        chronicle\n    )\n        \n    log.debug('useCalculateRewardsReceived', 'accountMinimumBsxReward', accountMinimumBsxReward);\n    \n    return {\n        accountCurrentBsxReward,\n        accountMinimumBsxReward\n    }\n}\n\n/**\n * Hook to calculate minimal/current BSX rewards & current HDX rewards,\n * based on the existing account contributions.\n */\nexport const useCalculateRewardsReceived = () => {\n    const contributions = useContributions();\n    const chronicle = useChronicle();\n\n    const historicalIncentives = useHistoricalIncentivesData()\n    const [getAllOwnContributions, allOwnContributions] = useAllOwnContributions();\n    const [totalContributionWeight, setTotalContributionWeight] = useState(\"0\");\n    const [currentBsxReceived, setCurrentBsxReceived] = useState(\"0\");\n    const [minimalBsxReceived, setMinimalBsxReceived] = useState(\"0\");\n    const [currentHdxReceived, setCurrentHdxReceived] = useState(\"0\");\n    const [loading, setLoading] = useState(false);\n    const own = useOwn();\n\n    /**\n     * When the curBlockNum changed, load all account contributions to our crowdloan\n     */\n    useEffect(() => {\n        log.debug('useCalculateRewardsReceived', 'getAllOwnContributions', 'fetching')\n        getAllOwnContributions();\n        setLoading(true)\n    }, [\n        chronicle.data.curBlockNum\n    ]);\n\n    /**\n     * Calculate the total weight of all contributions to our own crowdloan.\n     */\n    // TODO: use data from indexer\n    useEffect(() => {\n        if (!allOwnContributions.called || allOwnContributions.loading) return;\n        log.debug('useCalculateRewardsReceived', 'totalContributionWeight', 'calculating')\n        const totalContributionWeight = allOwnContributions.data.contributions.nodes\n            .reduce((accumulator: string, contribution: any) => {\n                const activeAuctionId = findActiveHistoricalAuction(contribution.blockNum);\n                const activeAuction = (config.historicalAuctionData as any)[activeAuctionId];\n                /**\n                 * BSX Multiplier needs to be calculated for the past blockNum when the contribution was made.\n                 * We still use the curAuction, since the `calculateBsxMultiplier` can handle past blockNums well.\n                 */\n                const bsxMultiplier = calculateBsxMultiplier(\n                    contribution.blockNum,\n                    activeAuctionId,\n                    activeAuction?.closingStart,\n                    activeAuction?.closingEnd\n                );\n\n                log.debug('useCalculateRewardsReceived', 'bsxMultiplier totalContributionWeight', bsxMultiplier, {\n                    blockNum: contribution.blockNum,\n                    curAuctionId: activeAuctionId,\n                    closingStart: activeAuction?.closingStart,\n                    closingEnd: activeAuction?.closingEnd\n                });\n\n                // weight of the individual contribution\n                const contributionWeight = new BigNumber(contribution.amount)\n                    .multipliedBy(bsxMultiplier)\n                    .toFixed(config.incentives.precision);\n\n                // individual contribution weight added to the total contributions weight\n                return new BigNumber(accumulator)\n                    .plus(contributionWeight)\n                    .toFixed(config.incentives.precision);\n            }, \"0\")\n\n        log.debug('useCalculateRewardsReceived', 'totalContributionWeight', totalContributionWeight)\n        setTotalContributionWeight(totalContributionWeight);\n    }, [\n        allOwnContributions.loading,\n        allOwnContributions.called,\n        allOwnContributions.data\n    ]);\n\n    useEffect(() => {\n        // log.debug('notWorkingHook', own.data.crowdloan?.cap, historicalIncentives);\n\n        if (!own.data.crowdloan?.cap) return;\n        if (historicalIncentives.loading) return;\n        // there are no historical incentives data\n        if (!Object.keys(historicalIncentives.data).length) return;\n\n        /**\n         * Calculate BSX rewards\n         */\n        const { accountCurrentBsxReward, accountMinimumBsxReward } = calculateBsxRewards(\n            contributions,\n            chronicle,\n            totalContributionWeight,\n            own,\n            historicalIncentives\n        );\n\n        // values in BSX, not in KSM\n        setCurrentBsxReceived(accountCurrentBsxReward)\n        setMinimalBsxReceived(accountMinimumBsxReward);\n        \n        log.debug('useCalculateRewardsReceived', 'bsx rewards', accountMinimumBsxReward, accountCurrentBsxReward);\n\n\n        /**\n         * Calculate HDX rewards\n         */\n        const hdxReward = calculateCurrentHdxReward(\n            contributions,\n            historicalIncentives\n        );\n\n        log.debug('useCalculateRewardsReceived', 'hdxReward', hdxReward);\n\n        // hdx value in KSM, not converted yet\n        setCurrentHdxReceived(hdxReward);\n        setLoading(false);\n    }, [\n        totalContributionWeight,\n        historicalIncentives.loading,\n        historicalIncentives.data,\n        contributions,\n        own.data.crowdloan?.cap\n    ]);\n\n    return {\n        currentBsxReceived,\n        minimalBsxReceived,\n        currentHdxReceived,\n        totalContributionWeight,\n        loading\n    }\n}","import BigNumber from 'bignumber.js';\nimport config from './config';\n\nexport const toKsmPrecision = (humanAmount: any) => {\n    const preciseAmount = new BigNumber(humanAmount)\n            .multipliedBy(\n                new BigNumber(10)\n                    .exponentiatedBy(12)\n            )\n            .toFixed(config.ksmPrecision)\n\n    return preciseAmount;\n}\n\nexport const fromKsmPrecision = (preciseAmount: any) => {\n    const humanAmount = new BigNumber(preciseAmount)\n            .dividedBy(\n                new BigNumber(10)\n                    .exponentiatedBy(12)\n            )\n            .toFixed(config.ksmPrecision)\n\n    return humanAmount;\n}\n\nexport const ksmToUsd = (amount: any) => {\n    return new BigNumber(amount)\n        .multipliedBy(config.ksmToUsd)\n        .toFixed(config.ksmPrecision)\n}\n\nexport const usdToHdx = (amount: any) => {\n    return new BigNumber(amount)\n        .dividedBy(config.hdxToUsd)\n        .toFixed(config.ksmPrecision)\n}","import { usePolkaDotContext } from './../hooks/usePolkadot';\nimport log from 'loglevel';\nimport { useEffect, useState } from 'react';\nimport { useChronicle, useContributions, useHistoricalIncentives, useOwn } from './store/Store';\nimport { calculateBsxRewards, calculateCurrentHdxReward, useIncentives } from './../hooks/useIncentives';\nimport config from './../config';\nimport { fromKsmPrecision, ksmToUsd, toKsmPrecision, usdToHdx } from './../utils';\nimport CurrencyInput from 'react-currency-input-field';\nimport './CrowdloanContributeForm.scss'\nimport BigNumber from 'bignumber.js';\n\ntype Props = {\n    totalContributionWeight: string,\n    connectAccount: any\n}\n\nexport const CrowdloanContributeForm = ({totalContributionWeight, connectAccount}: Props) => {\n    // reward calculation\n    const own = useOwn();\n    const chronicle = useChronicle()\n    const incentives = useIncentives();\n    const { activeAccountBalance, lastContributionStatus, contribute, activeAccount } = usePolkaDotContext();\n\n    const [amount, setAmount] = useState<number | undefined>(undefined)\n\n    const [rewardsReceived, setRewardsReceived] = useState({\n        minimalBsxReceived: \"0\",\n        currentBsxReward: \"0\",\n        // TODO: convert KSM amount to HDX\n        currentHdxReceived: \"0\",\n    });\n\n    useEffect(() => {\n        log.debug('CrowdloanContributeForm', 'calculating rewards', amount, own, totalContributionWeight);\n        if (!own || !chronicle || !totalContributionWeight) return;\n        if (!own.data.crowdloan) return;\n        if (!chronicle.data.curBlockNum) return;\n\n        const contributions = [\n            {\n                amount: amount ? toKsmPrecision(amount) : \"0\",\n                blockNum: chronicle.data.curBlockNum\n            }\n        ];\n\n        const historicalIncentives: any = { data: {} };\n        (historicalIncentives as any).data[chronicle.data.curBlockNum] = {\n            hdxBonus: incentives.hdxBonus\n        };\n\n        const bsxRewards = calculateBsxRewards(\n            contributions,\n            chronicle,\n            totalContributionWeight,\n            own,\n            historicalIncentives\n        );\n\n        log.debug('CrowdloanContributeForm', 'historicalIncentives', historicalIncentives)\n        const hdxReward = calculateCurrentHdxReward(\n            contributions,\n            historicalIncentives\n        )\n\n        log.debug('CrowdloanContributeForm', bsxRewards, hdxReward);\n        setRewardsReceived({\n            minimalBsxReceived: new BigNumber(fromKsmPrecision(bsxRewards.accountMinimumBsxReward)).toFixed(6),\n            currentBsxReward: new BigNumber(fromKsmPrecision(bsxRewards.accountCurrentBsxReward)).toFixed(6),\n            currentHdxReceived: new BigNumber(usdToHdx(ksmToUsd(fromKsmPrecision(hdxReward)))).toFixed(6)\n        })\n\n    }, [\n        amount,\n        own,\n        chronicle,\n        totalContributionWeight\n    ])\n\n    const handleContributeClick = () => {\n        log.debug('CrowdloanContributeForm', 'handleContributeClick', amount);\n        // call contribute here\n        contribute(toKsmPrecision(amount));\n    }\n\n    useEffect(() => {\n        if (lastContributionStatus) setAmount(0)\n    }, [\n        lastContributionStatus\n    ]);\n\n    const handleContributeChange = (value: any) => {\n        log.debug('CrowdloanContributeForm', 'handleContributeChange', value, activeAccountBalance);\n        if (value == undefined) return setAmount(undefined);\n        setAmount(value)\n    }\n\n    log.debug('CrowdloanContributeForm', 'rewardsReceived', rewardsReceived)\n\n    const noop = () => {}\n\n    return <div className=\"bsx-contribute-form\">\n\n        <div className=\"bsx-form-wrapper\">\n            <label>ksm contribution</label>\n            <CurrencyInput\n                name=\"amount\"\n                decimalsLimit={12}\n                value={amount}\n                placeholder={\"Your sacrifice goes here\"}\n                onValueChange={handleContributeChange}\n            />\n\n            {/* rewards */}\n            <label>minimal bsx received</label>\n            <CurrencyInput\n                name=\"minimal bsx received\"\n                decimalsLimit={6}\n                disabled={true}\n                value={rewardsReceived.minimalBsxReceived}\n                onValueChange={noop}\n            />\n\n            <label>current bsx received</label>\n            <CurrencyInput\n                name=\"current bsx received\"\n                decimalsLimit={6}\n                disabled={true}\n                value={rewardsReceived.currentBsxReward}\n                onValueChange={noop}\n            />\n\n            <label>current hdx received</label>\n            <CurrencyInput\n                name=\"current hdx received\"\n                decimalsLimit={6}\n                disabled={true}\n                value={rewardsReceived.currentHdxReceived}\n                onValueChange={noop}\n            />\n\n            {activeAccount \n                ? (\n                    <button\n                        disabled={(!amount || amount == 0)}\n                        onClick={handleContributeClick}\n                    >Contribute</button>\n                )\n                : (\n                    <button \n                        onClick={connectAccount}\n                    >\n                        Connect Account\n                    </button>\n                )\n            }\n            \n        </div>\n\n        <div className=\"contribution-status\">\n            {lastContributionStatus \n                ? \"Thanksss for your sacrifice\"\n                : (\n                    (lastContributionStatus == false)\n                        ? \"There was a problem with your contribution, please try again.\"\n                        : \"\"\n\n                )\n            }\n        </div>\n    </div>\n}","import BigNumber from \"bignumber.js\";\nimport { useEffect, useState } from \"react\";\nimport config from \"src/config\";\nimport { ActionType, useStoreContext, useAccount, useChronicle, useContributions } from \"src/containers/store/Store\"\nimport { useContributionsByAccountAndParachainId } from \"./useQueries\";\nimport { useCalculateRewardsReceived } from 'src/hooks/useIncentives';\nimport log from 'loglevel';\nimport { useLocalStorage } from 'react-use';\nimport { usePolkaDotContext } from \"./usePolkadot\";\nimport {encodeAddress,decodeAddress } from '@polkadot/util-crypto';\n\nconst useContributionsData = () => {\n    const chronicle = useChronicle();\n    const account = useAccount();\n    const address = account.data.address // ? encodeAddress(decodeAddress(account.data.address), 2) : \"\";\n\n    const [getContributionsByAccountAndParachainId, contributionsByAccountAndParachainId] = useContributionsByAccountAndParachainId(\n        address || \"\",\n        config.ownParachainId\n    );\n    const [accountContributions, setAccountContributions] = useState([]);\n\n    useEffect(() => {\n        if (!address) return;\n        if (!chronicle.data.curBlockNum) return;\n        log.debug('useContributionsData', 'getContributionsByAccountAndParachainId', 'called')\n        getContributionsByAccountAndParachainId();\n    }, [\n        chronicle.data.curBlockNum,\n        getContributionsByAccountAndParachainId,\n        address,\n    ]);\n\n    useEffect(() => {\n        if (!contributionsByAccountAndParachainId.called || contributionsByAccountAndParachainId.loading) return;\n        if (!contributionsByAccountAndParachainId.data) return;\n        \n        log.debug('useContributionsData', 'getContributionsByAccountAndParachainId', 'loaded', contributionsByAccountAndParachainId);\n        const accountContributions = contributionsByAccountAndParachainId.data.contributions.nodes.map((contribution: any) => ({\n            account: contribution.account,\n            amount: contribution.amount,\n            blockNum: contribution.blockNum,\n            parachainId: contribution.parachainId\n        }));\n        setAccountContributions(accountContributions);\n    }, [\n        contributionsByAccountAndParachainId\n    ])\n\n    return { \n        data: accountContributions,\n        loading: contributionsByAccountAndParachainId.loading,\n        called: contributionsByAccountAndParachainId.loading,\n        getContributionsByAccountAndParachainId: getContributionsByAccountAndParachainId\n    }\n}\n\nconst useAccountData = () => {\n    const { dispatch } = useStoreContext()\n    const account = useAccount();\n    const chronicle = useChronicle();\n    const contributions = useContributions();\n    const rewardsReceived = useCalculateRewardsReceived();\n    const {\n        activeAccount,\n        activeAccountBalance,\n    } = usePolkaDotContext()\n\n    const accountContributions = useContributionsData();\n    const totalKsmContributed = useTotalKsmContributed()\n\n    // TODO: fix loading state\n    useEffect(() => {\n        dispatch({\n            type: ActionType.ConnectAccount\n        })\n    }, [\n        activeAccount\n    ])\n\n    useEffect(() => {\n        if (!activeAccount) return;\n        if (!activeAccountBalance) return;\n        if (accountContributions.loading) return;\n\n        log.debug('useAccountData', 'setting account data', activeAccount, activeAccountBalance)\n        dispatch({\n            type: ActionType.SetAccountData,\n            payload: {\n                address: activeAccount,\n                balance: activeAccountBalance,\n                contributions: accountContributions.data\n            }\n        })\n    }, [\n        activeAccount,\n        activeAccountBalance,\n        accountContributions.loading,\n        accountContributions.data,\n        dispatch,\n    ])\n\n    return {\n        account,\n        contributions,\n        rewardsReceived,\n        totalKsmContributed\n    }\n}\n\nconst useTotalKsmContributed = () => {\n    log.debug('useTotalKsmContributed');\n    const account = useAccount();\n    const totalKsmContributed = account.data.contributions.reduce((accumulator, { amount }) => {\n        return new BigNumber(accumulator)\n            .plus(\n                new BigNumber(amount)\n            ).toFixed(0)\n    }, \"0\");\n\n    log.debug('useTotalKsmContributed', totalKsmContributed);\n    return totalKsmContributed;\n}\n\nexport {\n    useAccountData,\n    useTotalKsmContributed\n}","import { useRef } from 'react';\nimport { useClickAway } from 'react-use';\nimport { usePolkaDotContext } from './../hooks/usePolkadot';\nimport './AccountSelector.scss';\n\nexport type Props = {\n    onAccountSelect: any,\n};\n\nexport const AccountSelector = ({onAccountSelect}: Props) => {\n    const { accounts, setActiveAccount } = usePolkaDotContext();\n    \n    const handleAccountOnClick = (address: string) => {\n        setActiveAccount(address);\n        onAccountSelect()\n    }\n\n    const ref = useRef(null);\n    useClickAway(ref, () => {\n        onAccountSelect();\n    })\n\n    return <div className=\"bsx-account-selector\">\n        <div className=\"bsx-account-selector-backdrop\">\n            <div className=\"bsx-account-selector-modal\" ref={ref}>\n                <div className=\"title\">Select an account</div>\n                <div>\n                    {accounts.map(account => (\n                        <div\n                            className=\"account\"\n                            key={account.address}\n                            onClick={_ => handleAccountOnClick(account.address)}\n                        >\n                            <p className=\"name\">{account.meta.name}</p>\n                            <p className=\"address\">{account.address}</p>\n                        </div>\n                    ))}\n                </div>\n            </div>\n        </div>\n    </div>\n}","import './Dashboard.scss'\nimport bsxEye from './../assets/Logo-dark-2-clean.png';\nimport bsxWallpaper from './../assets/basilisk-wallpaper-2.png';\nimport { CrowdloanContributeForm } from 'src/containers/CrowdloanContributeForm';\nimport { Line, defaults } from 'react-chartjs-2';\nimport { ActionType, useChronicle, useStoreContext } from 'src/containers/store/Store';\nimport { useChronicleData, useOwnData, useSiblingData } from 'src/hooks/useData';\nimport { useMemo, useEffect, useState } from 'react';\nimport { range, times } from 'lodash';\nimport config from 'src/config';\nimport { calculateBsxMultiplier } from 'src/incentives/calculateBsxMultiplier';\nimport { fromKsmPrecision, usdToHdx, ksmToUsd } from 'src/utils';\nimport millify from 'millify';\nimport linearScale from 'simple-linear-scale'\n\nimport { Chart } from 'chart.js';\nimport annotationPlugin from 'chartjs-plugin-annotation';\nimport { useIncentives } from 'src/hooks/useIncentives';\nimport { useAccountData, useTotalKsmContributed } from 'src/hooks/useAccountData';\nimport BigNumber from 'bignumber.js';\nimport { AccountSelector } from 'src/containers/AccountSelector';\nChart.register(annotationPlugin);\n\nconst millifyOptions = {\n    precision: 6\n}\n\ndefaults.animation = false;\n\nconst colors = {\n    yellow: '#ffe733',\n    red: '#ff5033',\n    orange: '#ff8133',\n    green: '#90ff33',\n    black: '#171b22',\n    white: '#ebebeb',\n    faintGray: 'rgba(181, 149, 114, .1)',\n    transparent: 'transparent',\n}\n\nexport const useDashboardData = () => {\n    let { dispatch } = useStoreContext();\n    let { chronicle } = useChronicleData();\n    let { own, ownLoading } = useOwnData();\n    let { sibling, siblingLoading } = useSiblingData();\n    let incentives = useIncentives();\n    const accountData = useAccountData();\n    const totalKsmContributed = useTotalKsmContributed();\n\n    /**\n     * Function that triggers loading of a chronicle,\n     * which subsequently triggers loading of all\n     * chronicle-dependent data\n     */\n    const loadChronicle = () => dispatch({\n        type: ActionType.LoadChronicle\n    });\n\n    // on the initial load, load the chronicle\n    useEffect(() => loadChronicle(), []);\n\n    const isDashboardEssentialDataLoading = useMemo(() => {\n        return !own.data.crowdloan || !sibling.data.crowdloan\n    }, [own.data, sibling.data])\n\n    return {\n        chronicle,\n        own,\n        sibling,\n        isDashboardEssentialDataLoading,\n        incentives,\n        accountData\n    }\n}\n\nexport const Dashboard = () => {\n\n    const { \n        chronicle, \n        own, \n        sibling, \n        isDashboardEssentialDataLoading,\n        incentives,\n        accountData,\n    } = useDashboardData();\n\n    const [showAccountSelector, setShowAccountSelector] = useState(false);\n\n    const aggregationCoeficient = 50;\n    const targetAuctionId = config.targetAuctionId;\n    const targetAuction = (config.historicalAuctionData as any)[targetAuctionId];\n    const labels = range(\n        config.ownCrowdloanBlockNum,\n        targetAuction.closingEnd,\n        aggregationCoeficient\n    );\n    const lineChartBlockNumScale = linearScale(\n        [\n            config.ownCrowdloanBlockNum,\n            targetAuction.closingEnd,\n        ],\n        [\n            0,\n            (targetAuction.closingEnd - config.ownCrowdloanBlockNum) / aggregationCoeficient,\n        ]\n    )\n\n    const progressBarScale = linearScale(\n        [\n            config.ownCrowdloanBlockNum,\n            targetAuction.closingEnd,\n        ],\n        [\n            0,\n            100,\n        ]\n    )\n\n    const lineChartData = useMemo(() => {\n        \n        const emptyLineChartData = {\n            labels,\n            datasets: []\n        };\n\n        // if (own.loading || sibling.loading) return emptyLineChartData;\n\n        return ({\n            labels,\n            datasets: [\n                {\n                    label: 'Basilisk',\n                    borderColor: colors.green,\n                    yAxisID: 'crowdloanCap',\n                    data: own.data.aggregatedCrowdloanBalances\n                        ?.map(aggregatedCrowdloanBalance => fromKsmPrecision(`${aggregatedCrowdloanBalance.raised}`))\n                        .concat(own.data.crowdloan ? [\n                            fromKsmPrecision(`${own.data.crowdloan?.raised}`)\n                        ] : [])\n                },\n                {\n                    label: 'Sibling', // todo replace with real sibling name from mapping or at least paraId\n                    borderColor: colors.yellow,\n                    yAxisID: 'crowdloanCap',\n                    data: sibling.data.aggregatedCrowdloanBalances\n                        ?.map(aggregatedCrowdloanBalance => fromKsmPrecision(`${aggregatedCrowdloanBalance.raised}`))\n                        .concat(sibling.data.crowdloan ? [\n                            fromKsmPrecision(`${sibling.data.crowdloan?.raised}`)\n                        ] : [])\n                },\n                {\n                    label: 'BSX Multiplier',\n                    yAxisID: 'bsxMultiplier',\n                    borderColor: colors.transparent,\n                    backgroundColor: colors.faintGray,\n                    fill: true,\n                    data: labels\n                            .map(blockNum => {\n                                return calculateBsxMultiplier(\n                                    blockNum,\n                                    targetAuctionId,\n                                    targetAuction.closingStart,\n                                    targetAuction.closingEnd\n                                )\n                            })\n                }\n            ]\n        })\n    }, [\n        own.data,\n        own.loading,\n        sibling.data,\n        sibling.loading,\n    ])\n\n    const labelOptions = {\n        backgroundColor: colors.green,\n        position: 'end',\n        enabled: true,\n        color: colors.black,\n        font: {\n            family: 'Pexico',\n            size: 12\n        },\n        xAdjust: 10,\n        cornerRadius: 0,\n    }\n    const lineChartOptions = useMemo(() => {\n        return {\n            pointRadius: 0,\n            responsive: true,\n            maintainAspectRatio: false,\n            scales: {\n                x: {\n                    display: false,\n                },\n                crowdloanCap: {\n                    type: 'linear',\n                    position: 'left',\n                    display: false,\n                    max: 200000,\n                    min: 0\n                },\n                bsxMultiplier: {\n                    type: 'linear',\n                    display: false,\n                    position: 'right',\n                    max: 1.7,\n                    min: 0\n                }\n            },\n            plugins: {\n                tooltip: {\n                    enabled: false,\n                },\n                legend: {\n                    display: false\n                },\n                autocolors: false,\n                annotation: {\n                    annotations: {\n                        auctionStart: {\n                            type: 'line',\n                            value: lineChartBlockNumScale(targetAuction.blockNum),\n                            borderColor: colors.orange,\n                            borderWidth: 3,\n                            borderDash: [3, 3],\n                            scaleID: 'x',\n                            label: {\n                                ...labelOptions,\n                                position: 'start',\n                                backgroundColor: colors.orange,                                \n                                content: 'auction starting',\n                                xAdjust: 0,\n                                yAdjust: 20,\n                                \n                            }\n                        },\n                        closingStart: {\n                            type: 'line',\n                            value: lineChartBlockNumScale(targetAuction.closingStart),\n                            // value: 100000,\n                            // xMin: chronicle.data.curBlockNum,\n                            // xMax: chronicle.data.curBlockNum,\n                            borderColor: colors.red,\n                            borderWidth: 3,\n                            borderDash: [3, 3],\n                            scaleID: 'x',\n                            label: {\n                                ...labelOptions,\n                                position: 'start',\n                                backgroundColor: colors.red,                                \n                                content: 'auction closing',\n                                xAdjust: 0,\n                                yAdjust: 20,\n                                \n                            }\n                        },\n                        now: chronicle.data.curBlockNum ? {\n                            type: 'line',\n                            value: lineChartBlockNumScale(chronicle.data.curBlockNum),\n                            // value: 100000,\n                            // xMin: chronicle.data.curBlockNum,\n                            // xMax: chronicle.data.curBlockNum,\n                            borderColor: colors.white,\n                            borderWidth: 3,\n                            borderDash: [3, 3],\n                            scaleID: 'x',\n                            label: {\n                                ...labelOptions,\n                                position: 'start',\n                                backgroundColor: colors.white,                                \n                                content: 'now',\n                                xAdjust: 0,\n                                yAdjust: 60,\n                                \n                            }\n                        } : null,\n                        ownRaised: own.data.crowdloan?.raised ? {\n                            type: 'line',\n                            value: fromKsmPrecision(own.data.crowdloan.raised),\n                            borderColor: colors.green,\n                            borderWidth: 1,\n                            borderDash: [3, 3],\n                            scaleID: 'crowdloanCap',\n                            label: {\n                                ...labelOptions,\n                                content: millify(parseFloat(fromKsmPrecision(own.data.crowdloan.raised)), millifyOptions),\n                            }\n                        } : null,\n                        siblingRaised: sibling.data.crowdloan?.raised ? {\n                            type: 'line',\n                            borderWidth: 1,\n                            borderDash: [3, 3],\n                            scaleID: 'crowdloanCap',\n                            // TODO: .toFixed(0) first\n                            value: fromKsmPrecision(sibling.data.crowdloan.raised),\n                            borderColor: colors.yellow,\n                            label: {\n                                ...labelOptions,\n                                backgroundColor: colors.yellow,\n                                content: millify(parseFloat(fromKsmPrecision(sibling.data.crowdloan.raised)), millifyOptions),\n                            }\n                        } : null\n                    },\n                },\n            }\n        }\n    }, [\n        own.data.crowdloan?.raised,\n        sibling.data.crowdloan?.raised,\n        chronicle.data.curBlockNum\n    ])\n\n    const isLineChartDataLoading = useMemo(() => isDashboardEssentialDataLoading, [\n        isDashboardEssentialDataLoading\n    ]);\n\n    return <div className='bsx-dashboard'>\n\n        <div className=\"bsx-navbar\">\n            <div className=\"container-xl\">\n                <div className=\"row\">\n                    <div className=\"col-3\">\n                        <div className=\"bsx-logo\">\n                            basilisk\n                        </div>\n                    </div>\n                    <div className=\"col-9 bsx-menu-col\">\n\n                        <div className=\"bsx-menu\">\n                            <div className=\"bsx-menu-item\">\n                                <a href=\"https://bsx.fi/\" target=\"_blank\">\n                                    home\n                                </a>\n                            </div>\n                            <div className=\"bsx-menu-item\">\n                                <a href=\"https://discord.gg/S8YZj5aXR6\" target=\"_blank\">\n                                    discord\n                                </a>\n                            </div>\n                            <div className=\"bsx-eye\">\n                                <img src={bsxEye}/>\n                            </div>\n                            <div className=\"bsx-menu-item\">\n                                <a href=\"https://github.com/galacticcouncil/Basilisk-node\" target=\"_blank\">\n                                    github\n                                </a>\n                            </div>\n                            <div className=\"bsx-menu-item\">\n                                <a href=\"https://docs.bsx.fi/\" target=\"_blank\">\n                                    docs\n                                </a>\n                            </div>\n                            <div className=\"bsx-menu-item\">\n                                <a href=\"https://basiliskfi.substack.com/\" target=\"_blank\">\n                                    blog\n                                </a>\n                            </div>\n                        </div>\n\n                    </div>\n                </div>\n            </div>\n        </div>\n\n        <div className=\"bsx-disclaimer\">\n            Basilisk crowdloan user interface may occassionally lag behind with regards to the latest finalized Kusama block. Your past and future\n            rewards may be displayed with a slight delay. However this does not affect your final rewards, stay vigilant.\n        </div>\n\n        <div className=\"bsx-account\">\n            <div className=\"container-xl\">\n                <div className=\"row bsx-account-selector-display\">\n                    \n                    <div className=\"col-9 bsx-address\">\n                        <div>\n                            <span className=\"bsx-chronicle\">\n                                {`#${chronicle.data.curBlockNum}`}\n                                {accountData.account.data.address ? ` / ` : ''}  \n                            </span> \n\n                            {accountData.account.data.address}\n                        </div>\n                    </div>\n                    <div \n                        className=\"col-3 bsx-select-account\"\n                        onClick={_ => setShowAccountSelector(true)}    \n                    >\n                        change your account\n                    </div>\n                </div>\n                <div className=\"row bsx-stats\">\n                    <div className=\"col-9\">\n                        <div className=\"row\">\n                            <div className=\"col-3 bsx-stat\">\n                                <span className=\"bsx-stat-title\">\n                                    total ksm contributed\n                                </span>\n                                <span className=\"bsx-stat-value\">\n                                    ~{millify(parseFloat(fromKsmPrecision(accountData.totalKsmContributed)), millifyOptions)}\n                                </span>\n                            </div>\n                            <div className=\"col-3 bsx-stat\">\n                                <span className=\"bsx-stat-title\">\n                                    minimal bsx received\n                                </span>\n                                <span className=\"bsx-stat-value\">\n                                    ~{millify(parseFloat(fromKsmPrecision(accountData.rewardsReceived.minimalBsxReceived)), millifyOptions)}\n                                </span>\n                            </div>\n                            <div className=\"col-3 bsx-stat\">\n                                <span className=\"bsx-stat-title\">\n                                    current bsx received\n                                </span>\n                                <span className=\"bsx-stat-value\">\n                                    ~{millify(parseFloat(fromKsmPrecision(accountData.rewardsReceived.currentBsxReceived)), millifyOptions)}\n                                </span>\n                            </div>\n                            <div className=\"col-3 bsx-stat\">\n                                <span className=\"bsx-stat-title\">\n                                    current hdx reward\n                                </span>\n                                <span className=\"bsx-stat-value\">\n                                    ~{millify(parseFloat(usdToHdx(ksmToUsd(fromKsmPrecision(accountData.rewardsReceived.currentHdxReceived)))), millifyOptions)}\n                                </span>\n                            </div>\n                        </div>\n                    </div>\n                    <div className=\"col-3 bsx-stat bsx-stat-balance\">\n                        <span className=\"bsx-stat-title\">\n                            balance\n                        </span>\n                        <span className=\"bsx-stat-value\">\n                            ~{millify(parseFloat(fromKsmPrecision(accountData.account.data.balance)), millifyOptions)}\n                        </span>\n                    </div>\n                </div>\n            </div>\n        </div>\n    \n        <div className=\"container-xl\">\n            <div className=\"row\">\n                <div className=\"col-9 bsx-graph\">\n                    <div className=\"bsx-graph-wrapper\">\n                             \n                        <div className=\"bsx-annotation-container\"></div>\n\n                        {isLineChartDataLoading\n                            ? (\n                                <div className=\"bsx-graph-loader\">\n                                    Fetching graph data...\n                                </div>\n                            )\n                            : (\n                                <Line\n                                    id=\"1\"\n                                    type=\"line\"\n                                    data={lineChartData}\n                                    options={lineChartOptions}\n                                />\n                            )\n                        }\n                        \n                    </div>\n                    <div className=\"bsx-graph-timeline\">\n                        <div className=\"row\">\n                            <div className=\"col-3\">\n                                05.07\n                            </div>\n                            <div className=\"col-6 bsx-legend\">\n                                <span className=\"basilisk\">Basilisk</span> / <span className=\"sibling\">Target</span> KSM raised\n                            </div>\n                            <div className=\"col-3\">\n                                13.07\n                            </div>\n                        </div>\n                        <div className=\"bsx-progress-bar-container\">\n                            <div className=\"bsx-progress-bar\" style={{\n                                width: `${progressBarScale(chronicle.data.curBlockNum)}%`\n                            }}></div>\n                        </div>\n                    </div>\n                </div>\n                <div className=\"col-3 bsx-contribute\">\n                    <div className=\"bsx-incentives\">\n                        \n                        {isDashboardEssentialDataLoading\n                            ? (<>\n                                <div className=\"bsx-incentives-loader\">\n                                    Caluculating incentives...\n                                </div>\n                            </>)\n                            : (<>\n                                <div className=\"bsx-incentive\">\n                                    <div className=\"row\">\n                                        <div className=\"col-6 name\">\n                                            <span>\n                                                hdx bonus\n                                            </span>\n                                        </div>\n                                        <div className=\"col-6 value\">\n                                            <span>\n                                            ~{incentives.hdxBonus\n                                                    ? (new BigNumber(incentives.hdxBonus).toFixed(2))\n                                                    : '-'\n                                                }\n                                            </span>\n                                        </div>\n                                    </div>\n                                </div>\n    \n                                <div className=\"bsx-incentive\">\n                                    <div className=\"row\">\n                                        <div className=\"col-9 name\">\n                                            <span>\n                                                bsx multiplier\n                                            </span>\n                                        </div>\n                                        <div className=\"col-3 value\">\n                                            <span>\n                                                ~{incentives.bsxMultiplier\n                                                    ? (new BigNumber(incentives.bsxMultiplier).toFixed(2))\n                                                    : '-'\n                                                }\n                                            </span>\n                                        </div>\n                                    </div>\n                                </div>\n                            </>)\n                        }\n\n                    </div>\n\n                    <div>\n                        <CrowdloanContributeForm\n                            totalContributionWeight={accountData.rewardsReceived.totalContributionWeight}\n                            connectAccount={() => setShowAccountSelector(true)}\n                        />\n                    </div>\n                </div>\n            </div>\n        </div>\n\n        <div className=\"bsx-wallpaper\">\n            <img src={bsxWallpaper}/>\n        </div>\n\n        {showAccountSelector ? <AccountSelector\n            onAccountSelect={() => setShowAccountSelector(false)}\n        /> : <></>}\n    </div>\n}","import React from 'react';\nimport './App.css';\nimport ConfiguredApolloProvider from './containers/ApolloProvider'\nimport { StoreProvider } from './containers/store/Store';\nimport { PolkadotProvider } from './hooks/usePolkadot';\nimport { Dashboard } from './pages/Dashboard';\nimport TestDashboard from './pages/TestDashboard';\nfunction App() {\n  return (\n    <ConfiguredApolloProvider>\n      <StoreProvider>\n        <PolkadotProvider>\n          <Dashboard/>\n          {/* <TestDashboard/> */}\n        </PolkadotProvider>\n      </StoreProvider>\n    </ConfiguredApolloProvider>\n  );\n}\n\nexport default App;","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport log, { LogLevelDesc } from 'loglevel'\nimport linearScale from 'simple-linear-scale';\n\n// <reference types=\"simple-linear-scale.d.ts\">\n\nlet logLevel = (() => {\n  let params = (new URL(document.location as unknown as string)).searchParams;\n  console.log('loglevel', params.get('loglevel') as LogLevelDesc);\n  return params.get('loglevel') as LogLevelDesc;\n})() || 'info'\n\nlog.setLevel(logLevel)\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}